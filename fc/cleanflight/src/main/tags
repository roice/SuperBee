!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	./common/maths.h	/^    float A[3];$/;"	m	union:__anon25
ABS	./common/maths.h	31;"	d
ACC	./target/ALIENWIIF3/target.h	40;"	d
ACC	./target/CC3D/target.h	52;"	d
ACC	./target/CHEBUZZF3/target.h	53;"	d
ACC	./target/CJMCU/target.h	37;"	d
ACC	./target/EUSTM32F103RC/target.h	53;"	d
ACC	./target/NAZE/target.h	91;"	d
ACC	./target/NAZE32PRO/target.h	33;"	d
ACC	./target/OLIMEXINO/target.h	49;"	d
ACC	./target/PORT103R/target.h	66;"	d
ACC	./target/SPARKY/target.h	37;"	d
ACC	./target/SPRACINGF3/target.h	46;"	d
ACC	./target/STM32F3DISCOVERY/target.h	52;"	d
ACC	./target/SUPERBEE/target.h	91;"	d
ACC_ADXL345	./sensors/acceleration.h	/^    ACC_ADXL345 = 2,$/;"	e	enum:__anon113
ACC_ADXL345_ALIGN	./target/NAZE/target.h	98;"	d
ACC_ADXL345_ALIGN	./target/SUPERBEE/target.h	98;"	d
ACC_BMA280	./sensors/acceleration.h	/^    ACC_BMA280 = 5,$/;"	e	enum:__anon113
ACC_BMA280_ALIGN	./target/NAZE/target.h	101;"	d
ACC_BMA280_ALIGN	./target/SUPERBEE/target.h	101;"	d
ACC_DEFAULT	./sensors/acceleration.h	/^    ACC_DEFAULT = 0,$/;"	e	enum:__anon113
ACC_FAKE	./sensors/acceleration.h	/^    ACC_FAKE = 9,$/;"	e	enum:__anon113
ACC_I2C_ADDRESS	./drivers/accgyro_lsm303dlhc.h	180;"	d
ACC_LSM303DLHC	./sensors/acceleration.h	/^    ACC_LSM303DLHC = 6,$/;"	e	enum:__anon113
ACC_MAX	./sensors/acceleration.h	34;"	d
ACC_MMA8452	./sensors/acceleration.h	/^    ACC_MMA8452 = 4,$/;"	e	enum:__anon113
ACC_MMA8452_ALIGN	./target/NAZE/target.h	100;"	d
ACC_MMA8452_ALIGN	./target/SUPERBEE/target.h	100;"	d
ACC_MPU6050	./sensors/acceleration.h	/^    ACC_MPU6050 = 3,$/;"	e	enum:__anon113
ACC_MPU6050_ALIGN	./target/ALIENWIIF3/target.h	43;"	d
ACC_MPU6050_ALIGN	./target/CHEBUZZF3/target.h	57;"	d
ACC_MPU6050_ALIGN	./target/EUSTM32F103RC/target.h	62;"	d
ACC_MPU6050_ALIGN	./target/NAZE/target.h	99;"	d
ACC_MPU6050_ALIGN	./target/SPARKY/target.h	40;"	d
ACC_MPU6050_ALIGN	./target/SPRACINGF3/target.h	48;"	d
ACC_MPU6050_ALIGN	./target/SUPERBEE/target.h	99;"	d
ACC_NONE	./sensors/acceleration.h	/^    ACC_NONE = 1,$/;"	e	enum:__anon113
ACC_SPI_MPU6000	./sensors/acceleration.h	/^    ACC_SPI_MPU6000 = 7,$/;"	e	enum:__anon113
ACC_SPI_MPU6000_ALIGN	./target/CC3D/target.h	55;"	d
ACC_SPI_MPU6500	./sensors/acceleration.h	/^    ACC_SPI_MPU6500 = 8,$/;"	e	enum:__anon113
ACC_SPI_MPU6500_ALIGN	./target/NAZE/target.h	102;"	d
ACC_SPI_MPU6500_ALIGN	./target/SUPERBEE/target.h	102;"	d
ACTIVATE_RC_MODE	./io/rc_controls.h	53;"	d
ADCVREF	./sensors/battery.c	105;"	d	file:
ADC_AHB_PERIPHERAL	./drivers/adc_stm32f30x.c	35;"	d	file:
ADC_AHB_PERIPHERAL	./target/ALIENWIIF3/target.h	105;"	d
ADC_AHB_PERIPHERAL	./target/CHEBUZZF3/target.h	82;"	d
ADC_AHB_PERIPHERAL	./target/SPARKY/target.h	100;"	d
ADC_AHB_PERIPHERAL	./target/SPRACINGF3/target.h	131;"	d
ADC_AHB_PERIPHERAL	./target/STM32F3DISCOVERY/target.h	73;"	d
ADC_BATTERY	./drivers/adc.h	/^    ADC_BATTERY = 0,$/;"	e	enum:__anon50
ADC_CHANNEL_COUNT	./drivers/adc.h	28;"	d
ADC_CHANNEL_MAX	./drivers/adc.h	/^    ADC_CHANNEL_MAX = ADC_CURRENT$/;"	e	enum:__anon50
ADC_CURRENT	./drivers/adc.h	/^    ADC_CURRENT = 3,$/;"	e	enum:__anon50
ADC_DMA_CHANNEL	./drivers/adc_stm32f30x.c	36;"	d	file:
ADC_DMA_CHANNEL	./target/ALIENWIIF3/target.h	104;"	d
ADC_DMA_CHANNEL	./target/CHEBUZZF3/target.h	83;"	d
ADC_DMA_CHANNEL	./target/SPARKY/target.h	99;"	d
ADC_DMA_CHANNEL	./target/SPRACINGF3/target.h	130;"	d
ADC_DMA_CHANNEL	./target/STM32F3DISCOVERY/target.h	74;"	d
ADC_EXTERNAL1	./drivers/adc.h	/^    ADC_EXTERNAL1 = 2,$/;"	e	enum:__anon50
ADC_INSTANCE	./drivers/adc_stm32f30x.c	34;"	d	file:
ADC_INSTANCE	./target/ALIENWIIF3/target.h	103;"	d
ADC_INSTANCE	./target/CHEBUZZF3/target.h	81;"	d
ADC_INSTANCE	./target/SPARKY/target.h	98;"	d
ADC_INSTANCE	./target/SPRACINGF3/target.h	129;"	d
ADC_INSTANCE	./target/STM32F3DISCOVERY/target.h	72;"	d
ADC_RSSI	./drivers/adc.h	/^    ADC_RSSI = 1,$/;"	e	enum:__anon50
ADDRESSED	./vcp/usb_pwr.h	/^    ADDRESSED,$/;"	e	enum:_DEVICE_STATE
ADJUSTMENT_FUNCTION_CONFIG_INDEX_OFFSET	./io/rc_controls.c	417;"	d	file:
ADJUSTMENT_FUNCTION_COUNT	./io/rc_controls.h	178;"	d
ADJUSTMENT_INDEX_OFFSET	./io/rc_controls.h	217;"	d
ADJUSTMENT_MODE_SELECT	./io/rc_controls.h	/^    ADJUSTMENT_MODE_SELECT$/;"	e	enum:__anon97
ADJUSTMENT_MODE_STEP	./io/rc_controls.h	/^    ADJUSTMENT_MODE_STEP,$/;"	e	enum:__anon97
ADJUSTMENT_NONE	./io/rc_controls.h	/^    ADJUSTMENT_NONE = 0,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_D	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_D,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_I	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_I,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_P	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_P,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_RATE	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_RATE,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_ROLL_D	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_ROLL_D,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_ROLL_I	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_ROLL_I,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_ROLL_P	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_ROLL_P,$/;"	e	enum:__anon96
ADJUSTMENT_PITCH_ROLL_RATE	./io/rc_controls.h	/^    ADJUSTMENT_PITCH_ROLL_RATE,$/;"	e	enum:__anon96
ADJUSTMENT_RATE_PROFILE	./io/rc_controls.h	/^    ADJUSTMENT_RATE_PROFILE,$/;"	e	enum:__anon96
ADJUSTMENT_RC_EXPO	./io/rc_controls.h	/^    ADJUSTMENT_RC_EXPO,$/;"	e	enum:__anon96
ADJUSTMENT_RC_RATE	./io/rc_controls.h	/^    ADJUSTMENT_RC_RATE,$/;"	e	enum:__anon96
ADJUSTMENT_ROLL_D	./io/rc_controls.h	/^    ADJUSTMENT_ROLL_D,$/;"	e	enum:__anon96
ADJUSTMENT_ROLL_I	./io/rc_controls.h	/^    ADJUSTMENT_ROLL_I,$/;"	e	enum:__anon96
ADJUSTMENT_ROLL_P	./io/rc_controls.h	/^    ADJUSTMENT_ROLL_P,$/;"	e	enum:__anon96
ADJUSTMENT_ROLL_RATE	./io/rc_controls.h	/^    ADJUSTMENT_ROLL_RATE,$/;"	e	enum:__anon96
ADJUSTMENT_THROTTLE_EXPO	./io/rc_controls.h	/^    ADJUSTMENT_THROTTLE_EXPO,$/;"	e	enum:__anon96
ADJUSTMENT_YAW_D	./io/rc_controls.h	/^    ADJUSTMENT_YAW_D,$/;"	e	enum:__anon96
ADJUSTMENT_YAW_I	./io/rc_controls.h	/^    ADJUSTMENT_YAW_I,$/;"	e	enum:__anon96
ADJUSTMENT_YAW_P	./io/rc_controls.h	/^    ADJUSTMENT_YAW_P,$/;"	e	enum:__anon96
ADJUSTMENT_YAW_RATE	./io/rc_controls.h	/^    ADJUSTMENT_YAW_RATE,$/;"	e	enum:__anon96
ADXL345_ADDRESS	./drivers/accgyro_adxl345.c	31;"	d	file:
ADXL345_BW_RATE	./drivers/accgyro_adxl345.c	34;"	d	file:
ADXL345_DATA_FORMAT	./drivers/accgyro_adxl345.c	37;"	d	file:
ADXL345_DATA_OUT	./drivers/accgyro_adxl345.c	38;"	d	file:
ADXL345_FIFO_CTL	./drivers/accgyro_adxl345.c	39;"	d	file:
ADXL345_FIFO_STREAM	./drivers/accgyro_adxl345.c	57;"	d	file:
ADXL345_FULL_RANGE	./drivers/accgyro_adxl345.c	52;"	d	file:
ADXL345_INT_ENABLE	./drivers/accgyro_adxl345.c	36;"	d	file:
ADXL345_POWER_CTL	./drivers/accgyro_adxl345.c	35;"	d	file:
ADXL345_POWER_MEAS	./drivers/accgyro_adxl345.c	51;"	d	file:
ADXL345_RANGE_16G	./drivers/accgyro_adxl345.c	56;"	d	file:
ADXL345_RANGE_2G	./drivers/accgyro_adxl345.c	53;"	d	file:
ADXL345_RANGE_4G	./drivers/accgyro_adxl345.c	54;"	d	file:
ADXL345_RANGE_8G	./drivers/accgyro_adxl345.c	55;"	d	file:
ADXL345_RATE_100	./drivers/accgyro_adxl345.c	43;"	d	file:
ADXL345_RATE_1600	./drivers/accgyro_adxl345.c	47;"	d	file:
ADXL345_RATE_200	./drivers/accgyro_adxl345.c	44;"	d	file:
ADXL345_RATE_3200	./drivers/accgyro_adxl345.c	48;"	d	file:
ADXL345_RATE_400	./drivers/accgyro_adxl345.c	45;"	d	file:
ADXL345_RATE_50	./drivers/accgyro_adxl345.c	42;"	d	file:
ADXL345_RATE_800	./drivers/accgyro_adxl345.c	46;"	d	file:
AFIO_MAPR_SWJ_CFG_NO_JTAG_SW	./drivers/system.c	138;"	d	file:
AHBPrescTable	./target/ALIENWIIF3/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AHBPrescTable	./target/CHEBUZZF3/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AHBPrescTable	./target/NAZE32PRO/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AHBPrescTable	./target/SPARKY/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AHBPrescTable	./target/SPRACINGF3/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AHBPrescTable	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^  __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};$/;"	v
AIRCR_VECTKEY_MASK	./drivers/system_stm32f10x.c	27;"	d	file:
AIRCR_VECTKEY_MASK	./drivers/system_stm32f30x.c	27;"	d	file:
AI_PITCH	./common/axis.h	/^    AI_PITCH,$/;"	e	enum:__anon29
AI_ROLL	./common/axis.h	/^    AI_ROLL = 0,$/;"	e	enum:__anon29
AK8975A_ASAX	./drivers/compass_ak8975.c	77;"	d	file:
AK8975A_ASAY	./drivers/compass_ak8975.c	78;"	d	file:
AK8975A_ASAZ	./drivers/compass_ak8975.c	79;"	d	file:
AK8975_MAG_I2C_ADDRESS	./drivers/compass_ak8975.c	45;"	d	file:
AK8975_MAG_REG_ASCT	./drivers/compass_ak8975.c	60;"	d	file:
AK8975_MAG_REG_CNTL	./drivers/compass_ak8975.c	59;"	d	file:
AK8975_MAG_REG_HXH	./drivers/compass_ak8975.c	53;"	d	file:
AK8975_MAG_REG_HXL	./drivers/compass_ak8975.c	52;"	d	file:
AK8975_MAG_REG_HYH	./drivers/compass_ak8975.c	55;"	d	file:
AK8975_MAG_REG_HYL	./drivers/compass_ak8975.c	54;"	d	file:
AK8975_MAG_REG_HZH	./drivers/compass_ak8975.c	57;"	d	file:
AK8975_MAG_REG_HZL	./drivers/compass_ak8975.c	56;"	d	file:
AK8975_MAG_REG_INFO	./drivers/compass_ak8975.c	50;"	d	file:
AK8975_MAG_REG_STATUS1	./drivers/compass_ak8975.c	51;"	d	file:
AK8975_MAG_REG_STATUS2	./drivers/compass_ak8975.c	58;"	d	file:
AK8975_MAG_REG_WHO_AM_I	./drivers/compass_ak8975.c	49;"	d	file:
ALIENWII32	./target/ALIENWIIF3/target.h	127;"	d
ALIGN_ACCEL	./mw.c	/^    ALIGN_ACCEL = 1,$/;"	e	enum:__anon23	file:
ALIGN_DEFAULT	./sensors/sensors.h	/^    ALIGN_DEFAULT = 0,                                      \/\/ driver-provided alignment$/;"	e	enum:__anon122
ALIGN_GYRO	./mw.c	/^    ALIGN_GYRO = 0,$/;"	e	enum:__anon23	file:
ALIGN_MAG	./mw.c	/^    ALIGN_MAG = 2$/;"	e	enum:__anon23	file:
ALL_FUNCTIONS_SHARABLE_WITH_MSP	./io/serial.c	186;"	d	file:
ALL_TELEMETRY_FUNCTIONS_MASK	./io/serial.c	185;"	d	file:
ANGLE_INDEX_COUNT	./common/axis.h	42;"	d
ANGLE_MODE	./config/runtime_config.h	/^    ANGLE_MODE      = (1 << 0),$/;"	e	enum:__anon19
API_VERSION_LENGTH	./io/serial_msp.c	137;"	d	file:
API_VERSION_MAJOR	./io/serial_msp.c	134;"	d	file:
API_VERSION_MINOR	./io/serial_msp.c	135;"	d	file:
ARMED	./config/runtime_config.h	/^    ARMED           = (1 << 2)$/;"	e	enum:__anon18
ARMING_FLAG	./config/runtime_config.h	31;"	d
ARRAYLEN	./common/utils.h	22;"	d
ARRAY_LENGTH	./blackbox/blackbox.c	86;"	d	file:
ATOMIC_AND	./common/atomic.h	110;"	d
ATOMIC_BARRIER	./common/atomic.h	100;"	d
ATOMIC_BLOCK	./common/atomic.h	67;"	d
ATOMIC_BLOCK_NB	./common/atomic.h	76;"	d
ATOMIC_OR	./common/atomic.h	109;"	d
ATTACHED	./vcp/usb_pwr.h	/^    ATTACHED,$/;"	e	enum:_DEVICE_STATE
AUTOTUNE	./target/ALIENWIIF3/target.h	117;"	d
AUTOTUNE	./target/CC3D/target.h	115;"	d
AUTOTUNE	./target/CC3D/target.h	121;"	d
AUTOTUNE	./target/CHEBUZZF3/target.h	124;"	d
AUTOTUNE	./target/EUSTM32F103RC/target.h	126;"	d
AUTOTUNE	./target/NAZE/target.h	174;"	d
AUTOTUNE	./target/NAZE32PRO/target.h	47;"	d
AUTOTUNE	./target/OLIMEXINO/target.h	112;"	d
AUTOTUNE	./target/PORT103R/target.h	137;"	d
AUTOTUNE	./target/SPARKY/target.h	110;"	d
AUTOTUNE	./target/SPRACINGF3/target.h	163;"	d
AUTOTUNE	./target/STM32F3DISCOVERY/target.h	98;"	d
AUTOTUNE	./target/SUPERBEE/target.h	187;"	d
AUTOTUNE_DECREASE_MULTIPLIER	./flight/autotune.c	95;"	d	file:
AUTOTUNE_D_MULTIPLIER	./flight/autotune.c	91;"	d	file:
AUTOTUNE_INCREASE_MULTIPLIER	./flight/autotune.c	94;"	d	file:
AUTOTUNE_MAX_OSCILLATION_ANGLE	./flight/autotune.c	89;"	d	file:
AUTOTUNE_MINIMUM_I_VALUE	./flight/autotune.c	97;"	d	file:
AUTOTUNE_MODE	./config/runtime_config.h	/^    AUTOTUNE_MODE   = (1 << 7),$/;"	e	enum:__anon19
AUTOTUNE_PHASE_COUNT	./flight/autotune.c	121;"	d	file:
AUTOTUNE_PHASE_MAX	./flight/autotune.c	120;"	d	file:
AUTOTUNE_SETTLING_DELAY_MS	./flight/autotune.c	92;"	d	file:
AUTOTUNE_TARGET_ANGLE	./flight/autotune.c	90;"	d	file:
AUTO_INCREMENT_ENABLE	./drivers/accgyro_lsm303dlhc.c	64;"	d	file:
AUX1	./io/rc_controls.h	/^    AUX1,$/;"	e	enum:rc_alias
AUX2	./io/rc_controls.h	/^    AUX2,$/;"	e	enum:rc_alias
AUX3	./io/rc_controls.h	/^    AUX3,$/;"	e	enum:rc_alias
AUX4	./io/rc_controls.h	/^    AUX4,$/;"	e	enum:rc_alias
AUX5	./io/rc_controls.h	/^    AUX5,$/;"	e	enum:rc_alias
AUX6	./io/rc_controls.h	/^    AUX6,$/;"	e	enum:rc_alias
AUX7	./io/rc_controls.h	/^    AUX7,$/;"	e	enum:rc_alias
AUX8	./io/rc_controls.h	/^    AUX8$/;"	e	enum:rc_alias
AXES_ENABLE	./drivers/accgyro_l3gd20.c	52;"	d	file:
AXES_ENABLE	./drivers/accgyro_lsm303dlhc.c	80;"	d	file:
A_level	./flight/pid.h	/^    float A_level;$/;"	m	struct:pidProfile_s
AccFull_Scale	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t AccFull_Scale;                      \/* Full Scale selection *\/$/;"	m	struct:__anon53
AccInflightCalibrationActive	./mw.c	/^bool AccInflightCalibrationActive = false;$/;"	v
AccInflightCalibrationArmed	./mw.c	/^bool AccInflightCalibrationArmed = false;$/;"	v
AccInflightCalibrationMeasurementDone	./mw.c	/^bool AccInflightCalibrationMeasurementDone = false;$/;"	v
AccInflightCalibrationSavetoEEProm	./mw.c	/^bool AccInflightCalibrationSavetoEEProm = false;$/;"	v
AccOutput_DataRate	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t AccOutput_DataRate;                 \/* OUT data rate *\/$/;"	m	struct:__anon53
AdcChannel	./drivers/adc.h	/^} AdcChannel;$/;"	t	typeref:enum:__anon50
AltHold	./flight/altitudehold.c	/^int32_t AltHold;$/;"	v
Axes_Enable	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t Axes_Enable;                        \/* Axes enable *\/$/;"	m	struct:__anon53
BANDWIDTH_1	./drivers/accgyro_l3gd20.c	54;"	d	file:
BANDWIDTH_2	./drivers/accgyro_l3gd20.c	55;"	d	file:
BANDWIDTH_3	./drivers/accgyro_l3gd20.c	56;"	d	file:
BANDWIDTH_4	./drivers/accgyro_l3gd20.c	57;"	d	file:
BARO	./target/CC3D/target.h	58;"	d
BARO	./target/CHEBUZZF3/target.h	59;"	d
BARO	./target/EUSTM32F103RC/target.h	64;"	d
BARO	./target/NAZE/target.h	104;"	d
BARO	./target/OLIMEXINO/target.h	59;"	d
BARO	./target/PORT103R/target.h	75;"	d
BARO	./target/SPARKY/target.h	42;"	d
BARO	./target/SPRACINGF3/target.h	50;"	d
BARO	./target/SUPERBEE/target.h	107;"	d
BARO	./target/SUPERBEE/target.h	111;"	d
BAROMETER_NEEDS_CALCULATION	./sensors/barometer.c	/^    BAROMETER_NEEDS_CALCULATION,$/;"	e	enum:__anon123	file:
BAROMETER_NEEDS_PROCESSING	./sensors/barometer.c	/^    BAROMETER_NEEDS_PROCESSING$/;"	e	enum:__anon123	file:
BAROMETER_NEEDS_SAMPLES	./sensors/barometer.c	/^    BAROMETER_NEEDS_SAMPLES = 0,$/;"	e	enum:__anon123	file:
BARO_APB2_PERIPHERALS	./target/NAZE/target.h	40;"	d
BARO_APB2_PERIPHERALS	./target/PORT103R/target.h	42;"	d
BARO_APB2_PERIPHERALS	./target/SUPERBEE/target.h	40;"	d
BARO_BMP085	./sensors/barometer.h	/^    BARO_BMP085 = 2,$/;"	e	enum:__anon115
BARO_DEFAULT	./sensors/barometer.h	/^    BARO_DEFAULT = 1,$/;"	e	enum:__anon115
BARO_EOC_GPIO	./target/NAZE/target.h	38;"	d
BARO_EOC_GPIO	./target/PORT103R/target.h	40;"	d
BARO_EOC_GPIO	./target/SUPERBEE/target.h	38;"	d
BARO_EOC_PIN	./target/NAZE/target.h	39;"	d
BARO_EOC_PIN	./target/PORT103R/target.h	41;"	d
BARO_EOC_PIN	./target/SUPERBEE/target.h	39;"	d
BARO_MODE	./config/runtime_config.h	/^    BARO_MODE       = (1 << 3),$/;"	e	enum:__anon19
BARO_MS5611	./sensors/barometer.h	/^    BARO_MS5611 = 3$/;"	e	enum:__anon115
BARO_NONE	./sensors/barometer.h	/^    BARO_NONE = 0,$/;"	e	enum:__anon115
BARO_SAMPLE_COUNT_MAX	./sensors/barometer.h	27;"	d
BARO_UPDATE_FREQUENCY_40HZ	./flight/altitudehold.c	83;"	d	file:
BARO_XCLR_GPIO	./target/NAZE/target.h	36;"	d
BARO_XCLR_GPIO	./target/PORT103R/target.h	38;"	d
BARO_XCLR_GPIO	./target/SUPERBEE/target.h	36;"	d
BARO_XCLR_PIN	./target/NAZE/target.h	37;"	d
BARO_XCLR_PIN	./target/PORT103R/target.h	39;"	d
BARO_XCLR_PIN	./target/SUPERBEE/target.h	37;"	d
BASEFLIGHT_IDENTIFIER	./io/serial_msp.c	141;"	d	file:
BATTERY_CRITICAL	./sensors/battery.h	/^    BATTERY_CRITICAL$/;"	e	enum:__anon117
BATTERY_OK	./sensors/battery.h	/^    BATTERY_OK = 0,$/;"	e	enum:__anon117
BATTERY_SAMPLE_COUNT	./sensors/battery.c	56;"	d	file:
BATTERY_WARNING	./sensors/battery.h	/^    BATTERY_WARNING,$/;"	e	enum:__anon117
BAUD_115200	./io/serial.h	/^    BAUD_115200,$/;"	e	enum:__anon71
BAUD_19200	./io/serial.h	/^    BAUD_19200,$/;"	e	enum:__anon71
BAUD_230400	./io/serial.h	/^    BAUD_230400,$/;"	e	enum:__anon71
BAUD_250000	./io/serial.h	/^    BAUD_250000,$/;"	e	enum:__anon71
BAUD_38400	./io/serial.h	/^    BAUD_38400,$/;"	e	enum:__anon71
BAUD_57600	./io/serial.h	/^    BAUD_57600,$/;"	e	enum:__anon71
BAUD_9600	./io/serial.h	/^    BAUD_9600,$/;"	e	enum:__anon71
BAUD_AUTO	./io/serial.h	/^    BAUD_AUTO = 0,$/;"	e	enum:__anon71
BAUD_RATE_COUNT	./io/serial.c	81;"	d	file:
BEEPER	./target/ALIENWIIF3/target.h	55;"	d
BEEPER	./target/CC3D/target.h	67;"	d
BEEPER	./target/CHEBUZZF3/target.h	67;"	d
BEEPER	./target/NAZE/target.h	114;"	d
BEEPER	./target/NAZE32PRO/target.h	29;"	d
BEEPER	./target/PORT103R/target.h	84;"	d
BEEPER	./target/SPRACINGF3/target.h	62;"	d
BEEPER	./target/STM32F3DISCOVERY/target.h	58;"	d
BEEPER	./target/SUPERBEE/target.h	127;"	d
BEEPER_ACC_CALIBRATION	./io/beeper.h	/^    BEEPER_ACC_CALIBRATION,         \/\/ ACC inflight calibration completed confirmation$/;"	e	enum:__anon81
BEEPER_ACC_CALIBRATION_FAIL	./io/beeper.h	/^    BEEPER_ACC_CALIBRATION_FAIL,    \/\/ ACC inflight calibration failed$/;"	e	enum:__anon81
BEEPER_ARMED	./io/beeper.h	/^    BEEPER_ARMED,                   \/\/ Warning beeps when board is armed (repeats until board is disarmed or throttle is increased)$/;"	e	enum:__anon81
BEEPER_ARMING	./io/beeper.h	/^    BEEPER_ARMING,                  \/\/ Beep when arming the board$/;"	e	enum:__anon81
BEEPER_ARMING_GPS_FIX	./io/beeper.h	/^    BEEPER_ARMING_GPS_FIX,          \/\/ Beep a special tone when arming the board and GPS has fix$/;"	e	enum:__anon81
BEEPER_BAT_CRIT_LOW	./io/beeper.h	/^    BEEPER_BAT_CRIT_LOW,            \/\/ Longer warning beeps when battery is critically low (repeats)$/;"	e	enum:__anon81
BEEPER_BAT_LOW	./io/beeper.h	/^    BEEPER_BAT_LOW,                 \/\/ Warning beeps when battery is getting low (repeats)$/;"	e	enum:__anon81
BEEPER_COMMAND_REPEAT	./io/beeper.c	51;"	d	file:
BEEPER_COMMAND_STOP	./io/beeper.c	52;"	d	file:
BEEPER_CONFIRMATION_BEEP_DURATION	./io/beeper.c	123;"	d	file:
BEEPER_CONFIRMATION_BEEP_GAP_DURATION	./io/beeper.c	124;"	d	file:
BEEPER_DISARMING	./io/beeper.h	/^    BEEPER_DISARMING,               \/\/ Beep when disarming the board$/;"	e	enum:__anon81
BEEPER_DISARM_REPEAT	./io/beeper.h	/^    BEEPER_DISARM_REPEAT,           \/\/ Beeps sounded while stick held in disarm position$/;"	e	enum:__anon81
BEEPER_ENTRY	./io/beeper.c	149;"	d	file:
BEEPER_ENTRY	./io/beeper.c	151;"	d	file:
BEEPER_GPS_STATUS	./io/beeper.h	/^    BEEPER_GPS_STATUS,$/;"	e	enum:__anon81
BEEPER_GYRO_CALIBRATED	./io/beeper.h	/^    BEEPER_GYRO_CALIBRATED,$/;"	e	enum:__anon81
BEEPER_INVERTED	./target/CHEBUZZF3/target.h	34;"	d
BEEPER_INVERTED	./target/SPRACINGF3/target.h	29;"	d
BEEPER_INVERTED	./target/STM32F3DISCOVERY/target.h	34;"	d
BEEPER_INVERTED	./target/STM32F3DISCOVERY/target.h	37;"	d
BEEPER_MULTI_BEEPS	./io/beeper.h	/^    BEEPER_MULTI_BEEPS,             \/\/ Internal value used by 'beeperConfirmationBeeps()'.$/;"	e	enum:__anon81
BEEPER_NAMES	./io/beeper.c	46;"	d	file:
BEEPER_READY_BEEP	./io/beeper.h	/^    BEEPER_READY_BEEP,              \/\/ Ring a tone when GPS is locked and ready$/;"	e	enum:__anon81
BEEPER_RX_LOST	./io/beeper.h	/^    BEEPER_RX_LOST,                 \/\/ Beeps when TX is turned off or signal lost (repeat until TX is okay)$/;"	e	enum:__anon81
BEEPER_RX_LOST_LANDING	./io/beeper.h	/^    BEEPER_RX_LOST_LANDING,         \/\/ Beeps SOS when armed and TX is turned off or signal lost (autolanding\/autodisarm)$/;"	e	enum:__anon81
BEEPER_RX_SET	./io/beeper.h	/^    BEEPER_RX_SET,                  \/\/ Beeps when aux channel is set for beep or beep sequence how many satellites has found if GPS enabled$/;"	e	enum:__anon81
BEEPER_SILENCE	./io/beeper.h	/^    BEEPER_SILENCE = 0,             \/\/ Silence, see beeperSilence()$/;"	e	enum:__anon81
BEEPER_TABLE_ENTRY_COUNT	./io/beeper.c	175;"	d	file:
BEEP_GPIO	./target/ALIENWIIF3/target.h	28;"	d
BEEP_GPIO	./target/CC3D/target.h	30;"	d
BEEP_GPIO	./target/CHEBUZZF3/target.h	31;"	d
BEEP_GPIO	./target/NAZE/target.h	32;"	d
BEEP_GPIO	./target/NAZE32PRO/target.h	25;"	d
BEEP_GPIO	./target/PORT103R/target.h	34;"	d
BEEP_GPIO	./target/SPRACINGF3/target.h	26;"	d
BEEP_GPIO	./target/STM32F3DISCOVERY/target.h	31;"	d
BEEP_GPIO	./target/SUPERBEE/target.h	32;"	d
BEEP_OFF	./drivers/sound_beeper.h	22;"	d
BEEP_OFF	./drivers/sound_beeper.h	26;"	d
BEEP_ON	./drivers/sound_beeper.h	23;"	d
BEEP_ON	./drivers/sound_beeper.h	27;"	d
BEEP_PERIPHERAL	./target/ALIENWIIF3/target.h	30;"	d
BEEP_PERIPHERAL	./target/CC3D/target.h	32;"	d
BEEP_PERIPHERAL	./target/CHEBUZZF3/target.h	33;"	d
BEEP_PERIPHERAL	./target/NAZE/target.h	34;"	d
BEEP_PERIPHERAL	./target/NAZE32PRO/target.h	27;"	d
BEEP_PERIPHERAL	./target/PORT103R/target.h	36;"	d
BEEP_PERIPHERAL	./target/SPRACINGF3/target.h	28;"	d
BEEP_PERIPHERAL	./target/STM32F3DISCOVERY/target.h	33;"	d
BEEP_PERIPHERAL	./target/SUPERBEE/target.h	34;"	d
BEEP_PIN	./target/ALIENWIIF3/target.h	29;"	d
BEEP_PIN	./target/CC3D/target.h	31;"	d
BEEP_PIN	./target/CHEBUZZF3/target.h	32;"	d
BEEP_PIN	./target/NAZE/target.h	33;"	d
BEEP_PIN	./target/NAZE32PRO/target.h	26;"	d
BEEP_PIN	./target/PORT103R/target.h	35;"	d
BEEP_PIN	./target/SPRACINGF3/target.h	27;"	d
BEEP_PIN	./target/STM32F3DISCOVERY/target.h	32;"	d
BEEP_PIN	./target/SUPERBEE/target.h	33;"	d
BEEP_TOGGLE	./drivers/sound_beeper.h	21;"	d
BEEP_TOGGLE	./drivers/sound_beeper.h	25;"	d
BINDPLUG_PIN	./target/ALIENWIIF3/target.h	132;"	d
BINDPLUG_PIN	./target/NAZE/target.h	192;"	d
BINDPLUG_PIN	./target/SUPERBEE/target.h	205;"	d
BINDPLUG_PORT	./target/ALIENWIIF3/target.h	131;"	d
BINDPLUG_PORT	./target/NAZE/target.h	191;"	d
BINDPLUG_PORT	./target/SUPERBEE/target.h	204;"	d
BIND_PIN	./target/ALIENWIIF3/target.h	124;"	d
BIND_PIN	./target/CC3D/target.h	129;"	d
BIND_PIN	./target/CJMCU/target.h	67;"	d
BIND_PIN	./target/EUSTM32F103RC/target.h	133;"	d
BIND_PIN	./target/NAZE/target.h	181;"	d
BIND_PIN	./target/NAZE32PRO/target.h	54;"	d
BIND_PIN	./target/SPARKY/target.h	157;"	d
BIND_PIN	./target/SPRACINGF3/target.h	171;"	d
BIND_PIN	./target/SUPERBEE/target.h	194;"	d
BIND_PORT	./target/ALIENWIIF3/target.h	123;"	d
BIND_PORT	./target/CC3D/target.h	128;"	d
BIND_PORT	./target/CJMCU/target.h	66;"	d
BIND_PORT	./target/EUSTM32F103RC/target.h	132;"	d
BIND_PORT	./target/NAZE/target.h	180;"	d
BIND_PORT	./target/NAZE32PRO/target.h	53;"	d
BIND_PORT	./target/SPARKY/target.h	156;"	d
BIND_PORT	./target/SPRACINGF3/target.h	170;"	d
BIND_PORT	./target/SUPERBEE/target.h	193;"	d
BITCOUNT	./common/utils.h	33;"	d
BITS_CLKSEL	./drivers/accgyro_spi_mpu6000.c	79;"	d	file:
BITS_DLPF_CFG_10HZ	./drivers/accgyro_spi_mpu6000.c	97;"	d	file:
BITS_DLPF_CFG_188HZ	./drivers/accgyro_spi_mpu6000.c	93;"	d	file:
BITS_DLPF_CFG_188HZ	./drivers/accgyro_spi_mpu6000.h	7;"	d
BITS_DLPF_CFG_20HZ	./drivers/accgyro_spi_mpu6000.c	96;"	d	file:
BITS_DLPF_CFG_2100HZ_NOLPF	./drivers/accgyro_spi_mpu6000.c	99;"	d	file:
BITS_DLPF_CFG_256HZ	./drivers/accgyro_spi_mpu6000.c	92;"	d	file:
BITS_DLPF_CFG_256HZ	./drivers/accgyro_spi_mpu6000.h	6;"	d
BITS_DLPF_CFG_42HZ	./drivers/accgyro_spi_mpu6000.c	95;"	d	file:
BITS_DLPF_CFG_42HZ	./drivers/accgyro_spi_mpu6000.h	9;"	d
BITS_DLPF_CFG_5HZ	./drivers/accgyro_spi_mpu6000.c	98;"	d	file:
BITS_DLPF_CFG_98HZ	./drivers/accgyro_spi_mpu6000.c	94;"	d	file:
BITS_DLPF_CFG_98HZ	./drivers/accgyro_spi_mpu6000.h	8;"	d
BITS_DLPF_CFG_MASK	./drivers/accgyro_spi_mpu6000.c	100;"	d	file:
BITS_FS_1000DPS	./drivers/accgyro_spi_mpu6000.c	85;"	d	file:
BITS_FS_16G	./drivers/accgyro_spi_mpu6000.c	90;"	d	file:
BITS_FS_2000DPS	./drivers/accgyro_spi_mpu6000.c	86;"	d	file:
BITS_FS_250DPS	./drivers/accgyro_spi_mpu6000.c	83;"	d	file:
BITS_FS_2G	./drivers/accgyro_spi_mpu6000.c	87;"	d	file:
BITS_FS_4G	./drivers/accgyro_spi_mpu6000.c	88;"	d	file:
BITS_FS_500DPS	./drivers/accgyro_spi_mpu6000.c	84;"	d	file:
BITS_FS_8G	./drivers/accgyro_spi_mpu6000.c	89;"	d	file:
BITS_FS_MASK	./drivers/accgyro_spi_mpu6000.c	91;"	d	file:
BIT_ACC	./drivers/accgyro_spi_mpu6000.c	106;"	d	file:
BIT_COMPARE_0	./drivers/light_ws2811strip.h	29;"	d
BIT_COMPARE_1	./drivers/light_ws2811strip.h	28;"	d
BIT_GYRO	./drivers/accgyro_spi_mpu6000.c	105;"	d	file:
BIT_H_RESET	./drivers/accgyro_spi_mpu6000.c	78;"	d	file:
BIT_I2C_IF_DIS	./drivers/accgyro_spi_mpu6000.c	103;"	d	file:
BIT_INT_ANYRD_2CLEAR	./drivers/accgyro_spi_mpu6000.c	101;"	d	file:
BIT_INT_STATUS_DATA	./drivers/accgyro_spi_mpu6000.c	104;"	d	file:
BIT_RAW_RDY_EN	./drivers/accgyro_spi_mpu6000.c	102;"	d	file:
BIT_SLEEP	./drivers/accgyro_spi_mpu6000.c	77;"	d	file:
BIT_STATUS1_REG_DATA_READY	./drivers/compass_ak8975.c	109;"	d	file:
BIT_STATUS2_REG_DATA_ERROR	./drivers/compass_ak8975.c	111;"	d	file:
BIT_STATUS2_REG_MAG_SENSOR_OVERFLOW	./drivers/compass_ak8975.c	112;"	d	file:
BIT_TEMP	./drivers/accgyro_spi_mpu6000.c	107;"	d	file:
BLACKBOX	./target/CC3D/target.h	111;"	d
BLACKBOX	./target/CHEBUZZF3/target.h	121;"	d
BLACKBOX	./target/CJMCU/target.h	74;"	d
BLACKBOX	./target/EUSTM32F103RC/target.h	123;"	d
BLACKBOX	./target/NAZE/target.h	171;"	d
BLACKBOX	./target/NAZE32PRO/target.h	44;"	d
BLACKBOX	./target/OLIMEXINO/target.h	113;"	d
BLACKBOX	./target/PORT103R/target.h	134;"	d
BLACKBOX	./target/SPARKY/target.h	111;"	d
BLACKBOX	./target/SPRACINGF3/target.h	160;"	d
BLACKBOX	./target/STM32F3DISCOVERY/target.h	92;"	d
BLACKBOX	./target/SUPERBEE/target.h	184;"	d
BLACKBOX_CONDITIONAL_FIELD_HEADER_COUNT	./blackbox/blackbox.c	125;"	d	file:
BLACKBOX_DELTA_FIELD_HEADER_COUNT	./blackbox/blackbox.c	123;"	d	file:
BLACKBOX_DEVICE_END	./blackbox/blackbox_io.h	/^    BLACKBOX_DEVICE_END$/;"	e	enum:BlackboxDevice
BLACKBOX_DEVICE_FLASH	./blackbox/blackbox_io.h	/^    BLACKBOX_DEVICE_FLASH,$/;"	e	enum:BlackboxDevice
BLACKBOX_DEVICE_SERIAL	./blackbox/blackbox_io.h	/^    BLACKBOX_DEVICE_SERIAL = 0,$/;"	e	enum:BlackboxDevice
BLACKBOX_I_INTERVAL	./blackbox/blackbox.c	82;"	d	file:
BLACKBOX_SERIAL_PORT_MODE	./blackbox/blackbox_io.c	65;"	d	file:
BLACKBOX_SHUTDOWN_TIMEOUT_MILLIS	./blackbox/blackbox.c	83;"	d	file:
BLACKBOX_SIMPLE_FIELD_HEADER_COUNT	./blackbox/blackbox.c	124;"	d	file:
BLACKBOX_STATE_DISABLED	./blackbox/blackbox.c	/^    BLACKBOX_STATE_DISABLED = 0,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_RUNNING	./blackbox/blackbox.c	/^    BLACKBOX_STATE_RUNNING,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_GPS_G_HEADER	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_GPS_G_HEADER,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_GPS_H_HEADER	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_GPS_H_HEADER,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_HEADER	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_HEADER,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_SLOW_HEADER	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_SLOW_HEADER,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SEND_SYSINFO	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SEND_SYSINFO,$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_SHUTTING_DOWN	./blackbox/blackbox.c	/^    BLACKBOX_STATE_SHUTTING_DOWN$/;"	e	enum:BlackboxState	file:
BLACKBOX_STATE_STOPPED	./blackbox/blackbox.c	/^    BLACKBOX_STATE_STOPPED,$/;"	e	enum:BlackboxState	file:
BLADE_NUMBER_DIVIDER	./telemetry/frsky.c	126;"	d	file:
BLE_MSB	./drivers/accgyro_l3gd20.c	65;"	d	file:
BLOCK_DATA_UPDATE_CONTINUOUS	./drivers/accgyro_l3gd20.c	63;"	d	file:
BMA280_ACC_X_LSB	./drivers/accgyro_bma280.c	31;"	d	file:
BMA280_ADDRESS	./drivers/accgyro_bma280.c	30;"	d	file:
BMA280_PMU_BW	./drivers/accgyro_bma280.c	32;"	d	file:
BMA280_PMU_RANGE	./drivers/accgyro_bma280.c	33;"	d	file:
BMP085_ADC_OUT_LSB_REG	./drivers/barometer_bmp085.c	86;"	d	file:
BMP085_ADC_OUT_MSB_REG	./drivers/barometer_bmp085.c	85;"	d	file:
BMP085_AL_VERSION__LEN	./drivers/barometer_bmp085.c	98;"	d	file:
BMP085_AL_VERSION__MSK	./drivers/barometer_bmp085.c	99;"	d	file:
BMP085_AL_VERSION__POS	./drivers/barometer_bmp085.c	97;"	d	file:
BMP085_AL_VERSION__REG	./drivers/barometer_bmp085.c	100;"	d	file:
BMP085_CHIP_ID	./drivers/barometer_bmp085.c	75;"	d	file:
BMP085_CHIP_ID_REG	./drivers/barometer_bmp085.c	77;"	d	file:
BMP085_CHIP_ID__LEN	./drivers/barometer_bmp085.c	89;"	d	file:
BMP085_CHIP_ID__MSK	./drivers/barometer_bmp085.c	88;"	d	file:
BMP085_CHIP_ID__POS	./drivers/barometer_bmp085.c	87;"	d	file:
BMP085_CHIP_ID__REG	./drivers/barometer_bmp085.c	90;"	d	file:
BMP085_CTRL_MEAS_REG	./drivers/barometer_bmp085.c	84;"	d	file:
BMP085_EOC_EXTI_Handler	./drivers/barometer_bmp085.c	/^void BMP085_EOC_EXTI_Handler(void) {$/;"	f
BMP085_GET_BITSLICE	./drivers/barometer_bmp085.c	102;"	d	file:
BMP085_I2C_ADDR	./drivers/barometer_bmp085.c	74;"	d	file:
BMP085_ML_VERSION__LEN	./drivers/barometer_bmp085.c	93;"	d	file:
BMP085_ML_VERSION__MSK	./drivers/barometer_bmp085.c	94;"	d	file:
BMP085_ML_VERSION__POS	./drivers/barometer_bmp085.c	92;"	d	file:
BMP085_ML_VERSION__REG	./drivers/barometer_bmp085.c	95;"	d	file:
BMP085_OFF	./drivers/barometer_bmp085.c	124;"	d	file:
BMP085_OFF	./drivers/barometer_bmp085.c	127;"	d	file:
BMP085_ON	./drivers/barometer_bmp085.c	125;"	d	file:
BMP085_ON	./drivers/barometer_bmp085.c	128;"	d	file:
BMP085_PROM_DATA__LEN	./drivers/barometer_bmp085.c	81;"	d	file:
BMP085_PROM_START__ADDR	./drivers/barometer_bmp085.c	80;"	d	file:
BMP085_P_MEASURE	./drivers/barometer_bmp085.c	83;"	d	file:
BMP085_SET_BITSLICE	./drivers/barometer_bmp085.c	103;"	d	file:
BMP085_T_MEASURE	./drivers/barometer_bmp085.c	82;"	d	file:
BMP085_VERSION_REG	./drivers/barometer_bmp085.c	78;"	d	file:
BOARD_HARDWARE_REVISION_LENGTH	./io/serial_msp.c	151;"	d	file:
BOARD_HAS_VOLTAGE_DIVIDER	./target/NAZE/target.h	187;"	d
BOARD_HAS_VOLTAGE_DIVIDER	./target/NAZE/target.h	23;"	d
BOARD_HAS_VOLTAGE_DIVIDER	./target/SPRACINGF3/target.h	126;"	d
BOARD_HAS_VOLTAGE_DIVIDER	./target/SUPERBEE/target.h	200;"	d
BOARD_HAS_VOLTAGE_DIVIDER	./target/SUPERBEE/target.h	23;"	d
BOARD_IDENTIFIER_LENGTH	./io/serial_msp.c	150;"	d	file:
BOOT	./drivers/accgyro_l3gd20.c	67;"	d	file:
BOOT	./drivers/accgyro_lsm303dlhc.c	87;"	d	file:
BOSCH_PRESSURE_BMP085	./drivers/barometer_bmp085.c	76;"	d	file:
BOXANGLE	./io/rc_controls.h	/^    BOXANGLE,$/;"	e	enum:__anon94
BOXARM	./io/rc_controls.h	/^    BOXARM = 0,$/;"	e	enum:__anon94
BOXAUTOTUNE	./io/rc_controls.h	/^    BOXAUTOTUNE,$/;"	e	enum:__anon94
BOXBARO	./io/rc_controls.h	/^    BOXBARO,$/;"	e	enum:__anon94
BOXBEEPERON	./io/rc_controls.h	/^    BOXBEEPERON,$/;"	e	enum:__anon94
BOXCALIB	./io/rc_controls.h	/^    BOXCALIB,$/;"	e	enum:__anon94
BOXCAMSTAB	./io/rc_controls.h	/^    BOXCAMSTAB,$/;"	e	enum:__anon94
BOXCAMTRIG	./io/rc_controls.h	/^    BOXCAMTRIG,$/;"	e	enum:__anon94
BOXGOV	./io/rc_controls.h	/^    BOXGOV,$/;"	e	enum:__anon94
BOXGPSHOLD	./io/rc_controls.h	/^    BOXGPSHOLD,$/;"	e	enum:__anon94
BOXGPSHOME	./io/rc_controls.h	/^    BOXGPSHOME,$/;"	e	enum:__anon94
BOXHEADADJ	./io/rc_controls.h	/^    BOXHEADADJ,$/;"	e	enum:__anon94
BOXHEADFREE	./io/rc_controls.h	/^    BOXHEADFREE,$/;"	e	enum:__anon94
BOXHORIZON	./io/rc_controls.h	/^    BOXHORIZON,$/;"	e	enum:__anon94
BOXLEDLOW	./io/rc_controls.h	/^    BOXLEDLOW,$/;"	e	enum:__anon94
BOXLEDMAX	./io/rc_controls.h	/^    BOXLEDMAX,$/;"	e	enum:__anon94
BOXLLIGHTS	./io/rc_controls.h	/^    BOXLLIGHTS,$/;"	e	enum:__anon94
BOXMAG	./io/rc_controls.h	/^    BOXMAG,$/;"	e	enum:__anon94
BOXMOCAP	./io/rc_controls.h	/^    BOXMOCAP,$/;"	e	enum:__anon94
BOXOSD	./io/rc_controls.h	/^    BOXOSD,$/;"	e	enum:__anon94
BOXPASSTHRU	./io/rc_controls.h	/^    BOXPASSTHRU,$/;"	e	enum:__anon94
BOXSONAR	./io/rc_controls.h	/^    BOXSONAR,$/;"	e	enum:__anon94
BOXTELEMETRY	./io/rc_controls.h	/^    BOXTELEMETRY,$/;"	e	enum:__anon94
BRUSHED_MOTORS	./target/CJMCU/target.h	46;"	d
BRUSHED_MOTORS_PWM_RATE	./config/config.c	73;"	d	file:
BRUSHLESS_MOTORS_PWM_RATE	./config/config.c	74;"	d	file:
BR_CLEAR_MASK	./drivers/bus_spi.c	332;"	d	file:
BTABLE_ADDRESS	./vcp/usb_conf.h	51;"	d
BUILD_BUG_ON	./build_config.h	21;"	d
BUILD_DATE_LENGTH	./version.h	33;"	d
BUILD_TIME_LENGTH	./version.h	36;"	d
BULK_ERASE_TIMEOUT_MILLIS	./drivers/flash_m25p16.c	56;"	d	file:
BULK_MAX_PACKET_SIZE	./vcp/hw_config.h	48;"	d
BX_	./common/utils.h	34;"	d
BaroAlt	./blackbox/blackbox.c	/^    int32_t BaroAlt;$/;"	m	struct:blackboxMainState_t	file:
BaroAlt	./sensors/barometer.c	/^int32_t BaroAlt = 0;$/;"	v
BlackboxDevice	./blackbox/blackbox_io.h	/^typedef enum BlackboxDevice {$/;"	g
BlackboxDevice	./blackbox/blackbox_io.h	/^} BlackboxDevice;$/;"	t	typeref:enum:BlackboxDevice
BlackboxState	./blackbox/blackbox.c	/^typedef enum BlackboxState {$/;"	g	file:
BlackboxState	./blackbox/blackbox.c	/^} BlackboxState;$/;"	t	typeref:enum:BlackboxState	file:
BlockData_Update	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t BlockData_Update;                   \/* Block Data Update *\/$/;"	m	struct:__anon53
BusFault_Handler	./vcp/stm32_it.c	/^void BusFault_Handler(void)$/;"	f
CALCULATE_ALTITUDE_TASK	./mw.c	/^    CALCULATE_ALTITUDE_TASK,$/;"	e	enum:__anon24	file:
CALCULATE_LED_X	./io/ledstrip.h	31;"	d
CALCULATE_LED_XY	./io/ledstrip.h	35;"	d
CALCULATE_LED_Y	./io/ledstrip.h	32;"	d
CALIBRATE_MAG	./config/runtime_config.h	/^    CALIBRATE_MAG  = (1 << 2),$/;"	e	enum:__anon20
CALIBRATING_ACC_CYCLES	./sensors/sensors.h	43;"	d
CALIBRATING_BARO_CYCLES	./sensors/sensors.h	44;"	d
CALIBRATING_GYRO_CYCLES	./sensors/sensors.h	42;"	d
CAP_BASEFLIGHT_CONFIG	./io/serial_msp.c	155;"	d	file:
CAP_DYNBALANCE	./io/serial_msp.c	163;"	d	file:
CAP_EXTAUX	./io/serial_msp.c	166;"	d	file:
CAP_FLAPS	./io/serial_msp.c	164;"	d	file:
CAP_NAVCAP	./io/serial_msp.c	165;"	d	file:
CAP_NAVI_VERSION_BIT_1_LSB	./io/serial_msp.c	161;"	d	file:
CAP_NAVI_VERSION_BIT_2	./io/serial_msp.c	160;"	d	file:
CAP_NAVI_VERSION_BIT_3	./io/serial_msp.c	159;"	d	file:
CAP_NAVI_VERSION_BIT_4_MSB	./io/serial_msp.c	158;"	d	file:
CAP_PLATFORM_32BIT	./io/serial_msp.c	154;"	d	file:
CCMR_OC13M_MASK	./drivers/timer_stm32f30x.c	40;"	d	file:
CCMR_OC24M_MASK	./drivers/timer_stm32f30x.c	41;"	d	file:
CCMR_OFFSET	./drivers/timer_stm32f30x.c	39;"	d	file:
CCMR_Offset	./drivers/timer_stm32f10x.c	33;"	d	file:
CC_CHANNELS_PER_TIMER	./drivers/timer.c	256;"	d	file:
CDC_Receive_DATA	./vcp/hw_config.c	/^uint32_t CDC_Receive_DATA(uint8_t* recvBuf, uint32_t len)$/;"	f
CDC_Send_DATA	./vcp/hw_config.c	/^uint32_t CDC_Send_DATA(uint8_t *ptrBuffer, uint8_t sendLength)$/;"	f
CHANNEL_FORWARDING_DISABLED	./flight/mixer.h	92;"	d
CHANNEL_RANGE_MAX	./io/rc_controls.h	91;"	d
CHANNEL_RANGE_MIN	./io/rc_controls.h	90;"	d
CHANNEL_VALUE_TO_STEP	./io/rc_controls.h	94;"	d
CHARACTER_HEIGHT_TOTAL	./drivers/display_ug2864hsweg01.h	29;"	d
CHARACTER_WIDTH_TOTAL	./drivers/display_ug2864hsweg01.h	28;"	d
CHAR_FORMAT	./drivers/display_ug2864hsweg01.c	/^unsigned char CHAR_FORMAT = NORMAL_CHAR_FORMAT;$/;"	v
CHECKBOX_ITEM_COUNT	./io/rc_controls.h	/^    CHECKBOX_ITEM_COUNT$/;"	e	enum:__anon94
CHUNK_BUFFER_SIZE	./io/ledstrip.c	408;"	d	file:
CLASS_ACK	./io/gps.c	/^    CLASS_ACK = 0x05,$/;"	e	enum:__anon90	file:
CLASS_CFG	./io/gps.c	/^    CLASS_CFG = 0x06,$/;"	e	enum:__anon90	file:
CLASS_NAV	./io/gps.c	/^    CLASS_NAV = 0x01,$/;"	e	enum:__anon90	file:
CLEANFLIGHT_IDENTIFIER	./io/serial_msp.c	140;"	d	file:
CLEAR_COMM_FEATURE	./vcp/usb_prop.h	59;"	d
CLI_H_	./io/serial_cli.h	19;"	d
CMD_ADC_1024	./drivers/barometer_ms5611.c	41;"	d	file:
CMD_ADC_2048	./drivers/barometer_ms5611.c	42;"	d	file:
CMD_ADC_256	./drivers/barometer_ms5611.c	39;"	d	file:
CMD_ADC_4096	./drivers/barometer_ms5611.c	43;"	d	file:
CMD_ADC_512	./drivers/barometer_ms5611.c	40;"	d	file:
CMD_ADC_CONV	./drivers/barometer_ms5611.c	36;"	d	file:
CMD_ADC_D1	./drivers/barometer_ms5611.c	37;"	d	file:
CMD_ADC_D2	./drivers/barometer_ms5611.c	38;"	d	file:
CMD_ADC_READ	./drivers/barometer_ms5611.c	35;"	d	file:
CMD_COUNT	./io/serial_cli.c	232;"	d	file:
CMD_PROM_RD	./drivers/barometer_ms5611.c	44;"	d	file:
CMD_RESET	./drivers/barometer_ms5611.c	34;"	d	file:
COLOR_BLACK	./io/ledstrip.c	/^    COLOR_BLACK = 0,$/;"	e	enum:__anon75	file:
COLOR_BLUE	./io/ledstrip.c	/^    COLOR_BLUE,$/;"	e	enum:__anon75	file:
COLOR_CYAN	./io/ledstrip.c	/^    COLOR_CYAN,$/;"	e	enum:__anon75	file:
COLOR_DARK_VIOLET	./io/ledstrip.c	/^    COLOR_DARK_VIOLET,$/;"	e	enum:__anon75	file:
COLOR_DEEP_PINK	./io/ledstrip.c	/^    COLOR_DEEP_PINK,$/;"	e	enum:__anon75	file:
COLOR_GREEN	./io/ledstrip.c	/^    COLOR_GREEN,$/;"	e	enum:__anon75	file:
COLOR_LIGHT_BLUE	./io/ledstrip.c	/^    COLOR_LIGHT_BLUE,$/;"	e	enum:__anon75	file:
COLOR_LIME_GREEN	./io/ledstrip.c	/^    COLOR_LIME_GREEN,$/;"	e	enum:__anon75	file:
COLOR_MAGENTA	./io/ledstrip.c	/^    COLOR_MAGENTA,$/;"	e	enum:__anon75	file:
COLOR_MINT_GREEN	./io/ledstrip.c	/^    COLOR_MINT_GREEN,$/;"	e	enum:__anon75	file:
COLOR_ORANGE	./io/ledstrip.c	/^    COLOR_ORANGE,$/;"	e	enum:__anon75	file:
COLOR_RED	./io/ledstrip.c	/^    COLOR_RED,$/;"	e	enum:__anon75	file:
COLOR_WHITE	./io/ledstrip.c	/^    COLOR_WHITE,$/;"	e	enum:__anon75	file:
COLOR_YELLOW	./io/ledstrip.c	/^    COLOR_YELLOW,$/;"	e	enum:__anon75	file:
COMMAND_RECEIVED	./io/serial_msp.c	/^    COMMAND_RECEIVED,$/;"	e	enum:__anon73	file:
COMPASS_UPDATE_FREQUENCY_10HZ	./sensors/compass.c	60;"	d	file:
CONCAT	./common/utils.h	25;"	d
CONCAT_HELPER	./common/utils.h	24;"	d
CONDITION	./blackbox/blackbox.c	95;"	d	file:
CONFIGURABLE_COLOR_COUNT	./io/ledstrip.h	21;"	d
CONFIGURED	./vcp/usb_pwr.h	/^    CONFIGURED$/;"	e	enum:_DEVICE_STATE
CONFIG_START_FLASH_ADDRESS	./config/config.c	122;"	d	file:
CONTINUOUS_CONVERSION	./drivers/accgyro_lsm303dlhc.c	102;"	d	file:
CONTROL_RATE_CONFIG_ROLL_PITCH_RATE_MAX	./io/rc_controls.h	100;"	d
CONTROL_RATE_CONFIG_TPA_MAX	./io/rc_controls.h	105;"	d
CONTROL_RATE_CONFIG_YAW_RATE_MAX	./io/rc_controls.h	103;"	d
CONTROL_RATE_VALUE	./io/serial_cli.c	/^    CONTROL_RATE_VALUE = (1 << 8)$/;"	e	enum:__anon99	file:
CRA_REG_M	./drivers/accgyro_lsm303dlhc.c	72;"	d	file:
CRB_REG_M	./drivers/accgyro_lsm303dlhc.c	73;"	d	file:
CROSSTRACK_GAIN	./flight/navigation.c	189;"	d	file:
CTRL_REG1_A	./drivers/accgyro_lsm303dlhc.c	68;"	d	file:
CTRL_REG1_ADDR	./drivers/accgyro_l3gd20.c	39;"	d	file:
CTRL_REG4_A	./drivers/accgyro_lsm303dlhc.c	69;"	d	file:
CTRL_REG4_ADDR	./drivers/accgyro_l3gd20.c	40;"	d	file:
CTRL_REG5_A	./drivers/accgyro_lsm303dlhc.c	70;"	d	file:
CTRL_REG5_ADDR	./drivers/accgyro_l3gd20.c	41;"	d	file:
CURRENT_METER_ADC_CHANNEL	./target/CC3D/target.h	97;"	d
CURRENT_METER_ADC_CHANNEL	./target/CHEBUZZF3/target.h	91;"	d
CURRENT_METER_ADC_CHANNEL	./target/EUSTM32F103RC/target.h	105;"	d
CURRENT_METER_ADC_CHANNEL	./target/NAZE/target.h	152;"	d
CURRENT_METER_ADC_CHANNEL	./target/OLIMEXINO/target.h	92;"	d
CURRENT_METER_ADC_CHANNEL	./target/PORT103R/target.h	115;"	d
CURRENT_METER_ADC_CHANNEL	./target/SPARKY/target.h	108;"	d
CURRENT_METER_ADC_CHANNEL	./target/SPRACINGF3/target.h	139;"	d
CURRENT_METER_ADC_CHANNEL	./target/STM32F3DISCOVERY/target.h	82;"	d
CURRENT_METER_ADC_CHANNEL	./target/SUPERBEE/target.h	165;"	d
CURRENT_METER_ADC_GPIO	./target/CC3D/target.h	95;"	d
CURRENT_METER_ADC_GPIO	./target/CHEBUZZF3/target.h	89;"	d
CURRENT_METER_ADC_GPIO	./target/EUSTM32F103RC/target.h	103;"	d
CURRENT_METER_ADC_GPIO	./target/NAZE/target.h	150;"	d
CURRENT_METER_ADC_GPIO	./target/OLIMEXINO/target.h	90;"	d
CURRENT_METER_ADC_GPIO	./target/PORT103R/target.h	113;"	d
CURRENT_METER_ADC_GPIO	./target/SPARKY/target.h	106;"	d
CURRENT_METER_ADC_GPIO	./target/SPRACINGF3/target.h	137;"	d
CURRENT_METER_ADC_GPIO	./target/STM32F3DISCOVERY/target.h	80;"	d
CURRENT_METER_ADC_GPIO	./target/SUPERBEE/target.h	163;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/CC3D/target.h	96;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/CHEBUZZF3/target.h	90;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/EUSTM32F103RC/target.h	104;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/NAZE/target.h	151;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/OLIMEXINO/target.h	91;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/PORT103R/target.h	114;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/SPARKY/target.h	107;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/SPRACINGF3/target.h	138;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/STM32F3DISCOVERY/target.h	81;"	d
CURRENT_METER_ADC_GPIO_PIN	./target/SUPERBEE/target.h	164;"	d
CURRENT_SENSOR_ADC	./sensors/battery.h	/^    CURRENT_SENSOR_ADC,$/;"	e	enum:__anon116
CURRENT_SENSOR_MAX	./sensors/battery.h	/^    CURRENT_SENSOR_MAX = CURRENT_SENSOR_VIRTUAL$/;"	e	enum:__anon116
CURRENT_SENSOR_NONE	./sensors/battery.h	/^    CURRENT_SENSOR_NONE = 0,$/;"	e	enum:__anon116
CURRENT_SENSOR_VIRTUAL	./sensors/battery.h	/^    CURRENT_SENSOR_VIRTUAL,$/;"	e	enum:__anon116
CW0_DEG	./sensors/sensors.h	/^    CW0_DEG = 1,$/;"	e	enum:__anon122
CW0_DEG_FLIP	./sensors/sensors.h	/^    CW0_DEG_FLIP = 5,$/;"	e	enum:__anon122
CW180_DEG	./sensors/sensors.h	/^    CW180_DEG = 3,$/;"	e	enum:__anon122
CW180_DEG_FLIP	./sensors/sensors.h	/^    CW180_DEG_FLIP = 7,$/;"	e	enum:__anon122
CW270_DEG	./sensors/sensors.h	/^    CW270_DEG = 4,$/;"	e	enum:__anon122
CW270_DEG_FLIP	./sensors/sensors.h	/^    CW270_DEG_FLIP = 8$/;"	e	enum:__anon122
CW90_DEG	./sensors/sensors.h	/^    CW90_DEG = 2,$/;"	e	enum:__anon122
CW90_DEG_FLIP	./sensors/sensors.h	/^    CW90_DEG_FLIP = 6,$/;"	e	enum:__anon122
CYCLETIME	./telemetry/frsky.c	79;"	d	file:
CYCLE_PAGE_ID_COUNT	./io/display.c	116;"	d	file:
CYCLE_TUNE_I	./flight/autotune.c	/^    CYCLE_TUNE_I = 0,$/;"	e	enum:__anon11	file:
CYCLE_TUNE_PD	./flight/autotune.c	/^    CYCLE_TUNE_PD,$/;"	e	enum:__anon11	file:
CYCLE_TUNE_PD2	./flight/autotune.c	/^    CYCLE_TUNE_PD2$/;"	e	enum:__anon11	file:
Config_Descriptor	./vcp/usb_prop.c	/^ONE_DESCRIPTOR Config_Descriptor = { (uint8_t*)Virtual_Com_Port_ConfigDescriptor,$/;"	v
CopyDataInit	./startup/startup_stm32f10x_hd_gcc.S	/^CopyDataInit:$/;"	l
CopyDataInit	./startup/startup_stm32f10x_md_gcc.S	/^CopyDataInit:$/;"	l
CopyDataInit	./startup/startup_stm32f30x_md_gcc.S	/^CopyDataInit:$/;"	l
D8	./flight/pid.h	/^    uint8_t D8[PID_ITEM_COUNT];$/;"	m	struct:pidProfile_s
DBGAFR_LOCATION_MASK	./drivers/gpio_stm32f10x.c	69;"	d	file:
DBGAFR_NUMBITS_MASK	./drivers/gpio_stm32f10x.c	70;"	d	file:
DBGAFR_POSITION_MASK	./drivers/gpio_stm32f10x.c	67;"	d	file:
DBGAFR_SWJCFG_MASK	./drivers/gpio_stm32f10x.c	68;"	d	file:
DEBUG16_VALUE_COUNT	./debug.h	18;"	d
DEBUG_SECTION_TIMES	./debug.h	21;"	d
DECIDEGREES_TO_DEGREES	./flight/pid.h	71;"	d
DEFAULT_BAUD_RATE_INDEX	./io/gps.c	121;"	d	file:
DEFAULT_SERVO_MAX	./rx/rx.h	32;"	d
DEFAULT_SERVO_MAX_ANGLE	./rx/rx.h	34;"	d
DEFAULT_SERVO_MIDDLE	./rx/rx.h	31;"	d
DEFAULT_SERVO_MIN	./rx/rx.h	30;"	d
DEFAULT_SERVO_MIN_ANGLE	./rx/rx.h	33;"	d
DEFAULT_TIMEOUT_MILLIS	./drivers/flash_m25p16.c	52;"	d	file:
DEGREES_80_IN_DECIDEGREES	./flight/altitudehold.c	85;"	d	file:
DEGREES_TO_DECIDEGREES	./flight/pid.h	70;"	d
DELAY_10_HZ	./rx/rx.c	79;"	d	file:
DELAY_50_HZ	./rx/rx.c	78;"	d	file:
DELAY_FOR_BARO_INITIALISATION	./telemetry/frsky.c	125;"	d	file:
DEVICE_STATE	./vcp/usb_pwr.h	/^} DEVICE_STATE;$/;"	t	typeref:enum:_DEVICE_STATE
DIGIT_TO_VAL	./flight/gps_conversion.c	28;"	d	file:
DIRECTIONS	./io/ledstrip.c	/^    DIRECTIONS,$/;"	e	enum:__anon77	file:
DIRECTION_COUNT	./io/ledstrip.c	317;"	d	file:
DIRECTION_DOWN	./io/ledstrip.c	/^    DIRECTION_DOWN$/;"	e	enum:__anon76	file:
DIRECTION_EAST	./io/ledstrip.c	/^    DIRECTION_EAST,$/;"	e	enum:__anon76	file:
DIRECTION_NORTH	./io/ledstrip.c	/^    DIRECTION_NORTH = 0,$/;"	e	enum:__anon76	file:
DIRECTION_SOUTH	./io/ledstrip.c	/^    DIRECTION_SOUTH,$/;"	e	enum:__anon76	file:
DIRECTION_UP	./io/ledstrip.c	/^    DIRECTION_UP,$/;"	e	enum:__anon76	file:
DIRECTION_WEST	./io/ledstrip.c	/^    DIRECTION_WEST,$/;"	e	enum:__anon76	file:
DISABLE_ARMING_FLAG	./config/runtime_config.h	29;"	d
DISABLE_FLIGHT_MODE	./config/runtime_config.h	49;"	d
DISABLE_M25P16	./drivers/flash_m25p16.c	48;"	d	file:
DISABLE_MPU6000	./drivers/accgyro_spi_mpu6000.c	125;"	d	file:
DISABLE_MPU6500	./drivers/accgyro_spi_mpu6500.c	69;"	d	file:
DISABLE_SPI_CS	./target/NAZE/hardware_revision.c	53;"	d	file:
DISABLE_SPI_CS	./target/SUPERBEE/hardware_revision.c	53;"	d	file:
DISABLE_STATE	./config/runtime_config.h	61;"	d
DISPLAY	./target/CC3D/target.h	68;"	d
DISPLAY	./target/EUSTM32F103RC/target.h	78;"	d
DISPLAY	./target/NAZE/target.h	118;"	d
DISPLAY	./target/PORT103R/target.h	89;"	d
DISPLAY	./target/SPARKY/target.h	115;"	d
DISPLAY	./target/SPRACINGF3/target.h	164;"	d
DISPLAY	./target/SUPERBEE/target.h	131;"	d
DISPLAY_UPDATE_FREQUENCY	./io/display.c	71;"	d	file:
DISTANCE_BETWEEN_TWO_LONGITUDE_POINTS_AT_EQUATOR_IN_HUNDREDS_OF_KILOMETERS	./flight/navigation.c	447;"	d	file:
DMA1_Channel2_IRQHandler	./drivers/light_ws2811strip_stm32f30x.c	/^void DMA1_Channel2_IRQHandler(void)$/;"	f
DMA1_Channel2_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void DMA1_Channel2_IRQHandler(void)$/;"	f
DMA1_Channel3_IRQHandler	./drivers/light_ws2811strip_stm32f30x.c	/^void DMA1_Channel3_IRQHandler(void)$/;"	f
DMA1_Channel4_IRQHandler	./drivers/serial_uart_stm32f10x.c	/^void DMA1_Channel4_IRQHandler(void)$/;"	f
DMA1_Channel4_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void DMA1_Channel4_IRQHandler(void)$/;"	f
DMA1_Channel6_IRQHandler	./drivers/light_ws2811strip_stm32f10x.c	/^void DMA1_Channel6_IRQHandler(void)$/;"	f
DMA1_Channel7_IRQHandler	./drivers/light_ws2811strip_stm32f30x.c	/^void DMA1_Channel7_IRQHandler(void)$/;"	f
DMA1_Channel7_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void DMA1_Channel7_IRQHandler(void)$/;"	f
DMP_MEM_R_W	./drivers/accgyro_mpu6050.c	45;"	d	file:
DMP_MEM_START_ADDR	./drivers/accgyro_mpu6050.c	44;"	d	file:
DTermState	./flight/pid.c	/^static filterStatePt1_t PTermState[3], DTermState[3];$/;"	v	file:
DUMMY_BYTE	./drivers/accgyro_l3gd20.c	37;"	d	file:
DUMP_ALL	./io/serial_cli.c	1053;"	d	file:
DUMP_CONTROL_RATE_PROFILE	./io/serial_cli.c	/^    DUMP_CONTROL_RATE_PROFILE = (1 << 2)$/;"	e	enum:__anon102	file:
DUMP_MASTER	./io/serial_cli.c	/^    DUMP_MASTER = (1 << 0),$/;"	e	enum:__anon102	file:
DUMP_PROFILE	./io/serial_cli.c	/^    DUMP_PROFILE = (1 << 1),$/;"	e	enum:__anon102	file:
D_f	./flight/pid.h	/^    float D_f[3];$/;"	m	struct:pidProfile_s
DebugMon_Handler	./vcp/stm32_it.c	/^void DebugMon_Handler(void)$/;"	f
Default_Handler	./startup/startup_stm32f10x_hd_gcc.S	/^Default_Handler:$/;"	l
Default_Handler	./startup/startup_stm32f10x_md_gcc.S	/^Default_Handler:$/;"	l
Default_Handler	./startup/startup_stm32f30x_md_gcc.S	/^Default_Handler:$/;"	l
Device_Descriptor	./vcp/usb_prop.c	/^ONE_DESCRIPTOR Device_Descriptor = { (uint8_t*)Virtual_Com_Port_DeviceDescriptor,$/;"	v
Device_Property	./vcp/usb_prop.c	/^DEVICE_PROP Device_Property = { Virtual_Com_Port_init, Virtual_Com_Port_Reset, Virtual_Com_Port_Status_In, Virtual_Com_Port_Status_Out, Virtual_Com_Port_Data_Setup, Virtual_Com_Port_NoData_Setup, Virtual_Com_Port_Get_Interface_Setting, Virtual_Com_Port_GetDeviceDescriptor,$/;"	v
Device_Table	./vcp/usb_prop.c	/^DEVICE Device_Table = {$/;"	v
ECHO_EXTI_IRQHandler	./drivers/sonar_hcsr04.c	/^static void ECHO_EXTI_IRQHandler(void)$/;"	f	file:
EEPROM_CONF_VERSION	./config/config.c	/^static const uint8_t EEPROM_CONF_VERSION = 103;$/;"	v	file:
ENABLE_ARMING_FLAG	./config/runtime_config.h	30;"	d
ENABLE_FLIGHT_MODE	./config/runtime_config.h	50;"	d
ENABLE_M25P16	./drivers/flash_m25p16.c	49;"	d	file:
ENABLE_MPU6000	./drivers/accgyro_spi_mpu6000.c	126;"	d	file:
ENABLE_MPU6500	./drivers/accgyro_spi_mpu6500.c	70;"	d	file:
ENABLE_SPI_CS	./target/NAZE/hardware_revision.c	54;"	d	file:
ENABLE_SPI_CS	./target/SUPERBEE/hardware_revision.c	54;"	d	file:
ENABLE_STATE	./config/runtime_config.h	62;"	d
ENCODING	./blackbox/blackbox.c	94;"	d	file:
ENDP0_RXADDR	./vcp/usb_conf.h	55;"	d
ENDP0_TXADDR	./vcp/usb_conf.h	56;"	d
ENDP1_TXADDR	./vcp/usb_conf.h	60;"	d
ENDP2_TXADDR	./vcp/usb_conf.h	61;"	d
ENDP3_RXADDR	./vcp/usb_conf.h	62;"	d
ENSURE_MAG_DATA_READY_IS_HIGH	./target/SPRACINGF3/target.h	39;"	d
ENSURE_MPU_DATA_READY_IS_LOW	./target/SPRACINGF3/target.h	36;"	d
EP	./vcp/usb_pwr.c	/^__IO uint32_t EP[8];$/;"	v
EP1_IN_Callback	./vcp/usb_endp.c	/^void EP1_IN_Callback(void)$/;"	f
EP1_OUT_Callback	./vcp/usb_conf.h	92;"	d
EP2_IN_Callback	./vcp/usb_conf.h	85;"	d
EP2_OUT_Callback	./vcp/usb_conf.h	93;"	d
EP3_IN_Callback	./vcp/usb_conf.h	86;"	d
EP3_OUT_Callback	./vcp/usb_endp.c	/^void EP3_OUT_Callback(void)$/;"	f
EP4_IN_Callback	./vcp/usb_conf.h	87;"	d
EP4_OUT_Callback	./vcp/usb_conf.h	95;"	d
EP5_IN_Callback	./vcp/usb_conf.h	88;"	d
EP5_OUT_Callback	./vcp/usb_conf.h	96;"	d
EP6_IN_Callback	./vcp/usb_conf.h	89;"	d
EP6_OUT_Callback	./vcp/usb_conf.h	97;"	d
EP7_IN_Callback	./vcp/usb_conf.h	90;"	d
EP7_OUT_Callback	./vcp/usb_conf.h	98;"	d
EP_NUM	./vcp/usb_conf.h	44;"	d
EXTERNAL1_ADC_CHANNEL	./target/CHEBUZZF3/target.h	99;"	d
EXTERNAL1_ADC_CHANNEL	./target/EUSTM32F103RC/target.h	117;"	d
EXTERNAL1_ADC_CHANNEL	./target/NAZE/target.h	164;"	d
EXTERNAL1_ADC_CHANNEL	./target/OLIMEXINO/target.h	104;"	d
EXTERNAL1_ADC_CHANNEL	./target/PORT103R/target.h	127;"	d
EXTERNAL1_ADC_CHANNEL	./target/STM32F3DISCOVERY/target.h	90;"	d
EXTERNAL1_ADC_CHANNEL	./target/SUPERBEE/target.h	177;"	d
EXTERNAL1_ADC_GPIO	./target/CHEBUZZF3/target.h	97;"	d
EXTERNAL1_ADC_GPIO	./target/EUSTM32F103RC/target.h	115;"	d
EXTERNAL1_ADC_GPIO	./target/NAZE/target.h	162;"	d
EXTERNAL1_ADC_GPIO	./target/OLIMEXINO/target.h	102;"	d
EXTERNAL1_ADC_GPIO	./target/PORT103R/target.h	125;"	d
EXTERNAL1_ADC_GPIO	./target/STM32F3DISCOVERY/target.h	88;"	d
EXTERNAL1_ADC_GPIO	./target/SUPERBEE/target.h	175;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/CHEBUZZF3/target.h	98;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/EUSTM32F103RC/target.h	116;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/NAZE/target.h	163;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/OLIMEXINO/target.h	103;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/PORT103R/target.h	126;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/STM32F3DISCOVERY/target.h	89;"	d
EXTERNAL1_ADC_GPIO_PIN	./target/SUPERBEE/target.h	176;"	d
EXTI0_IRQHandler	./drivers/sonar_hcsr04.c	/^void EXTI0_IRQHandler(void)$/;"	f
EXTI15_10_CALLBACK_HANDLER_COUNT	./drivers/system.c	36;"	d	file:
EXTI15_10_CALLBACK_HANDLER_COUNT	./target/NAZE/target.h	73;"	d
EXTI15_10_CALLBACK_HANDLER_COUNT	./target/SPRACINGF3/target.h	33;"	d
EXTI15_10_CALLBACK_HANDLER_COUNT	./target/SUPERBEE/target.h	73;"	d
EXTI15_10_IRQHandler	./drivers/system.c	/^void EXTI15_10_IRQHandler(void)$/;"	f
EXTI1_IRQHandler	./drivers/sonar_hcsr04.c	/^void EXTI1_IRQHandler(void)$/;"	f
EXTI9_5_IRQHandler	./drivers/sonar_hcsr04.c	/^void EXTI9_5_IRQHandler(void)$/;"	f
EXTI_InitStructure	./vcp/hw_config.c	/^EXTI_InitTypeDef EXTI_InitStructure;$/;"	v
E_SENSOR_NOT_DETECTED	./drivers/barometer_bmp085.c	79;"	d	file:
Endianness	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t Endianness;                         \/* Endian Data selection *\/$/;"	m	struct:__anon53
Enter_LowPowerMode	./vcp/hw_config.c	/^void Enter_LowPowerMode(void)$/;"	f
EstAlt	./flight/altitudehold.c	/^static int32_t EstAlt;                \/\/ in cm$/;"	v	file:
EstG	./flight/imu.c	/^t_fp_vector EstG;$/;"	v
FAILSAFE_COUNTER_THRESHOLD	./flight/failsafe.c	80;"	d	file:
FAILSAFE_IDLE	./flight/failsafe.h	/^    FAILSAFE_IDLE = 0,$/;"	e	enum:__anon14
FAILSAFE_LANDED	./flight/failsafe.h	/^    FAILSAFE_LANDED$/;"	e	enum:__anon14
FAILSAFE_LANDING	./flight/failsafe.h	/^    FAILSAFE_LANDING,$/;"	e	enum:__anon14
FAILSAFE_POWER_ON_DELAY_US	./flight/failsafe.h	20;"	d
FAILSAFE_RX_LOSS_DETECTED	./flight/failsafe.h	/^    FAILSAFE_RX_LOSS_DETECTED,$/;"	e	enum:__anon14
FC_VERSION_MAJOR	./version.h	18;"	d
FC_VERSION_MINOR	./version.h	19;"	d
FC_VERSION_PATCH_LEVEL	./version.h	20;"	d
FC_VERSION_STRING	./version.h	24;"	d
FD_PITCH	./common/axis.h	/^    FD_PITCH,$/;"	e	enum:__anon28
FD_ROLL	./common/axis.h	/^    FD_ROLL = 0,$/;"	e	enum:__anon28
FD_YAW	./common/axis.h	/^    FD_YAW$/;"	e	enum:__anon28
FEATURE_3D	./config/config.h	/^    FEATURE_3D = 1 << 12,$/;"	e	enum:__anon17
FEATURE_BLACKBOX	./config/config.h	/^    FEATURE_BLACKBOX = 1 << 19$/;"	e	enum:__anon17
FEATURE_CURRENT_METER	./config/config.h	/^    FEATURE_CURRENT_METER = 1 << 11,$/;"	e	enum:__anon17
FEATURE_DISPLAY	./config/config.h	/^    FEATURE_DISPLAY = 1 << 17,$/;"	e	enum:__anon17
FEATURE_FAILSAFE	./config/config.h	/^    FEATURE_FAILSAFE = 1 << 8,$/;"	e	enum:__anon17
FEATURE_GPS	./config/config.h	/^    FEATURE_GPS = 1 << 7,$/;"	e	enum:__anon17
FEATURE_INFLIGHT_ACC_CAL	./config/config.h	/^    FEATURE_INFLIGHT_ACC_CAL = 1 << 2,$/;"	e	enum:__anon17
FEATURE_LED_STRIP	./config/config.h	/^    FEATURE_LED_STRIP = 1 << 16,$/;"	e	enum:__anon17
FEATURE_MOTOR_STOP	./config/config.h	/^    FEATURE_MOTOR_STOP = 1 << 4,$/;"	e	enum:__anon17
FEATURE_ONESHOT125	./config/config.h	/^    FEATURE_ONESHOT125 = 1 << 18,$/;"	e	enum:__anon17
FEATURE_RSSI_ADC	./config/config.h	/^    FEATURE_RSSI_ADC = 1 << 15,$/;"	e	enum:__anon17
FEATURE_RX_MSP	./config/config.h	/^    FEATURE_RX_MSP = 1 << 14,$/;"	e	enum:__anon17
FEATURE_RX_PARALLEL_PWM	./config/config.h	/^    FEATURE_RX_PARALLEL_PWM = 1 << 13,$/;"	e	enum:__anon17
FEATURE_RX_PPM	./config/config.h	/^    FEATURE_RX_PPM = 1 << 0,$/;"	e	enum:__anon17
FEATURE_RX_SERIAL	./config/config.h	/^    FEATURE_RX_SERIAL = 1 << 3,$/;"	e	enum:__anon17
FEATURE_SERVO_TILT	./config/config.h	/^    FEATURE_SERVO_TILT = 1 << 5,$/;"	e	enum:__anon17
FEATURE_SOFTSERIAL	./config/config.h	/^    FEATURE_SOFTSERIAL = 1 << 6,$/;"	e	enum:__anon17
FEATURE_SONAR	./config/config.h	/^    FEATURE_SONAR = 1 << 9,$/;"	e	enum:__anon17
FEATURE_TELEMETRY	./config/config.h	/^    FEATURE_TELEMETRY = 1 << 10,$/;"	e	enum:__anon17
FEATURE_VBAT	./config/config.h	/^    FEATURE_VBAT = 1 << 1,$/;"	e	enum:__anon17
FIRST_PORT_INDEX	./config/config.c	261;"	d	file:
FIRST_PORT_INDEX	./config/config.c	264;"	d	file:
FIRST_PWM_PORT	./drivers/pwm_rx.c	315;"	d	file:
FIRST_TUNE_PHASE	./flight/autotune.c	123;"	d	file:
FIXED_WING	./config/runtime_config.h	/^    FIXED_WING     = (1 << 4),                   \/\/ set when in flying_wing or airplane mode. currently used by althold selection code$/;"	e	enum:__anon20
FIX_2D	./io/gps.c	/^    FIX_2D = 2,$/;"	e	enum:__anon91	file:
FIX_3D	./io/gps.c	/^    FIX_3D = 3,$/;"	e	enum:__anon91	file:
FIX_DEAD_RECKONING	./io/gps.c	/^    FIX_DEAD_RECKONING = 1,$/;"	e	enum:__anon91	file:
FIX_GPS_DEAD_RECKONING	./io/gps.c	/^    FIX_GPS_DEAD_RECKONING = 4,$/;"	e	enum:__anon91	file:
FIX_NONE	./io/gps.c	/^    FIX_NONE = 0,$/;"	e	enum:__anon91	file:
FIX_TIME	./io/gps.c	/^    FIX_TIME = 5$/;"	e	enum:__anon91	file:
FLASHFS_WRITE_BUFFER_AUTO_FLUSH_LEN	./io/flashfs.h	28;"	d
FLASHFS_WRITE_BUFFER_SIZE	./io/flashfs.h	24;"	d
FLASHFS_WRITE_BUFFER_USABLE	./io/flashfs.h	25;"	d
FLASH_M25P16_ID	./target/NAZE/hardware_revision.c	61;"	d	file:
FLASH_M25P16_ID	./target/SUPERBEE/hardware_revision.c	61;"	d	file:
FLASH_PAGE_COUNT	./config/config.c	101;"	d	file:
FLASH_PAGE_COUNT	./config/config.c	105;"	d	file:
FLASH_PAGE_COUNT	./config/config.c	110;"	d	file:
FLASH_PAGE_SIZE	./config/config.c	87;"	d	file:
FLASH_PAGE_SIZE	./config/config.c	91;"	d	file:
FLASH_PAGE_SIZE	./config/config.c	95;"	d	file:
FLASH_TO_RESERVE_FOR_CONFIG	./config/config.c	78;"	d	file:
FLIGHT_CONTROLLER_IDENTIFIER_LENGTH	./io/serial_msp.c	143;"	d	file:
FLIGHT_CONTROLLER_VERSION_LENGTH	./io/serial_msp.c	146;"	d	file:
FLIGHT_CONTROLLER_VERSION_MASK	./io/serial_msp.c	147;"	d	file:
FLIGHT_DYNAMICS_INDEX_COUNT	./common/axis.h	35;"	d
FLIGHT_LOG_EVENT_AUTOTUNE_CYCLE_RESULT	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_EVENT_AUTOTUNE_CYCLE_RESULT = 11,$/;"	e	enum:FlightLogEvent
FLIGHT_LOG_EVENT_AUTOTUNE_CYCLE_START	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_EVENT_AUTOTUNE_CYCLE_START = 10,$/;"	e	enum:FlightLogEvent
FLIGHT_LOG_EVENT_AUTOTUNE_FLAG_OVERSHOT	./blackbox/blackbox_fielddefs.h	125;"	d
FLIGHT_LOG_EVENT_AUTOTUNE_FLAG_TIMEDOUT	./blackbox/blackbox_fielddefs.h	126;"	d
FLIGHT_LOG_EVENT_AUTOTUNE_TARGETS	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_EVENT_AUTOTUNE_TARGETS = 12,$/;"	e	enum:FlightLogEvent
FLIGHT_LOG_EVENT_LOG_END	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_EVENT_LOG_END = 255$/;"	e	enum:FlightLogEvent
FLIGHT_LOG_EVENT_SYNC_BEEP	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_EVENT_SYNC_BEEP = 0,$/;"	e	enum:FlightLogEvent
FLIGHT_LOG_FIELD_CONDITION_ALWAYS	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_ALWAYS = 0,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AMPERAGE_ADC	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AMPERAGE_ADC,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_1	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_1,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_2	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_2,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_3	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_3,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_4	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_4,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_5	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_5,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_6	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_6,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_7	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_7,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_8	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_8,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_BARO	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_BARO,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_FIRST	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_FIRST = FLIGHT_LOG_FIELD_CONDITION_ALWAYS,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_LAST	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_LAST = FLIGHT_LOG_FIELD_CONDITION_NEVER$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_MAG	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_MAG,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_NEVER	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_NEVER,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_1	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_1,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_2	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_2,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_NOT_LOGGING_EVERY_FRAME	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_NOT_LOGGING_EVERY_FRAME,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_RSSI	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_RSSI,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_SONAR	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_SONAR,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_TRICOPTER	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_TRICOPTER,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_CONDITION_VBAT	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_CONDITION_VBAT,$/;"	e	enum:FlightLogFieldCondition
FLIGHT_LOG_FIELD_ENCODING_NEG_14BIT	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_NEG_14BIT       = 3, \/\/ Unsigned variable-byte but we negate the value before storing, value is 14 bits$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_NULL	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_NULL            = 9 \/\/ Nothing is written to the file, take value to be zero$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_SIGNED_VB	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_SIGNED_VB       = 0, \/\/ Signed variable-byte$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_TAG2_3S32	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_TAG2_3S32       = 7,$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_TAG8_4S16	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_TAG8_4S16       = 8,$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_TAG8_8SVB	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_TAG8_8SVB       = 6,$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_ENCODING_UNSIGNED_VB	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_ENCODING_UNSIGNED_VB     = 1, \/\/ Unsigned variable-byte$/;"	e	enum:FlightLogFieldEncoding
FLIGHT_LOG_FIELD_PREDICTOR_0	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_0              = 0,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_1500	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_1500           = 8,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_AVERAGE_2	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_AVERAGE_2      = 3,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_HOME_COORD	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_HOME_COORD     = 7,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_INC	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_INC            = 6,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_LAST_MAIN_FRAME_TIME	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_LAST_MAIN_FRAME_TIME = 10$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_MINTHROTTLE	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_MINTHROTTLE    = 4,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_MOTOR_0	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_MOTOR_0        = 5,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_PREVIOUS	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_PREVIOUS       = 1,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_STRAIGHT_LINE	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_STRAIGHT_LINE  = 2,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_PREDICTOR_VBATREF	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_PREDICTOR_VBATREF        = 9,$/;"	e	enum:FlightLogFieldPredictor
FLIGHT_LOG_FIELD_SIGNED	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_SIGNED   = 1$/;"	e	enum:FlightLogFieldSign
FLIGHT_LOG_FIELD_UNSIGNED	./blackbox/blackbox_fielddefs.h	/^    FLIGHT_LOG_FIELD_UNSIGNED = 0,$/;"	e	enum:FlightLogFieldSign
FLIGHT_MODE	./config/runtime_config.h	51;"	d
FONT_HEIGHT	./drivers/display_ug2864hsweg01.h	24;"	d
FONT_WIDTH	./drivers/display_ug2864hsweg01.h	23;"	d
FOR_GENERAL_MSP	./io/serial_msp.c	/^    FOR_GENERAL_MSP,$/;"	e	enum:__anon74	file:
FOR_TELEMETRY	./io/serial_msp.c	/^    FOR_TELEMETRY$/;"	e	enum:__anon74	file:
FRAME_GGA	./io/gps.c	454;"	d	file:
FRAME_GSV	./io/gps.c	456;"	d	file:
FRAME_RMC	./io/gps.c	455;"	d	file:
FRSKY_BAUDRATE	./telemetry/frsky.c	67;"	d	file:
FRSKY_FORMAT_DMS	./telemetry/telemetry.h	/^    FRSKY_FORMAT_DMS = 0,$/;"	e	enum:__anon105
FRSKY_FORMAT_NMEA	./telemetry/telemetry.h	/^    FRSKY_FORMAT_NMEA$/;"	e	enum:__anon105
FRSKY_INITIAL_PORT_MODE	./telemetry/frsky.c	68;"	d	file:
FRSKY_UNIT_IMPERIALS	./telemetry/telemetry.h	/^    FRSKY_UNIT_IMPERIALS$/;"	e	enum:__anon106
FRSKY_UNIT_METRICS	./telemetry/telemetry.h	/^    FRSKY_UNIT_METRICS = 0,$/;"	e	enum:__anon106
FRSKY_VFAS_PRECISION_HIGH	./telemetry/frsky.h	/^    FRSKY_VFAS_PRECISION_HIGH$/;"	e	enum:__anon109
FRSKY_VFAS_PRECISION_LOW	./telemetry/frsky.h	/^    FRSKY_VFAS_PRECISION_LOW = 0,$/;"	e	enum:__anon109
FSSP_DATAID_ACCX	./telemetry/smartport.c	/^    FSSP_DATAID_ACCX       = 0x0700 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_ACCY	./telemetry/smartport.c	/^    FSSP_DATAID_ACCY       = 0x0710 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_ACCZ	./telemetry/smartport.c	/^    FSSP_DATAID_ACCZ       = 0x0720 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_ADC1	./telemetry/smartport.c	/^    FSSP_DATAID_ADC1       = 0xF102 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_ADC2	./telemetry/smartport.c	/^    FSSP_DATAID_ADC2       = 0xF103 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_ALTITUDE	./telemetry/smartport.c	/^    FSSP_DATAID_ALTITUDE   = 0x0100 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_CAP_USED	./telemetry/smartport.c	/^    FSSP_DATAID_CAP_USED   = 0x0600 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_CELLS	./telemetry/smartport.c	/^    FSSP_DATAID_CELLS      = 0x0300 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_CELLS_LAST	./telemetry/smartport.c	/^    FSSP_DATAID_CELLS_LAST = 0x030F ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_CURRENT	./telemetry/smartport.c	/^    FSSP_DATAID_CURRENT    = 0x0200 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_FUEL	./telemetry/smartport.c	/^    FSSP_DATAID_FUEL       = 0x0600 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_GPS_ALT	./telemetry/smartport.c	/^    FSSP_DATAID_GPS_ALT    = 0x0820 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_HEADING	./telemetry/smartport.c	/^    FSSP_DATAID_HEADING    = 0x0840 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_LATLONG	./telemetry/smartport.c	/^    FSSP_DATAID_LATLONG    = 0x0800 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_RPM	./telemetry/smartport.c	/^    FSSP_DATAID_RPM        = 0x050F ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_SPEED	./telemetry/smartport.c	/^    FSSP_DATAID_SPEED      = 0x0830 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_T1	./telemetry/smartport.c	/^    FSSP_DATAID_T1         = 0x0400 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_T2	./telemetry/smartport.c	/^    FSSP_DATAID_T2         = 0x0410 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_VARIO	./telemetry/smartport.c	/^    FSSP_DATAID_VARIO      = 0x0110 ,$/;"	e	enum:__anon112	file:
FSSP_DATAID_VFAS	./telemetry/smartport.c	/^    FSSP_DATAID_VFAS       = 0x0210 ,$/;"	e	enum:__anon112	file:
FSSP_DATA_FRAME	./telemetry/smartport.c	/^    FSSP_DATA_FRAME = 0x10,$/;"	e	enum:__anon111	file:
FSSP_SENSOR_ID1	./telemetry/smartport.c	/^    FSSP_SENSOR_ID1 = 0x1B,$/;"	e	enum:__anon111	file:
FSSP_SENSOR_ID2	./telemetry/smartport.c	/^    FSSP_SENSOR_ID2 = 0x0D,$/;"	e	enum:__anon111	file:
FSSP_SENSOR_ID3	./telemetry/smartport.c	/^    FSSP_SENSOR_ID3 = 0x34,$/;"	e	enum:__anon111	file:
FSSP_SENSOR_ID4	./telemetry/smartport.c	/^    FSSP_SENSOR_ID4 = 0x67,$/;"	e	enum:__anon111	file:
FSSP_START_STOP	./telemetry/smartport.c	/^    FSSP_START_STOP = 0x7E,$/;"	e	enum:__anon111	file:
FS_1P3_GA	./drivers/accgyro_lsm303dlhc.c	94;"	d	file:
FS_1P9_GA	./drivers/accgyro_lsm303dlhc.c	95;"	d	file:
FS_2P5_GA	./drivers/accgyro_lsm303dlhc.c	96;"	d	file:
FS_4P0_GA	./drivers/accgyro_lsm303dlhc.c	97;"	d	file:
FS_4P7_GA	./drivers/accgyro_lsm303dlhc.c	98;"	d	file:
FS_5P6_GA	./drivers/accgyro_lsm303dlhc.c	99;"	d	file:
FS_8P1_GA	./drivers/accgyro_lsm303dlhc.c	100;"	d	file:
FULLSCALE_16G	./drivers/accgyro_lsm303dlhc.c	85;"	d	file:
FULLSCALE_2000	./drivers/accgyro_l3gd20.c	61;"	d	file:
FULLSCALE_250	./drivers/accgyro_l3gd20.c	59;"	d	file:
FULLSCALE_2G	./drivers/accgyro_lsm303dlhc.c	82;"	d	file:
FULLSCALE_4G	./drivers/accgyro_lsm303dlhc.c	83;"	d	file:
FULLSCALE_500	./drivers/accgyro_l3gd20.c	60;"	d	file:
FULLSCALE_8G	./drivers/accgyro_lsm303dlhc.c	84;"	d	file:
FUNCTIONS	./io/ledstrip.c	/^    FUNCTIONS,$/;"	e	enum:__anon77	file:
FUNCTION_BLACKBOX	./io/serial.h	/^    FUNCTION_BLACKBOX            = (1 << 7)  \/\/ 128$/;"	e	enum:__anon70
FUNCTION_COUNT	./io/ledstrip.c	328;"	d	file:
FUNCTION_GPS	./io/serial.h	/^    FUNCTION_GPS                 = (1 << 1), \/\/ 2$/;"	e	enum:__anon70
FUNCTION_MSP	./io/serial.h	/^    FUNCTION_MSP                 = (1 << 0), \/\/ 1$/;"	e	enum:__anon70
FUNCTION_NONE	./io/serial.h	/^    FUNCTION_NONE                = 0,$/;"	e	enum:__anon70
FUNCTION_RX_SERIAL	./io/serial.h	/^    FUNCTION_RX_SERIAL           = (1 << 6), \/\/ 64$/;"	e	enum:__anon70
FUNCTION_TELEMETRY_FRSKY	./io/serial.h	/^    FUNCTION_TELEMETRY_FRSKY     = (1 << 2), \/\/ 4$/;"	e	enum:__anon70
FUNCTION_TELEMETRY_HOTT	./io/serial.h	/^    FUNCTION_TELEMETRY_HOTT      = (1 << 3), \/\/ 8$/;"	e	enum:__anon70
FUNCTION_TELEMETRY_MSP	./io/serial.h	/^    FUNCTION_TELEMETRY_MSP       = (1 << 4), \/\/ 16$/;"	e	enum:__anon70
FUNCTION_TELEMETRY_SMARTPORT	./io/serial.h	/^    FUNCTION_TELEMETRY_SMARTPORT = (1 << 5), \/\/ 32$/;"	e	enum:__anon70
FillZerobss	./startup/startup_stm32f10x_hd_gcc.S	/^FillZerobss:$/;"	l
FillZerobss	./startup/startup_stm32f10x_md_gcc.S	/^FillZerobss:$/;"	l
FillZerobss	./startup/startup_stm32f30x_md_gcc.S	/^FillZerobss:$/;"	l
FlightLogEvent	./blackbox/blackbox_fielddefs.h	/^typedef enum FlightLogEvent {$/;"	g
FlightLogEvent	./blackbox/blackbox_fielddefs.h	/^} FlightLogEvent;$/;"	t	typeref:enum:FlightLogEvent
FlightLogFieldCondition	./blackbox/blackbox_fielddefs.h	/^typedef enum FlightLogFieldCondition {$/;"	g
FlightLogFieldCondition	./blackbox/blackbox_fielddefs.h	/^} FlightLogFieldCondition;$/;"	t	typeref:enum:FlightLogFieldCondition
FlightLogFieldEncoding	./blackbox/blackbox_fielddefs.h	/^typedef enum FlightLogFieldEncoding {$/;"	g
FlightLogFieldEncoding	./blackbox/blackbox_fielddefs.h	/^} FlightLogFieldEncoding;$/;"	t	typeref:enum:FlightLogFieldEncoding
FlightLogFieldPredictor	./blackbox/blackbox_fielddefs.h	/^typedef enum FlightLogFieldPredictor {$/;"	g
FlightLogFieldPredictor	./blackbox/blackbox_fielddefs.h	/^} FlightLogFieldPredictor;$/;"	t	typeref:enum:FlightLogFieldPredictor
FlightLogFieldSign	./blackbox/blackbox_fielddefs.h	/^typedef enum FlightLogFieldSign {$/;"	g
FlightLogFieldSign	./blackbox/blackbox_fielddefs.h	/^} FlightLogFieldSign;$/;"	t	typeref:enum:FlightLogFieldSign
GET_COMM_FEATURE	./vcp/usb_prop.h	58;"	d
GET_ENCAPSULATED_RESPONSE	./vcp/usb_prop.h	56;"	d
GET_LED_X	./io/ledstrip.h	28;"	d
GET_LED_Y	./io/ledstrip.h	29;"	d
GET_LINE_CODING	./vcp/usb_prop.h	61;"	d
GIMBAL_FORWARDAUX	./io/gimbal.h	/^    GIMBAL_FORWARDAUX = 1 << 2,$/;"	e	enum:GimbalFlags
GIMBAL_MIXTILT	./io/gimbal.h	/^    GIMBAL_MIXTILT = 1 << 1,$/;"	e	enum:GimbalFlags
GIMBAL_NORMAL	./io/gimbal.h	/^    GIMBAL_NORMAL = 1 << 0,$/;"	e	enum:GimbalFlags
GIT_SHORT_REVISION_LENGTH	./version.h	30;"	d
GPIO_Mode	./drivers/gpio.h	/^} GPIO_Mode;$/;"	t	typeref:enum:__anon45
GPIO_Mode	./drivers/gpio.h	/^} GPIO_Mode;$/;"	t	typeref:enum:__anon46
GPIO_Pin	./drivers/gpio.h	/^} GPIO_Pin;$/;"	t	typeref:enum:__anon48
GPIO_Speed	./drivers/gpio.h	/^} GPIO_Speed;$/;"	t	typeref:enum:__anon47
GPS	./target/CC3D/target.h	107;"	d
GPS	./target/CHEBUZZF3/target.h	101;"	d
GPS	./target/EUSTM32F103RC/target.h	119;"	d
GPS	./target/NAZE/target.h	166;"	d
GPS	./target/NAZE32PRO/target.h	43;"	d
GPS	./target/OLIMEXINO/target.h	106;"	d
GPS	./target/PORT103R/target.h	130;"	d
GPS	./target/SPARKY/target.h	114;"	d
GPS	./target/SPRACINGF3/target.h	159;"	d
GPS	./target/STM32F3DISCOVERY/target.h	93;"	d
GPS	./target/SUPERBEE/target.h	179;"	d
GPS_AUTOBAUD_OFF	./io/gps.h	/^    GPS_AUTOBAUD_OFF = 0,$/;"	e	enum:__anon65
GPS_AUTOBAUD_ON	./io/gps.h	/^    GPS_AUTOBAUD_ON$/;"	e	enum:__anon65
GPS_AUTOCONFIG_OFF	./io/gps.h	/^    GPS_AUTOCONFIG_OFF = 0,$/;"	e	enum:__anon64
GPS_AUTOCONFIG_ON	./io/gps.h	/^    GPS_AUTOCONFIG_ON,$/;"	e	enum:__anon64
GPS_BAD_QUALITY	./telemetry/frsky.c	123;"	d	file:
GPS_BAUDRATE_115200	./io/gps.h	/^    GPS_BAUDRATE_115200 = 0,$/;"	e	enum:__anon63
GPS_BAUDRATE_19200	./io/gps.h	/^    GPS_BAUDRATE_19200,$/;"	e	enum:__anon63
GPS_BAUDRATE_38400	./io/gps.h	/^    GPS_BAUDRATE_38400,$/;"	e	enum:__anon63
GPS_BAUDRATE_57600	./io/gps.h	/^    GPS_BAUDRATE_57600,$/;"	e	enum:__anon63
GPS_BAUDRATE_9600	./io/gps.h	/^    GPS_BAUDRATE_9600$/;"	e	enum:__anon63
GPS_BAUDRATE_CHANGE_DELAY	./io/gps.c	97;"	d	file:
GPS_BAUDRATE_MAX	./io/gps.h	60;"	d
GPS_CHANGE_BAUD	./io/gps.c	/^    GPS_CHANGE_BAUD,$/;"	e	enum:__anon82	file:
GPS_CONFIGURE	./io/gps.c	/^    GPS_CONFIGURE,$/;"	e	enum:__anon82	file:
GPS_DBHZ_MAX	./io/gps.h	118;"	d
GPS_DBHZ_MIN	./io/gps.h	117;"	d
GPS_DEGREES_DIVIDER	./io/gps.h	23;"	d
GPS_FILTERING	./flight/navigation.c	103;"	d	file:
GPS_FILTER_VECTOR_LENGTH	./flight/navigation.c	232;"	d	file:
GPS_FIX	./config/runtime_config.h	/^    GPS_FIX        = (1 << 1),$/;"	e	enum:__anon20
GPS_FIX_CHAR_2D	./telemetry/hott.c	/^    GPS_FIX_CHAR_2D = '2',$/;"	e	enum:__anon104	file:
GPS_FIX_CHAR_3D	./telemetry/hott.c	/^    GPS_FIX_CHAR_3D = '3',$/;"	e	enum:__anon104	file:
GPS_FIX_CHAR_DGPS	./telemetry/hott.c	/^    GPS_FIX_CHAR_DGPS = 'D',$/;"	e	enum:__anon104	file:
GPS_FIX_CHAR_NONE	./telemetry/hott.c	/^    GPS_FIX_CHAR_NONE = '-',$/;"	e	enum:__anon104	file:
GPS_FIX_HOME	./config/runtime_config.h	/^    GPS_FIX_HOME   = (1 << 0),$/;"	e	enum:__anon20
GPS_HOLD_MODE	./config/runtime_config.h	/^    GPS_HOLD_MODE   = (1 << 5),$/;"	e	enum:__anon19
GPS_HOME_MODE	./config/runtime_config.h	/^    GPS_HOME_MODE   = (1 << 4),$/;"	e	enum:__anon19
GPS_INITIALIZING	./io/gps.c	/^    GPS_INITIALIZING,$/;"	e	enum:__anon82	file:
GPS_INIT_DATA_ENTRY_COUNT	./io/gps.c	119;"	d	file:
GPS_INIT_ENTRIES	./io/gps.c	96;"	d	file:
GPS_LOST_COMMUNICATION	./io/gps.c	/^    GPS_LOST_COMMUNICATION,$/;"	e	enum:__anon82	file:
GPS_LOW_SPEED_D_FILTER	./flight/navigation.c	104;"	d	file:
GPS_MAX_HDOP_VAL	./telemetry/frsky.c	124;"	d	file:
GPS_MESSAGE_STATE_ENTRY_COUNT	./io/gps.h	82;"	d
GPS_MESSAGE_STATE_IDLE	./io/gps.h	/^    GPS_MESSAGE_STATE_IDLE = 0,$/;"	e	enum:__anon66
GPS_MESSAGE_STATE_INIT	./io/gps.h	/^    GPS_MESSAGE_STATE_INIT,$/;"	e	enum:__anon66
GPS_MESSAGE_STATE_MAX	./io/gps.h	/^    GPS_MESSAGE_STATE_MAX = GPS_MESSAGE_STATE_SBAS$/;"	e	enum:__anon66
GPS_MESSAGE_STATE_SBAS	./io/gps.h	/^    GPS_MESSAGE_STATE_SBAS,$/;"	e	enum:__anon66
GPS_NMEA	./io/gps.h	/^    GPS_NMEA = 0,$/;"	e	enum:__anon61
GPS_PACKET_LOG_ENTRY_COUNT	./io/gps.h	97;"	d
GPS_PROVIDER_MAX	./io/gps.h	30;"	d
GPS_RECEIVING_DATA	./io/gps.c	/^    GPS_RECEIVING_DATA,$/;"	e	enum:__anon82	file:
GPS_SV_MAXSATS	./io/gps.c	66;"	d	file:
GPS_TIMEOUT	./io/gps.c	94;"	d	file:
GPS_UBLOX	./io/gps.h	/^    GPS_UBLOX$/;"	e	enum:__anon61
GPS_UNKNOWN	./io/gps.c	/^    GPS_UNKNOWN,$/;"	e	enum:__anon82	file:
GPS_WP	./flight/navigation.c	/^static int32_t GPS_WP[2];$/;"	v	file:
GPS_X	./flight/navigation.c	183;"	d	file:
GPS_Y	./flight/navigation.c	184;"	d	file:
GPS_altitude	./io/gps.c	/^uint16_t GPS_altitude;              \/\/ altitude in 0.1m$/;"	v
GPS_angle	./flight/navigation.c	/^int16_t GPS_angle[ANGLE_INDEX_COUNT] = { 0, 0 };    \/\/ it's the angles that must be applied for GPS correction$/;"	v
GPS_calc_desired_speed	./flight/navigation.c	/^static uint16_t GPS_calc_desired_speed(uint16_t max_speed, bool _slow)$/;"	f	file:
GPS_calc_location_error	./flight/navigation.c	/^static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)$/;"	f	file:
GPS_calc_longitude_scaling	./flight/navigation.c	/^static void GPS_calc_longitude_scaling(int32_t lat)$/;"	f	file:
GPS_calc_nav_rate	./flight/navigation.c	/^static void GPS_calc_nav_rate(uint16_t max_speed)$/;"	f	file:
GPS_calc_poshold	./flight/navigation.c	/^static void GPS_calc_poshold(void)$/;"	f	file:
GPS_calc_velocity	./flight/navigation.c	/^static void GPS_calc_velocity(void)$/;"	f	file:
GPS_calculateDistanceAndDirectionToHome	./flight/navigation.c	/^void GPS_calculateDistanceAndDirectionToHome(void)$/;"	f
GPS_coord	./blackbox/blackbox.c	/^    int32_t GPS_home[2], GPS_coord[2];$/;"	m	struct:blackboxGpsState_t	file:
GPS_coord	./io/gps.c	/^int32_t GPS_coord[2];               \/\/ LAT\/LON$/;"	v
GPS_coord_to_degrees	./flight/gps_conversion.c	/^uint32_t GPS_coord_to_degrees(const char* coordinateString)$/;"	f
GPS_degree	./flight/navigation.c	/^static int32_t GPS_degree[2];   \/\/the lat lon degree without any decimals (lat\/10 000 000)$/;"	v	file:
GPS_directionToHome	./flight/navigation.c	/^int16_t GPS_directionToHome;        \/\/ direction to home or hol point in degrees$/;"	v
GPS_distanceToHome	./flight/navigation.c	/^uint16_t GPS_distanceToHome;        \/\/ distance to home point in meters$/;"	v
GPS_distance_cm_bearing	./flight/navigation.c	/^static void GPS_distance_cm_bearing(int32_t *currentLat1, int32_t *currentLon1, int32_t *destinationLat2, int32_t *destinationLon2, uint32_t *dist, int32_t *bearing)$/;"	f	file:
GPS_filter	./flight/navigation.c	/^static int32_t GPS_filter[2][GPS_FILTER_VECTOR_LENGTH];$/;"	v	file:
GPS_filter_index	./flight/navigation.c	/^static uint8_t GPS_filter_index = 0;$/;"	v	file:
GPS_filter_sum	./flight/navigation.c	/^static int32_t GPS_filter_sum[2];$/;"	v	file:
GPS_filtered	./flight/navigation.c	/^static int32_t GPS_filtered[2];$/;"	v	file:
GPS_ground_course	./io/gps.c	/^uint16_t GPS_ground_course = 0;     \/\/ degrees * 10$/;"	v
GPS_hdop	./io/gps.c	/^uint16_t GPS_hdop = 9999;           \/\/ Compute GPS quality signal$/;"	v
GPS_hold	./flight/navigation.c	/^int32_t GPS_hold[2];$/;"	v
GPS_home	./blackbox/blackbox.c	/^    int32_t GPS_home[2], GPS_coord[2];$/;"	m	struct:blackboxGpsState_t	file:
GPS_home	./flight/navigation.c	/^int32_t GPS_home[2];$/;"	v
GPS_numCh	./io/gps.c	/^uint8_t GPS_numCh;                          \/\/ Number of channels$/;"	v
GPS_numSat	./blackbox/blackbox.c	/^    uint8_t GPS_numSat;$/;"	m	struct:blackboxGpsState_t	file:
GPS_numSat	./io/gps.c	/^uint8_t GPS_numSat;$/;"	v
GPS_packetCount	./io/gps.c	/^uint32_t GPS_packetCount = 0;$/;"	v
GPS_read	./flight/navigation.c	/^static int32_t GPS_read[2];$/;"	v	file:
GPS_reset_home_position	./flight/navigation.c	/^void GPS_reset_home_position(void)$/;"	f
GPS_reset_nav	./flight/navigation.c	/^void GPS_reset_nav(void)$/;"	f
GPS_scaleLonDown	./flight/navigation.c	/^static float GPS_scaleLonDown = 1.0f;  \/\/ this is used to offset the shrinking longitude as we go towards the poles$/;"	v	file:
GPS_set_next_wp	./flight/navigation.c	/^void GPS_set_next_wp(int32_t *lat, int32_t *lon)$/;"	f
GPS_speed	./io/gps.c	/^uint16_t GPS_speed;                 \/\/ speed in 0.1m\/s$/;"	v
GPS_svInfoReceivedCount	./io/gps.c	/^uint32_t GPS_svInfoReceivedCount = 0; \/\/ SV = Space Vehicle, counter increments each time SV info is received.$/;"	v
GPS_svinfo_chn	./io/gps.c	/^uint8_t GPS_svinfo_chn[GPS_SV_MAXSATS];     \/\/ Channel number$/;"	v
GPS_svinfo_cno	./io/gps.c	/^uint8_t GPS_svinfo_cno[GPS_SV_MAXSATS];     \/\/ Carrier to Noise Ratio (Signal Strength)$/;"	v
GPS_svinfo_quality	./io/gps.c	/^uint8_t GPS_svinfo_quality[GPS_SV_MAXSATS]; \/\/ Bitfield Qualtity$/;"	v
GPS_svinfo_svid	./io/gps.c	/^uint8_t GPS_svinfo_svid[GPS_SV_MAXSATS];    \/\/ Satellite ID$/;"	v
GPS_update	./io/gps.c	/^uint8_t GPS_update = 0;             \/\/ it's a binary toggle to distinct a GPS position update$/;"	v
GPS_update_crosstrack	./flight/navigation.c	/^static void GPS_update_crosstrack(void)$/;"	f	file:
GPStoDDDMM_MMMM	./telemetry/frsky.c	/^static void GPStoDDDMM_MMMM(int32_t mwiigps, gpsCoordinateDDDMMmmmm_t *result)$/;"	f	file:
GYRO	./target/ALIENWIIF3/target.h	35;"	d
GYRO	./target/CC3D/target.h	47;"	d
GYRO	./target/CHEBUZZF3/target.h	41;"	d
GYRO	./target/CJMCU/target.h	40;"	d
GYRO	./target/EUSTM32F103RC/target.h	42;"	d
GYRO	./target/NAZE/target.h	81;"	d
GYRO	./target/NAZE32PRO/target.h	32;"	d
GYRO	./target/OLIMEXINO/target.h	40;"	d
GYRO	./target/PORT103R/target.h	57;"	d
GYRO	./target/SPARKY/target.h	32;"	d
GYRO	./target/SPRACINGF3/target.h	42;"	d
GYRO	./target/STM32F3DISCOVERY/target.h	42;"	d
GYRO	./target/SUPERBEE/target.h	81;"	d
GYRO_DEFAULT	./sensors/gyro.h	/^    GYRO_DEFAULT,$/;"	e	enum:__anon124
GYRO_FAKE	./sensors/gyro.h	/^    GYRO_FAKE$/;"	e	enum:__anon124
GYRO_I_MAX	./flight/pid.h	20;"	d
GYRO_L3G4200D	./sensors/gyro.h	/^    GYRO_L3G4200D,$/;"	e	enum:__anon124
GYRO_L3GD20	./sensors/gyro.h	/^    GYRO_L3GD20,$/;"	e	enum:__anon124
GYRO_L3GD20_ALIGN	./target/CHEBUZZF3/target.h	50;"	d
GYRO_L3GD20_ALIGN	./target/STM32F3DISCOVERY/target.h	50;"	d
GYRO_MPU3050	./sensors/gyro.h	/^    GYRO_MPU3050,$/;"	e	enum:__anon124
GYRO_MPU3050_ALIGN	./target/NAZE/target.h	87;"	d
GYRO_MPU3050_ALIGN	./target/SUPERBEE/target.h	87;"	d
GYRO_MPU6050	./sensors/gyro.h	/^    GYRO_MPU6050,$/;"	e	enum:__anon124
GYRO_MPU6050_ALIGN	./target/ALIENWIIF3/target.h	38;"	d
GYRO_MPU6050_ALIGN	./target/CHEBUZZF3/target.h	51;"	d
GYRO_MPU6050_ALIGN	./target/EUSTM32F103RC/target.h	51;"	d
GYRO_MPU6050_ALIGN	./target/NAZE/target.h	88;"	d
GYRO_MPU6050_ALIGN	./target/SPARKY/target.h	35;"	d
GYRO_MPU6050_ALIGN	./target/SPRACINGF3/target.h	44;"	d
GYRO_MPU6050_ALIGN	./target/SUPERBEE/target.h	88;"	d
GYRO_NONE	./sensors/gyro.h	/^    GYRO_NONE = 0,$/;"	e	enum:__anon124
GYRO_SCALE_FACTOR	./drivers/accgyro_spi_mpu6000.h	11;"	d
GYRO_SPI_MPU6000	./sensors/gyro.h	/^    GYRO_SPI_MPU6000,$/;"	e	enum:__anon124
GYRO_SPI_MPU6000_ALIGN	./target/CC3D/target.h	50;"	d
GYRO_SPI_MPU6500	./sensors/gyro.h	/^    GYRO_SPI_MPU6500,$/;"	e	enum:__anon124
GYRO_SPI_MPU6500_ALIGN	./target/NAZE/target.h	89;"	d
GYRO_SPI_MPU6500_ALIGN	./target/SUPERBEE/target.h	89;"	d
Get_SerialNum	./vcp/hw_config.c	/^void Get_SerialNum(void)$/;"	f
GimbalFlags	./io/gimbal.h	/^typedef enum GimbalFlags {$/;"	g
GimbalFlags	./io/gimbal.h	/^} GimbalFlags;$/;"	t	typeref:enum:GimbalFlags
HALF_SCREEN_CHARACTER_COLUMN_COUNT	./io/display.c	83;"	d	file:
HARDWARE_BIND_PLUG	./target/ALIENWIIF3/target.h	128;"	d
HARDWARE_BIND_PLUG	./target/NAZE/target.h	188;"	d
HARDWARE_BIND_PLUG	./target/SUPERBEE/target.h	201;"	d
HEADER_ARROW	./io/serial_msp.c	/^    HEADER_ARROW,$/;"	e	enum:__anon73	file:
HEADER_CMD	./io/serial_msp.c	/^    HEADER_CMD,$/;"	e	enum:__anon73	file:
HEADER_M	./io/serial_msp.c	/^    HEADER_M,$/;"	e	enum:__anon73	file:
HEADER_SIZE	./io/serial_msp.c	/^    HEADER_SIZE,$/;"	e	enum:__anon73	file:
HEADER_START	./io/serial_msp.c	/^    HEADER_START,$/;"	e	enum:__anon73	file:
HEADFREE_MODE	./config/runtime_config.h	/^    HEADFREE_MODE   = (1 << 6),$/;"	e	enum:__anon19
HMC58X3_R_CONFA	./drivers/compass_hmc5883l.c	108;"	d	file:
HMC58X3_R_CONFB	./drivers/compass_hmc5883l.c	109;"	d	file:
HMC58X3_R_MODE	./drivers/compass_hmc5883l.c	110;"	d	file:
HMC58X3_X_SELF_TEST_GAUSS	./drivers/compass_hmc5883l.c	111;"	d	file:
HMC58X3_Y_SELF_TEST_GAUSS	./drivers/compass_hmc5883l.c	112;"	d	file:
HMC58X3_Z_SELF_TEST_GAUSS	./drivers/compass_hmc5883l.c	113;"	d	file:
HMC_NEG_BIAS	./drivers/compass_hmc5883l.c	117;"	d	file:
HMC_POS_BIAS	./drivers/compass_hmc5883l.c	116;"	d	file:
HORIZONTAL_PADDING	./drivers/display_ug2864hsweg01.h	25;"	d
HORIZON_MODE	./config/runtime_config.h	/^    HORIZON_MODE    = (1 << 1),$/;"	e	enum:__anon19
HOTTV4_BINARY_MODE_REQUEST_ID	./telemetry/hott.h	33;"	d
HOTTV4_BUTTON_DEC	./telemetry/hott.h	35;"	d
HOTTV4_BUTTON_INC	./telemetry/hott.h	36;"	d
HOTTV4_BUTTON_NEXT	./telemetry/hott.h	39;"	d
HOTTV4_BUTTON_NIL	./telemetry/hott.h	38;"	d
HOTTV4_BUTTON_PREV	./telemetry/hott.h	40;"	d
HOTTV4_BUTTON_SET	./telemetry/hott.h	37;"	d
HOTTV4_RXTX	./telemetry/hott.h	30;"	d
HOTTV4_TEXT_MODE_REQUEST_ID	./telemetry/hott.h	32;"	d
HOTT_AIRESC_MSG_s	./telemetry/hott.h	/^typedef struct HOTT_AIRESC_MSG_s {$/;"	s
HOTT_AIRESC_MSG_t	./telemetry/hott.h	/^} HOTT_AIRESC_MSG_t;$/;"	t	typeref:struct:HOTT_AIRESC_MSG_s
HOTT_BAUDRATE	./telemetry/hott.c	103;"	d	file:
HOTT_BINARY_MODE_REQUEST_ID	./telemetry/hott.h	79;"	d
HOTT_CRC_SIZE	./telemetry/hott.c	101;"	d	file:
HOTT_EAM_ALARM1_FLAG_ALTITUDE	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_ALTITUDE = (1 << 5),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_BATTERY_1	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_BATTERY_1 = (1 << 1),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_BATTERY_2	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_BATTERY_2 = (1 << 2),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_CURRENT	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_CURRENT = (1 << 6),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_MAH	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_MAH = (1 << 0),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_MAIN_VOLTAGE	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_MAIN_VOLTAGE = (1 << 7),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_NONE	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_NONE = 0,$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_TEMPERATURE_1	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_TEMPERATURE_1 = (1 << 3),$/;"	e	enum:__anon107
HOTT_EAM_ALARM1_FLAG_TEMPERATURE_2	./telemetry/hott.h	/^    HOTT_EAM_ALARM1_FLAG_TEMPERATURE_2 = (1 << 4),$/;"	e	enum:__anon107
HOTT_EAM_ALARM2_FLAG_ALTITUDE_DUPLICATE	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_ALTITUDE_DUPLICATE = (1 << 2),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_M3S	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_M3S = (1 << 1),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_M3S_DUPLICATE	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_M3S_DUPLICATE = (1 << 4),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_MS	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_MS = (1 << 0),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_MS_DUPLICATE	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_MS_DUPLICATE = (1 << 3),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_NONE	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_NONE = 0,$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_ON_SIGN_OR_TEXT_ACTIVE	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_ON_SIGN_OR_TEXT_ACTIVE = (1 << 7),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_UNKNOWN_1	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_UNKNOWN_1 = (1 << 5),$/;"	e	enum:__anon108
HOTT_EAM_ALARM2_FLAG_UNKNOWN_2	./telemetry/hott.h	/^    HOTT_EAM_ALARM2_FLAG_UNKNOWN_2 = (1 << 6),$/;"	e	enum:__anon108
HOTT_EAM_MSG_s	./telemetry/hott.h	/^typedef struct HOTT_EAM_MSG_s {$/;"	s
HOTT_EAM_MSG_t	./telemetry/hott.h	/^} HOTT_EAM_MSG_t;$/;"	t	typeref:struct:HOTT_EAM_MSG_s
HOTT_EAM_OFFSET_HEIGHT	./telemetry/hott.h	42;"	d
HOTT_EAM_OFFSET_M2S	./telemetry/hott.h	43;"	d
HOTT_EAM_OFFSET_M3S	./telemetry/hott.h	44;"	d
HOTT_EAM_OFFSET_TEMPERATURE	./telemetry/hott.h	45;"	d
HOTT_EAM_SENSOR_TEXT_ID	./telemetry/hott.h	102;"	d
HOTT_GAM_MSG_s	./telemetry/hott.h	/^typedef struct HOTT_GAM_MSG_s {$/;"	s
HOTT_GPS_ALTITUDE_OFFSET	./telemetry/hott.h	47;"	d
HOTT_GPS_MSG_s	./telemetry/hott.h	/^typedef struct HOTT_GPS_MSG_s {$/;"	s
HOTT_GPS_MSG_t	./telemetry/hott.h	/^} HOTT_GPS_MSG_t;$/;"	t	typeref:struct:HOTT_GPS_MSG_s
HOTT_GPS_SENSOR_TEXT_ID	./telemetry/hott.h	103;"	d
HOTT_INITIAL_PORT_MODE	./telemetry/hott.c	104;"	d	file:
HOTT_MESSAGE_PREPARATION_FREQUENCY_5_HZ	./telemetry/hott.c	86;"	d	file:
HOTT_RX_SCHEDULE	./telemetry/hott.c	87;"	d	file:
HOTT_TELEMETRY_AIRESC_SENSOR_ID	./telemetry/hott.h	93;"	d
HOTT_TELEMETRY_EAM_SENSOR_ID	./telemetry/hott.h	99;"	d
HOTT_TELEMETRY_GAM_SENSOR_ID	./telemetry/hott.h	96;"	d
HOTT_TELEMETRY_GPS_SENSOR_ID	./telemetry/hott.h	90;"	d
HOTT_TELEMETRY_H_	./telemetry/hott.h	27;"	d
HOTT_TELEMETRY_NO_SENSOR_ID	./telemetry/hott.h	84;"	d
HOTT_TELEMETRY_VARIO_SENSOR_ID	./telemetry/hott.h	87;"	d
HOTT_TEXTMODE_MSG	./telemetry/hott.h	/^struct HOTT_TEXTMODE_MSG {$/;"	s
HOTT_TEXTMODE_MSG_TEXT_LEN	./telemetry/hott.h	106;"	d
HOTT_TEXT_MODE_REQUEST_ID	./telemetry/hott.h	78;"	d
HOTT_TX_DELAY_US	./telemetry/hott.c	88;"	d	file:
HOTT_VARIO_MSG_TEXT_LEN	./telemetry/hott.h	207;"	d
HOTT_VARIO_MSG_s	./telemetry/hott.h	/^typedef struct HOTT_VARIO_MSG_s {$/;"	s
HOTT_VARIO_MSG_t	./telemetry/hott.h	/^} HOTT_VARIO_MSG_t;$/;"	t	typeref:struct:HOTT_VARIO_MSG_s
HSEStartUpStatus	./vcp/hw_config.c	/^ErrorStatus HSEStartUpStatus;$/;"	v
HSV_COLOR_COMPONENT_COUNT	./common/color.h	50;"	d
HSV_HUE	./common/color.h	/^    HSV_HUE = 0,$/;"	e	enum:__anon32
HSV_HUE_MAX	./common/color.h	40;"	d
HSV_SATURATION	./common/color.h	/^    HSV_SATURATION,$/;"	e	enum:__anon32
HSV_SATURATION_MAX	./common/color.h	41;"	d
HSV_VALUE	./common/color.h	/^    HSV_VALUE$/;"	e	enum:__anon32
HSV_VALUE_MAX	./common/color.h	42;"	d
H_level	./flight/pid.h	/^    float H_level;$/;"	m	struct:pidProfile_s
H_sensitivity	./flight/pid.h	/^    uint8_t H_sensitivity;$/;"	m	struct:pidProfile_s
HardFault_Handler	./main.c	/^void HardFault_Handler(void)$/;"	f
HighPassFilter_AOI1	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t HighPassFilter_AOI1;                \/* HPF_enabling\/disabling for AOI function on interrupt 1 *\/$/;"	m	struct:__anon54
HighPassFilter_AOI2	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t HighPassFilter_AOI2;                \/* HPF_enabling\/disabling for AOI function on interrupt 2 *\/$/;"	m	struct:__anon54
HighPassFilter_CutOff_Frequency	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t HighPassFilter_CutOff_Frequency;    \/* High pass filter cut-off frequency *\/$/;"	m	struct:__anon54
HighPassFilter_Mode_Selection	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t HighPassFilter_Mode_Selection;      \/* Internal filter mode *\/$/;"	m	struct:__anon54
High_Resolution	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t High_Resolution;                    \/* High Resolution enabling\/disabling *\/$/;"	m	struct:__anon53
I2C1_ER_IRQHandler	./drivers/bus_i2c_stm32f10x.c	/^void I2C1_ER_IRQHandler(void)$/;"	f
I2C1_EV_IRQHandler	./drivers/bus_i2c_stm32f10x.c	/^void I2C1_EV_IRQHandler(void)$/;"	f
I2C1_SCL_CLK_SOURCE	./drivers/bus_i2c_stm32f30x.c	40;"	d	file:
I2C1_SCL_GPIO	./drivers/bus_i2c_stm32f30x.c	36;"	d	file:
I2C1_SCL_GPIO_AF	./drivers/bus_i2c_stm32f30x.c	37;"	d	file:
I2C1_SCL_PIN	./drivers/bus_i2c_stm32f30x.c	38;"	d	file:
I2C1_SCL_PIN_SOURCE	./drivers/bus_i2c_stm32f30x.c	39;"	d	file:
I2C1_SDA_CLK_SOURCE	./drivers/bus_i2c_stm32f30x.c	45;"	d	file:
I2C1_SDA_GPIO	./drivers/bus_i2c_stm32f30x.c	41;"	d	file:
I2C1_SDA_GPIO_AF	./drivers/bus_i2c_stm32f30x.c	42;"	d	file:
I2C1_SDA_PIN	./drivers/bus_i2c_stm32f30x.c	43;"	d	file:
I2C1_SDA_PIN_SOURCE	./drivers/bus_i2c_stm32f30x.c	44;"	d	file:
I2C2_ER_IRQHandler	./drivers/bus_i2c_stm32f10x.c	/^void I2C2_ER_IRQHandler(void)$/;"	f
I2C2_EV_IRQHandler	./drivers/bus_i2c_stm32f10x.c	/^void I2C2_EV_IRQHandler(void)$/;"	f
I2C2_SCL_CLK_SOURCE	./drivers/bus_i2c_stm32f30x.c	52;"	d	file:
I2C2_SCL_CLK_SOURCE	./target/ALIENWIIF3/target.h	94;"	d
I2C2_SCL_CLK_SOURCE	./target/SPARKY/target.h	89;"	d
I2C2_SCL_GPIO	./drivers/bus_i2c_stm32f30x.c	48;"	d	file:
I2C2_SCL_GPIO	./target/ALIENWIIF3/target.h	90;"	d
I2C2_SCL_GPIO	./target/SPARKY/target.h	85;"	d
I2C2_SCL_GPIO_AF	./drivers/bus_i2c_stm32f30x.c	49;"	d	file:
I2C2_SCL_GPIO_AF	./target/ALIENWIIF3/target.h	91;"	d
I2C2_SCL_GPIO_AF	./target/SPARKY/target.h	86;"	d
I2C2_SCL_PIN	./drivers/bus_i2c_stm32f30x.c	50;"	d	file:
I2C2_SCL_PIN	./target/ALIENWIIF3/target.h	92;"	d
I2C2_SCL_PIN	./target/SPARKY/target.h	87;"	d
I2C2_SCL_PIN_SOURCE	./drivers/bus_i2c_stm32f30x.c	51;"	d	file:
I2C2_SCL_PIN_SOURCE	./target/ALIENWIIF3/target.h	93;"	d
I2C2_SCL_PIN_SOURCE	./target/SPARKY/target.h	88;"	d
I2C2_SDA_CLK_SOURCE	./drivers/bus_i2c_stm32f30x.c	57;"	d	file:
I2C2_SDA_CLK_SOURCE	./target/ALIENWIIF3/target.h	99;"	d
I2C2_SDA_CLK_SOURCE	./target/SPARKY/target.h	94;"	d
I2C2_SDA_GPIO	./drivers/bus_i2c_stm32f30x.c	53;"	d	file:
I2C2_SDA_GPIO	./target/ALIENWIIF3/target.h	95;"	d
I2C2_SDA_GPIO	./target/SPARKY/target.h	90;"	d
I2C2_SDA_GPIO_AF	./drivers/bus_i2c_stm32f30x.c	54;"	d	file:
I2C2_SDA_GPIO_AF	./target/ALIENWIIF3/target.h	96;"	d
I2C2_SDA_GPIO_AF	./target/SPARKY/target.h	91;"	d
I2C2_SDA_PIN	./drivers/bus_i2c_stm32f30x.c	55;"	d	file:
I2C2_SDA_PIN	./target/ALIENWIIF3/target.h	97;"	d
I2C2_SDA_PIN	./target/SPARKY/target.h	92;"	d
I2C2_SDA_PIN_SOURCE	./drivers/bus_i2c_stm32f30x.c	56;"	d	file:
I2C2_SDA_PIN_SOURCE	./target/ALIENWIIF3/target.h	98;"	d
I2C2_SDA_PIN_SOURCE	./target/SPARKY/target.h	93;"	d
I2CDEV_1	./drivers/bus_i2c.h	/^    I2CDEV_1,$/;"	e	enum:I2CDevice
I2CDEV_2	./drivers/bus_i2c.h	/^    I2CDEV_2,$/;"	e	enum:I2CDevice
I2CDEV_MAX	./drivers/bus_i2c.h	/^    I2CDEV_MAX = I2CDEV_2,$/;"	e	enum:I2CDevice
I2CDevice	./drivers/bus_i2c.h	/^typedef enum I2CDevice {$/;"	g
I2CDevice	./drivers/bus_i2c.h	/^} I2CDevice;$/;"	t	typeref:enum:I2CDevice
I2C_Ack	./drivers/bus_i2c_soft.c	/^static void I2C_Ack(void)$/;"	f	file:
I2C_DEFAULT_TIMEOUT	./drivers/bus_i2c_stm32f10x.c	85;"	d	file:
I2C_DEVICE	./target/ALIENWIIF3/target.h	88;"	d
I2C_DEVICE	./target/CC3D/target.h	91;"	d
I2C_DEVICE	./target/CHEBUZZF3/target.h	77;"	d
I2C_DEVICE	./target/CJMCU/target.h	54;"	d
I2C_DEVICE	./target/EUSTM32F103RC/target.h	95;"	d
I2C_DEVICE	./target/NAZE/target.h	142;"	d
I2C_DEVICE	./target/NAZE32PRO/target.h	41;"	d
I2C_DEVICE	./target/OLIMEXINO/target.h	82;"	d
I2C_DEVICE	./target/PORT103R/target.h	105;"	d
I2C_DEVICE	./target/SPARKY/target.h	83;"	d
I2C_DEVICE	./target/SPRACINGF3/target.h	105;"	d
I2C_DEVICE	./target/STM32F3DISCOVERY/target.h	68;"	d
I2C_DEVICE	./target/SUPERBEE/target.h	155;"	d
I2C_GPIO	./drivers/bus_i2c_soft.c	42;"	d	file:
I2C_GPIO	./drivers/bus_i2c_soft.c	55;"	d	file:
I2C_LONG_TIMEOUT	./drivers/bus_i2c_stm32f30x.c	34;"	d	file:
I2C_NoAck	./drivers/bus_i2c_soft.c	/^static void I2C_NoAck(void)$/;"	f	file:
I2C_PINS	./drivers/bus_i2c_soft.c	41;"	d	file:
I2C_PINS	./drivers/bus_i2c_soft.c	54;"	d	file:
I2C_ReceiveByte	./drivers/bus_i2c_soft.c	/^static uint8_t I2C_ReceiveByte(void)$/;"	f	file:
I2C_SHORT_TIMEOUT	./drivers/bus_i2c_stm32f30x.c	33;"	d	file:
I2C_SendByte	./drivers/bus_i2c_soft.c	/^static void I2C_SendByte(uint8_t byte)$/;"	f	file:
I2C_Start	./drivers/bus_i2c_soft.c	/^static bool I2C_Start(void)$/;"	f	file:
I2C_Stop	./drivers/bus_i2c_soft.c	/^static void I2C_Stop(void)$/;"	f	file:
I2C_WaitAck	./drivers/bus_i2c_soft.c	/^static bool I2C_WaitAck(void)$/;"	f	file:
I2C_delay	./drivers/bus_i2c_soft.c	/^static void I2C_delay(void)$/;"	f	file:
I2Cx	./drivers/bus_i2c_stm32f10x.c	/^static I2C_TypeDef *I2Cx = NULL;$/;"	v	file:
I2Cx	./drivers/bus_i2c_stm32f30x.c	/^static I2C_TypeDef *I2Cx = NULL;$/;"	v	file:
I2Cx_index	./drivers/bus_i2c_stm32f10x.c	/^static I2CDevice I2Cx_index;$/;"	v	file:
I8	./flight/pid.h	/^    uint8_t I8[PID_ITEM_COUNT];$/;"	m	struct:pidProfile_s
ID1	./vcp/platform_config.h	46;"	d
ID1	./vcp/platform_config.h	52;"	d
ID2	./vcp/platform_config.h	47;"	d
ID2	./vcp/platform_config.h	53;"	d
ID3	./vcp/platform_config.h	48;"	d
ID3	./vcp/platform_config.h	54;"	d
IDLE	./io/serial_msp.c	/^    IDLE,$/;"	e	enum:__anon73	file:
ID_ACC_X	./telemetry/frsky.c	109;"	d	file:
ID_ACC_Y	./telemetry/frsky.c	110;"	d	file:
ID_ACC_Z	./telemetry/frsky.c	111;"	d	file:
ID_ALTITUDE_AP	./telemetry/frsky.c	94;"	d	file:
ID_ALTITUDE_BP	./telemetry/frsky.c	93;"	d	file:
ID_COURSE_AP	./telemetry/frsky.c	104;"	d	file:
ID_COURSE_BP	./telemetry/frsky.c	103;"	d	file:
ID_CURRENT	./telemetry/frsky.c	115;"	d	file:
ID_DATE_MONTH	./telemetry/frsky.c	105;"	d	file:
ID_E_W	./telemetry/frsky.c	99;"	d	file:
ID_FUEL_LEVEL	./telemetry/frsky.c	90;"	d	file:
ID_GPS_ALTIDUTE_AP	./telemetry/frsky.c	87;"	d	file:
ID_GPS_ALTIDUTE_BP	./telemetry/frsky.c	86;"	d	file:
ID_GPS_SPEED_AP	./telemetry/frsky.c	96;"	d	file:
ID_GPS_SPEED_BP	./telemetry/frsky.c	95;"	d	file:
ID_GYRO_X	./telemetry/frsky.c	117;"	d	file:
ID_GYRO_Y	./telemetry/frsky.c	118;"	d	file:
ID_GYRO_Z	./telemetry/frsky.c	119;"	d	file:
ID_HOUR_MINUTE	./telemetry/frsky.c	107;"	d	file:
ID_LATITUDE_AP	./telemetry/frsky.c	101;"	d	file:
ID_LATITUDE_BP	./telemetry/frsky.c	100;"	d	file:
ID_LONGITUDE_AP	./telemetry/frsky.c	98;"	d	file:
ID_LONGITUDE_BP	./telemetry/frsky.c	97;"	d	file:
ID_N_S	./telemetry/frsky.c	102;"	d	file:
ID_RPM	./telemetry/frsky.c	89;"	d	file:
ID_SECOND	./telemetry/frsky.c	108;"	d	file:
ID_TEMPRATURE1	./telemetry/frsky.c	88;"	d	file:
ID_TEMPRATURE2	./telemetry/frsky.c	91;"	d	file:
ID_VERT_SPEED	./telemetry/frsky.c	121;"	d	file:
ID_VOLT	./telemetry/frsky.c	92;"	d	file:
ID_VOLTAGE_AMP	./telemetry/frsky.c	112;"	d	file:
ID_VOLTAGE_AMP_AP	./telemetry/frsky.c	114;"	d	file:
ID_VOLTAGE_AMP_BP	./telemetry/frsky.c	113;"	d	file:
ID_YEAR	./telemetry/frsky.c	106;"	d	file:
IMR_MSK	./vcp/usb_conf.h	72;"	d
INBUF_SIZE	./io/serial_msp.c	317;"	d	file:
INDICATOR_DEADBAND	./io/ledstrip.c	708;"	d	file:
INPUT_FILTERING_DISABLED	./drivers/pwm_rx.h	/^    INPUT_FILTERING_DISABLED = 0,$/;"	e	enum:__anon41
INPUT_FILTERING_ENABLED	./drivers/pwm_rx.h	/^    INPUT_FILTERING_ENABLED$/;"	e	enum:__anon41
INPUT_FILTER_TO_HELP_WITH_NOISE_FROM_OPENLRS_TELEMETRY_RX	./drivers/pwm_rx.c	48;"	d	file:
INPUT_MODE_PPM	./drivers/pwm_rx.c	/^    INPUT_MODE_PPM,$/;"	e	enum:__anon58	file:
INPUT_MODE_PWM	./drivers/pwm_rx.c	/^    INPUT_MODE_PWM,$/;"	e	enum:__anon58	file:
INVERSE_CHAR_FORMAT	./drivers/display_ug2864hsweg01.c	29;"	d	file:
INVERTER	./target/CC3D/target.h	66;"	d
INVERTER	./target/EUSTM32F103RC/target.h	79;"	d
INVERTER	./target/NAZE/target.h	117;"	d
INVERTER	./target/PORT103R/target.h	88;"	d
INVERTER	./target/SUPERBEE/target.h	130;"	d
INVERTER_GPIO	./target/CC3D/target.h	26;"	d
INVERTER_GPIO	./target/EUSTM32F103RC/target.h	30;"	d
INVERTER_GPIO	./target/NAZE/target.h	43;"	d
INVERTER_GPIO	./target/PORT103R/target.h	45;"	d
INVERTER_GPIO	./target/SUPERBEE/target.h	43;"	d
INVERTER_OFF	./drivers/inverter.h	21;"	d
INVERTER_OFF	./drivers/inverter.h	24;"	d
INVERTER_ON	./drivers/inverter.h	22;"	d
INVERTER_ON	./drivers/inverter.h	25;"	d
INVERTER_PERIPHERAL	./target/CC3D/target.h	27;"	d
INVERTER_PERIPHERAL	./target/EUSTM32F103RC/target.h	31;"	d
INVERTER_PERIPHERAL	./target/NAZE/target.h	44;"	d
INVERTER_PERIPHERAL	./target/PORT103R/target.h	46;"	d
INVERTER_PERIPHERAL	./target/SUPERBEE/target.h	44;"	d
INVERTER_PIN	./target/CC3D/target.h	25;"	d
INVERTER_PIN	./target/EUSTM32F103RC/target.h	29;"	d
INVERTER_PIN	./target/NAZE/target.h	42;"	d
INVERTER_PIN	./target/PORT103R/target.h	44;"	d
INVERTER_PIN	./target/SUPERBEE/target.h	42;"	d
INVERTER_USART	./target/CC3D/target.h	28;"	d
INVERTER_USART	./target/EUSTM32F103RC/target.h	32;"	d
INVERTER_USART	./target/NAZE/target.h	45;"	d
INVERTER_USART	./target/PORT103R/target.h	47;"	d
INVERTER_USART	./target/SUPERBEE/target.h	45;"	d
INV_CLK_INTERNAL	./drivers/accgyro_mpu6050.c	/^    INV_CLK_INTERNAL = 0,$/;"	e	enum:clock_sel_e	file:
INV_CLK_INTERNAL	./drivers/accgyro_spi_mpu6500.c	/^    INV_CLK_INTERNAL = 0,$/;"	e	enum:clock_sel_e	file:
INV_CLK_PLL	./drivers/accgyro_mpu6050.c	/^    INV_CLK_PLL,$/;"	e	enum:clock_sel_e	file:
INV_CLK_PLL	./drivers/accgyro_spi_mpu6500.c	/^    INV_CLK_PLL,$/;"	e	enum:clock_sel_e	file:
INV_FILTER_10HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_10HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_10HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_10HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_188HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_188HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_188HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_188HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_20HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_20HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_20HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_20HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_2100HZ_NOLPF	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_2100HZ_NOLPF,$/;"	e	enum:lpf_e	file:
INV_FILTER_2100HZ_NOLPF	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_2100HZ_NOLPF,$/;"	e	enum:lpf_e	file:
INV_FILTER_256HZ_NOLPF2	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_256HZ_NOLPF2 = 0,$/;"	e	enum:lpf_e	file:
INV_FILTER_256HZ_NOLPF2	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_256HZ_NOLPF2 = 0,$/;"	e	enum:lpf_e	file:
INV_FILTER_42HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_42HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_42HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_42HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_5HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_5HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_5HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_5HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_98HZ	./drivers/accgyro_mpu6050.c	/^    INV_FILTER_98HZ,$/;"	e	enum:lpf_e	file:
INV_FILTER_98HZ	./drivers/accgyro_spi_mpu6500.c	/^    INV_FILTER_98HZ,$/;"	e	enum:lpf_e	file:
INV_FSR_1000DPS	./drivers/accgyro_mpu6050.c	/^    INV_FSR_1000DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_1000DPS	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_1000DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_16G	./drivers/accgyro_mpu6050.c	/^    INV_FSR_16G,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_16G	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_16G,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_2000DPS	./drivers/accgyro_mpu6050.c	/^    INV_FSR_2000DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_2000DPS	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_2000DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_250DPS	./drivers/accgyro_mpu6050.c	/^    INV_FSR_250DPS = 0,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_250DPS	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_250DPS = 0,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_2G	./drivers/accgyro_mpu6050.c	/^    INV_FSR_2G = 0,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_2G	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_2G = 0,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_4G	./drivers/accgyro_mpu6050.c	/^    INV_FSR_4G,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_4G	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_4G,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_500DPS	./drivers/accgyro_mpu6050.c	/^    INV_FSR_500DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_500DPS	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_500DPS,$/;"	e	enum:gyro_fsr_e	file:
INV_FSR_8G	./drivers/accgyro_mpu6050.c	/^    INV_FSR_8G,$/;"	e	enum:accel_fsr_e	file:
INV_FSR_8G	./drivers/accgyro_spi_mpu6500.c	/^    INV_FSR_8G,$/;"	e	enum:accel_fsr_e	file:
IS_ADJUSTMENT_FUNCTION_BUSY	./io/rc_controls.c	311;"	d	file:
IS_ENABLED	./io/serial_msp.c	720;"	d	file:
IS_PID_CONTROLLER_FP_BASED	./flight/pid.h	49;"	d
IS_RANGE_USABLE	./io/rc_controls.h	122;"	d
IS_RC_MODE_ACTIVE	./io/rc_controls.h	52;"	d
IS_SCREEN_CHARACTER_COLUMN_COUNT_ODD	./io/display.c	84;"	d	file:
I_f	./flight/pid.h	/^    float I_f[3];$/;"	m	struct:pidProfile_s
Iencode	./blackbox/blackbox.c	/^    uint8_t Iencode;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
Imax	./flight/navigation.c	/^    float Imax;$/;"	m	struct:__anon5	file:
Infinite_Loop	./startup/startup_stm32f10x_hd_gcc.S	/^Infinite_Loop:$/;"	l
Infinite_Loop	./startup/startup_stm32f10x_md_gcc.S	/^Infinite_Loop:$/;"	l
Infinite_Loop	./startup/startup_stm32f30x_md_gcc.S	/^Infinite_Loop:$/;"	l
InflightcalibratingA	./mw.c	/^uint16_t InflightcalibratingA = 0;$/;"	v
IntToUnicode	./vcp/hw_config.c	/^static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)$/;"	f	file:
Ipredict	./blackbox/blackbox.c	/^    uint8_t Ipredict;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
JEDEC_ID_MICRON_M25P16	./drivers/flash_m25p16.c	42;"	d	file:
JEDEC_ID_MICRON_N25Q064	./drivers/flash_m25p16.c	43;"	d	file:
JEDEC_ID_MICRON_N25Q128	./drivers/flash_m25p16.c	45;"	d	file:
JEDEC_ID_WINBOND_W25Q128	./drivers/flash_m25p16.c	46;"	d	file:
JEDEC_ID_WINBOND_W25Q64	./drivers/flash_m25p16.c	44;"	d	file:
L3G4200D_ADDRESS	./drivers/accgyro_l3g4200d.c	34;"	d	file:
L3G4200D_AUTOINCR	./drivers/accgyro_l3g4200d.c	36;"	d	file:
L3G4200D_CTRL_REG1	./drivers/accgyro_l3g4200d.c	40;"	d	file:
L3G4200D_CTRL_REG2	./drivers/accgyro_l3g4200d.c	41;"	d	file:
L3G4200D_CTRL_REG3	./drivers/accgyro_l3g4200d.c	42;"	d	file:
L3G4200D_CTRL_REG4	./drivers/accgyro_l3g4200d.c	43;"	d	file:
L3G4200D_CTRL_REG5	./drivers/accgyro_l3g4200d.c	44;"	d	file:
L3G4200D_DLPF_32HZ	./drivers/accgyro_l3g4200d.c	52;"	d	file:
L3G4200D_DLPF_54HZ	./drivers/accgyro_l3g4200d.c	53;"	d	file:
L3G4200D_DLPF_78HZ	./drivers/accgyro_l3g4200d.c	54;"	d	file:
L3G4200D_DLPF_93HZ	./drivers/accgyro_l3g4200d.c	55;"	d	file:
L3G4200D_FS_SEL_2000DPS	./drivers/accgyro_l3g4200d.c	51;"	d	file:
L3G4200D_GYRO_OUT	./drivers/accgyro_l3g4200d.c	47;"	d	file:
L3G4200D_ID	./drivers/accgyro_l3g4200d.c	35;"	d	file:
L3G4200D_POWER_ON	./drivers/accgyro_l3g4200d.c	50;"	d	file:
L3G4200D_REFERENCE	./drivers/accgyro_l3g4200d.c	45;"	d	file:
L3G4200D_STATUS_REG	./drivers/accgyro_l3g4200d.c	46;"	d	file:
L3G4200D_WHO_AM_I	./drivers/accgyro_l3g4200d.c	39;"	d	file:
L3GD20_CS_GPIO	./target/CHEBUZZF3/target.h	47;"	d
L3GD20_CS_GPIO	./target/STM32F3DISCOVERY/target.h	47;"	d
L3GD20_CS_GPIO_CLK_PERIPHERAL	./target/CHEBUZZF3/target.h	46;"	d
L3GD20_CS_GPIO_CLK_PERIPHERAL	./target/STM32F3DISCOVERY/target.h	46;"	d
L3GD20_CS_PIN	./target/CHEBUZZF3/target.h	48;"	d
L3GD20_CS_PIN	./target/STM32F3DISCOVERY/target.h	48;"	d
L3GD20_GYRO_SCALE_FACTOR	./drivers/accgyro_l3gd20.c	149;"	d	file:
L3GD20_SPI	./target/CHEBUZZF3/target.h	45;"	d
L3GD20_SPI	./target/STM32F3DISCOVERY/target.h	45;"	d
LAT	./io/gps.h	20;"	d
LCDprint	./io/display.c	/^void LCDprint(uint8_t i) {$/;"	f
LEADING	./drivers/serial_softserial.c	/^    LEADING$/;"	e	enum:__anon38	file:
LED0	./target/ALIENWIIF3/target.h	56;"	d
LED0	./target/CC3D/target.h	23;"	d
LED0	./target/CHEBUZZF3/target.h	68;"	d
LED0	./target/CJMCU/target.h	25;"	d
LED0	./target/EUSTM32F103RC/target.h	76;"	d
LED0	./target/NAZE/target.h	115;"	d
LED0	./target/NAZE32PRO/target.h	30;"	d
LED0	./target/OLIMEXINO/target.h	29;"	d
LED0	./target/PORT103R/target.h	129;"	d
LED0	./target/PORT103R/target.h	85;"	d
LED0	./target/SPARKY/target.h	50;"	d
LED0	./target/SPRACINGF3/target.h	63;"	d
LED0	./target/STM32F3DISCOVERY/target.h	59;"	d
LED0	./target/SUPERBEE/target.h	128;"	d
LED0_GPIO	./target/ALIENWIIF3/target.h	22;"	d
LED0_GPIO	./target/CC3D/target.h	20;"	d
LED0_GPIO	./target/CHEBUZZF3/target.h	22;"	d
LED0_GPIO	./target/CJMCU/target.h	23;"	d
LED0_GPIO	./target/EUSTM32F103RC/target.h	22;"	d
LED0_GPIO	./target/NAZE/target.h	25;"	d
LED0_GPIO	./target/NAZE32PRO/target.h	22;"	d
LED0_GPIO	./target/OLIMEXINO/target.h	26;"	d
LED0_GPIO	./target/PORT103R/target.h	22;"	d
LED0_GPIO	./target/SPARKY/target.h	22;"	d
LED0_GPIO	./target/SPRACINGF3/target.h	22;"	d
LED0_GPIO	./target/STM32F3DISCOVERY/target.h	22;"	d
LED0_GPIO	./target/SUPERBEE/target.h	25;"	d
LED0_INVERTED	./target/CHEBUZZF3/target.h	25;"	d
LED0_INVERTED	./target/STM32F3DISCOVERY/target.h	25;"	d
LED0_OFF	./drivers/light_led.h	24;"	d
LED0_OFF	./drivers/light_led.h	27;"	d
LED0_OFF	./drivers/light_led.h	32;"	d
LED0_ON	./drivers/light_led.h	25;"	d
LED0_ON	./drivers/light_led.h	28;"	d
LED0_ON	./drivers/light_led.h	33;"	d
LED0_PERIPHERAL	./target/ALIENWIIF3/target.h	24;"	d
LED0_PERIPHERAL	./target/CC3D/target.h	22;"	d
LED0_PERIPHERAL	./target/CHEBUZZF3/target.h	24;"	d
LED0_PERIPHERAL	./target/CJMCU/target.h	26;"	d
LED0_PERIPHERAL	./target/EUSTM32F103RC/target.h	24;"	d
LED0_PERIPHERAL	./target/NAZE/target.h	27;"	d
LED0_PERIPHERAL	./target/NAZE32PRO/target.h	24;"	d
LED0_PERIPHERAL	./target/OLIMEXINO/target.h	28;"	d
LED0_PERIPHERAL	./target/PORT103R/target.h	24;"	d
LED0_PERIPHERAL	./target/SPARKY/target.h	24;"	d
LED0_PERIPHERAL	./target/SPRACINGF3/target.h	24;"	d
LED0_PERIPHERAL	./target/STM32F3DISCOVERY/target.h	24;"	d
LED0_PERIPHERAL	./target/SUPERBEE/target.h	27;"	d
LED0_PIN	./target/ALIENWIIF3/target.h	23;"	d
LED0_PIN	./target/CC3D/target.h	21;"	d
LED0_PIN	./target/CHEBUZZF3/target.h	23;"	d
LED0_PIN	./target/CJMCU/target.h	24;"	d
LED0_PIN	./target/EUSTM32F103RC/target.h	23;"	d
LED0_PIN	./target/NAZE/target.h	26;"	d
LED0_PIN	./target/NAZE32PRO/target.h	23;"	d
LED0_PIN	./target/OLIMEXINO/target.h	27;"	d
LED0_PIN	./target/PORT103R/target.h	23;"	d
LED0_PIN	./target/SPARKY/target.h	23;"	d
LED0_PIN	./target/SPRACINGF3/target.h	23;"	d
LED0_PIN	./target/STM32F3DISCOVERY/target.h	23;"	d
LED0_PIN	./target/SUPERBEE/target.h	26;"	d
LED0_TOGGLE	./drivers/light_led.h	22;"	d
LED0_TOGGLE	./drivers/light_led.h	31;"	d
LED1	./target/ALIENWIIF3/target.h	57;"	d
LED1	./target/CHEBUZZF3/target.h	69;"	d
LED1	./target/CJMCU/target.h	29;"	d
LED1	./target/EUSTM32F103RC/target.h	77;"	d
LED1	./target/NAZE/target.h	116;"	d
LED1	./target/OLIMEXINO/target.h	37;"	d
LED1	./target/PORT103R/target.h	86;"	d
LED1	./target/SPARKY/target.h	51;"	d
LED1	./target/STM32F3DISCOVERY/target.h	60;"	d
LED1	./target/SUPERBEE/target.h	129;"	d
LED1_GPIO	./target/ALIENWIIF3/target.h	25;"	d
LED1_GPIO	./target/CHEBUZZF3/target.h	26;"	d
LED1_GPIO	./target/CJMCU/target.h	27;"	d
LED1_GPIO	./target/EUSTM32F103RC/target.h	25;"	d
LED1_GPIO	./target/NAZE/target.h	28;"	d
LED1_GPIO	./target/OLIMEXINO/target.h	34;"	d
LED1_GPIO	./target/PORT103R/target.h	26;"	d
LED1_GPIO	./target/SPARKY/target.h	25;"	d
LED1_GPIO	./target/STM32F3DISCOVERY/target.h	26;"	d
LED1_GPIO	./target/SUPERBEE/target.h	28;"	d
LED1_INVERTED	./target/CHEBUZZF3/target.h	29;"	d
LED1_INVERTED	./target/STM32F3DISCOVERY/target.h	29;"	d
LED1_OFF	./drivers/light_led.h	39;"	d
LED1_OFF	./drivers/light_led.h	42;"	d
LED1_OFF	./drivers/light_led.h	47;"	d
LED1_ON	./drivers/light_led.h	40;"	d
LED1_ON	./drivers/light_led.h	43;"	d
LED1_ON	./drivers/light_led.h	48;"	d
LED1_PERIPHERAL	./target/ALIENWIIF3/target.h	27;"	d
LED1_PERIPHERAL	./target/CHEBUZZF3/target.h	28;"	d
LED1_PERIPHERAL	./target/CJMCU/target.h	30;"	d
LED1_PERIPHERAL	./target/EUSTM32F103RC/target.h	27;"	d
LED1_PERIPHERAL	./target/NAZE/target.h	30;"	d
LED1_PERIPHERAL	./target/OLIMEXINO/target.h	36;"	d
LED1_PERIPHERAL	./target/PORT103R/target.h	28;"	d
LED1_PERIPHERAL	./target/SPARKY/target.h	27;"	d
LED1_PERIPHERAL	./target/STM32F3DISCOVERY/target.h	28;"	d
LED1_PERIPHERAL	./target/SUPERBEE/target.h	30;"	d
LED1_PIN	./target/ALIENWIIF3/target.h	26;"	d
LED1_PIN	./target/CHEBUZZF3/target.h	27;"	d
LED1_PIN	./target/CJMCU/target.h	28;"	d
LED1_PIN	./target/EUSTM32F103RC/target.h	26;"	d
LED1_PIN	./target/NAZE/target.h	29;"	d
LED1_PIN	./target/OLIMEXINO/target.h	35;"	d
LED1_PIN	./target/PORT103R/target.h	27;"	d
LED1_PIN	./target/SPARKY/target.h	26;"	d
LED1_PIN	./target/STM32F3DISCOVERY/target.h	27;"	d
LED1_PIN	./target/SUPERBEE/target.h	29;"	d
LED1_TOGGLE	./drivers/light_led.h	37;"	d
LED1_TOGGLE	./drivers/light_led.h	46;"	d
LED2	./target/CJMCU/target.h	33;"	d
LED2	./target/PORT103R/target.h	87;"	d
LED2_GPIO	./target/CJMCU/target.h	31;"	d
LED2_GPIO	./target/PORT103R/target.h	30;"	d
LED2_OFF	./drivers/light_led.h	55;"	d
LED2_OFF	./drivers/light_led.h	58;"	d
LED2_OFF	./drivers/light_led.h	63;"	d
LED2_ON	./drivers/light_led.h	56;"	d
LED2_ON	./drivers/light_led.h	59;"	d
LED2_ON	./drivers/light_led.h	64;"	d
LED2_PERIPHERAL	./target/CJMCU/target.h	34;"	d
LED2_PERIPHERAL	./target/PORT103R/target.h	32;"	d
LED2_PIN	./target/CJMCU/target.h	32;"	d
LED2_PIN	./target/PORT103R/target.h	31;"	d
LED2_TOGGLE	./drivers/light_led.h	53;"	d
LED2_TOGGLE	./drivers/light_led.h	62;"	d
LED_BLACK	./io/ledstrip.c	78;"	d	file:
LED_BLUE	./io/ledstrip.c	88;"	d	file:
LED_CYAN	./io/ledstrip.c	86;"	d	file:
LED_DARK_VIOLET	./io/ledstrip.c	89;"	d	file:
LED_DEEP_PINK	./io/ledstrip.c	91;"	d	file:
LED_DIRECTION_BIT_OFFSET	./io/ledstrip.h	54;"	d
LED_DIRECTION_COUNT	./io/ledstrip.c	108;"	d	file:
LED_DIRECTION_DOWN	./io/ledstrip.h	/^    LED_DIRECTION_DOWN       = (1 << 5),$/;"	e	enum:__anon68
LED_DIRECTION_EAST	./io/ledstrip.h	/^    LED_DIRECTION_EAST       = (1 << 1),$/;"	e	enum:__anon68
LED_DIRECTION_MASK	./io/ledstrip.h	55;"	d
LED_DIRECTION_NORTH	./io/ledstrip.h	/^    LED_DIRECTION_NORTH      = (1 << 0),$/;"	e	enum:__anon68
LED_DIRECTION_SOUTH	./io/ledstrip.h	/^    LED_DIRECTION_SOUTH      = (1 << 2),$/;"	e	enum:__anon68
LED_DIRECTION_UP	./io/ledstrip.h	/^    LED_DIRECTION_UP         = (1 << 4),$/;"	e	enum:__anon68
LED_DIRECTION_WEST	./io/ledstrip.h	/^    LED_DIRECTION_WEST       = (1 << 3),$/;"	e	enum:__anon68
LED_DISABLED	./io/ledstrip.h	/^    LED_DISABLED = 0,$/;"	e	enum:__anon68
LED_FUNCTION_ARM_STATE	./io/ledstrip.h	/^    LED_FUNCTION_ARM_STATE   = (1 << 9),$/;"	e	enum:__anon68
LED_FUNCTION_BIT_OFFSET	./io/ledstrip.h	63;"	d
LED_FUNCTION_COLOR	./io/ledstrip.h	/^    LED_FUNCTION_COLOR       = (1 << 12),$/;"	e	enum:__anon68
LED_FUNCTION_FLIGHT_MODE	./io/ledstrip.h	/^    LED_FUNCTION_FLIGHT_MODE = (1 << 8),$/;"	e	enum:__anon68
LED_FUNCTION_INDICATOR	./io/ledstrip.h	/^    LED_FUNCTION_INDICATOR   = (1 << 6),$/;"	e	enum:__anon68
LED_FUNCTION_MASK	./io/ledstrip.h	64;"	d
LED_FUNCTION_THROTTLE	./io/ledstrip.h	/^    LED_FUNCTION_THROTTLE    = (1 << 10),$/;"	e	enum:__anon68
LED_FUNCTION_THRUST_RING	./io/ledstrip.h	/^    LED_FUNCTION_THRUST_RING = (1 << 11),$/;"	e	enum:__anon68
LED_FUNCTION_WARNING	./io/ledstrip.h	/^    LED_FUNCTION_WARNING     = (1 << 7),$/;"	e	enum:__anon68
LED_GREEN	./io/ledstrip.c	84;"	d	file:
LED_LIGHT_BLUE	./io/ledstrip.c	87;"	d	file:
LED_LIME_GREEN	./io/ledstrip.c	83;"	d	file:
LED_MAGENTA	./io/ledstrip.c	90;"	d	file:
LED_MINT_GREEN	./io/ledstrip.c	85;"	d	file:
LED_ORANGE	./io/ledstrip.c	81;"	d	file:
LED_RED	./io/ledstrip.c	80;"	d	file:
LED_STRIP	./target/CC3D/target.h	108;"	d
LED_STRIP	./target/CHEBUZZF3/target.h	102;"	d
LED_STRIP	./target/EUSTM32F103RC/target.h	120;"	d
LED_STRIP	./target/NAZE/target.h	168;"	d
LED_STRIP	./target/OLIMEXINO/target.h	107;"	d
LED_STRIP	./target/PORT103R/target.h	131;"	d
LED_STRIP	./target/SPARKY/target.h	119;"	d
LED_STRIP	./target/SPRACINGF3/target.h	145;"	d
LED_STRIP	./target/STM32F3DISCOVERY/target.h	94;"	d
LED_STRIP	./target/SUPERBEE/target.h	181;"	d
LED_STRIP_10HZ	./io/ledstrip.c	70;"	d	file:
LED_STRIP_20HZ	./io/ledstrip.c	69;"	d	file:
LED_STRIP_5HZ	./io/ledstrip.c	71;"	d	file:
LED_STRIP_TIMER	./target/CC3D/target.h	109;"	d
LED_STRIP_TIMER	./target/CHEBUZZF3/target.h	104;"	d
LED_STRIP_TIMER	./target/CHEBUZZF3/target.h	107;"	d
LED_STRIP_TIMER	./target/EUSTM32F103RC/target.h	121;"	d
LED_STRIP_TIMER	./target/NAZE/target.h	169;"	d
LED_STRIP_TIMER	./target/OLIMEXINO/target.h	108;"	d
LED_STRIP_TIMER	./target/PORT103R/target.h	132;"	d
LED_STRIP_TIMER	./target/SPARKY/target.h	122;"	d
LED_STRIP_TIMER	./target/SPRACINGF3/target.h	146;"	d
LED_STRIP_TIMER	./target/STM32F3DISCOVERY/target.h	95;"	d
LED_STRIP_TIMER	./target/SUPERBEE/target.h	182;"	d
LED_WHITE	./io/ledstrip.c	79;"	d	file:
LED_XY_MASK	./io/ledstrip.h	26;"	d
LED_X_BIT_OFFSET	./io/ledstrip.h	23;"	d
LED_YELLOW	./io/ledstrip.c	82;"	d	file:
LED_Y_BIT_OFFSET	./io/ledstrip.h	24;"	d
LINE_CODING	./vcp/usb_prop.h	/^} LINE_CODING;$/;"	t	typeref:struct:__anon16
LOG_ERROR	./io/gps.c	55;"	d	file:
LOG_IGNORED	./io/gps.c	56;"	d	file:
LOG_NMEA_GGA	./io/gps.c	58;"	d	file:
LOG_NMEA_RMC	./io/gps.c	59;"	d	file:
LOG_SKIPPED	./io/gps.c	57;"	d	file:
LOG_UBLOX_POSLLH	./io/gps.c	63;"	d	file:
LOG_UBLOX_SOL	./io/gps.c	60;"	d	file:
LOG_UBLOX_STATUS	./io/gps.c	61;"	d	file:
LOG_UBLOX_SVINFO	./io/gps.c	62;"	d	file:
LOG_UBLOX_VELNED	./io/gps.c	64;"	d	file:
LON	./io/gps.h	21;"	d
LOWPASS_NUM_COEF	./flight/lowpass.h	21;"	d
LPF_ROUND	./flight/lowpass.h	22;"	d
LSB_MASK	./drivers/gpio_stm32f10x.c	66;"	d	file:
LSM303DLHCAcc_FilterConfigTypeDef	./drivers/accgyro_lsm303dlhc.h	/^}LSM303DLHCAcc_FilterConfigTypeDef;$/;"	t	typeref:struct:__anon54
LSM303DLHCAcc_InitTypeDef	./drivers/accgyro_lsm303dlhc.h	/^}LSM303DLHCAcc_InitTypeDef;$/;"	t	typeref:struct:__anon53
LSM303DLHCMag_InitTypeDef	./drivers/accgyro_lsm303dlhc.h	/^}LSM303DLHCMag_InitTypeDef;$/;"	t	typeref:struct:__anon55
LSM303DLHC_ACCEL_ADDRESS	./drivers/accgyro_lsm303dlhc.c	38;"	d	file:
LSM303DLHC_AND_COMBINATION	./drivers/accgyro_lsm303dlhc.h	357;"	d
LSM303DLHC_AXES_DISABLE	./drivers/accgyro_lsm303dlhc.h	216;"	d
LSM303DLHC_AXES_ENABLE	./drivers/accgyro_lsm303dlhc.h	215;"	d
LSM303DLHC_BLE_LSB	./drivers/accgyro_lsm303dlhc.h	253;"	d
LSM303DLHC_BLE_MSB	./drivers/accgyro_lsm303dlhc.h	254;"	d
LSM303DLHC_BOOT_NORMALMODE	./drivers/accgyro_lsm303dlhc.h	262;"	d
LSM303DLHC_BOOT_REBOOTMEMORY	./drivers/accgyro_lsm303dlhc.h	263;"	d
LSM303DLHC_BlockUpdate_Continous	./drivers/accgyro_lsm303dlhc.h	244;"	d
LSM303DLHC_BlockUpdate_Single	./drivers/accgyro_lsm303dlhc.h	245;"	d
LSM303DLHC_CLICK_CFG_A	./drivers/accgyro_lsm303dlhc.h	150;"	d
LSM303DLHC_CLICK_SOURCE_A	./drivers/accgyro_lsm303dlhc.h	151;"	d
LSM303DLHC_CLICK_THS_A	./drivers/accgyro_lsm303dlhc.h	152;"	d
LSM303DLHC_CONTINUOS_CONVERSION	./drivers/accgyro_lsm303dlhc.h	462;"	d
LSM303DLHC_CRA_REG_M	./drivers/accgyro_lsm303dlhc.h	159;"	d
LSM303DLHC_CRB_REG_M	./drivers/accgyro_lsm303dlhc.h	160;"	d
LSM303DLHC_CTRL_REG1_A	./drivers/accgyro_lsm303dlhc.h	123;"	d
LSM303DLHC_CTRL_REG2_A	./drivers/accgyro_lsm303dlhc.h	124;"	d
LSM303DLHC_CTRL_REG3_A	./drivers/accgyro_lsm303dlhc.h	125;"	d
LSM303DLHC_CTRL_REG4_A	./drivers/accgyro_lsm303dlhc.h	126;"	d
LSM303DLHC_CTRL_REG5_A	./drivers/accgyro_lsm303dlhc.h	127;"	d
LSM303DLHC_CTRL_REG6_A	./drivers/accgyro_lsm303dlhc.h	128;"	d
LSM303DLHC_DRDY_EXTI_IRQn	./drivers/accgyro_lsm303dlhc.h	101;"	d
LSM303DLHC_DRDY_EXTI_LINE	./drivers/accgyro_lsm303dlhc.h	98;"	d
LSM303DLHC_DRDY_EXTI_PIN_SOURCE	./drivers/accgyro_lsm303dlhc.h	100;"	d
LSM303DLHC_DRDY_EXTI_PORT_SOURCE	./drivers/accgyro_lsm303dlhc.h	99;"	d
LSM303DLHC_DRDY_GPIO_CLK	./drivers/accgyro_lsm303dlhc.h	97;"	d
LSM303DLHC_DRDY_GPIO_PORT	./drivers/accgyro_lsm303dlhc.h	96;"	d
LSM303DLHC_DRDY_PIN	./drivers/accgyro_lsm303dlhc.h	95;"	d
LSM303DLHC_FAIL	./drivers/accgyro_lsm303dlhc.h	61;"	d
LSM303DLHC_FIFO_CTRL_REG_A	./drivers/accgyro_lsm303dlhc.h	137;"	d
LSM303DLHC_FIFO_SRC_REG_A	./drivers/accgyro_lsm303dlhc.h	138;"	d
LSM303DLHC_FLAG_TIMEOUT	./drivers/accgyro_lsm303dlhc.h	75;"	d
LSM303DLHC_FS_1_3_GA	./drivers/accgyro_lsm303dlhc.h	426;"	d
LSM303DLHC_FS_1_9_GA	./drivers/accgyro_lsm303dlhc.h	427;"	d
LSM303DLHC_FS_2_5_GA	./drivers/accgyro_lsm303dlhc.h	428;"	d
LSM303DLHC_FS_4_0_GA	./drivers/accgyro_lsm303dlhc.h	429;"	d
LSM303DLHC_FS_4_7_GA	./drivers/accgyro_lsm303dlhc.h	430;"	d
LSM303DLHC_FS_5_6_GA	./drivers/accgyro_lsm303dlhc.h	431;"	d
LSM303DLHC_FS_8_1_GA	./drivers/accgyro_lsm303dlhc.h	432;"	d
LSM303DLHC_FULLSCALE_16G	./drivers/accgyro_lsm303dlhc.h	236;"	d
LSM303DLHC_FULLSCALE_2G	./drivers/accgyro_lsm303dlhc.h	233;"	d
LSM303DLHC_FULLSCALE_4G	./drivers/accgyro_lsm303dlhc.h	234;"	d
LSM303DLHC_FULLSCALE_8G	./drivers/accgyro_lsm303dlhc.h	235;"	d
LSM303DLHC_HIGHPASSFILTER_DISABLE	./drivers/accgyro_lsm303dlhc.h	293;"	d
LSM303DLHC_HIGHPASSFILTER_ENABLE	./drivers/accgyro_lsm303dlhc.h	294;"	d
LSM303DLHC_HPFCF_16	./drivers/accgyro_lsm303dlhc.h	283;"	d
LSM303DLHC_HPFCF_32	./drivers/accgyro_lsm303dlhc.h	284;"	d
LSM303DLHC_HPFCF_64	./drivers/accgyro_lsm303dlhc.h	285;"	d
LSM303DLHC_HPFCF_8	./drivers/accgyro_lsm303dlhc.h	282;"	d
LSM303DLHC_HPF_AOI1_DISABLE	./drivers/accgyro_lsm303dlhc.h	311;"	d
LSM303DLHC_HPF_AOI1_ENABLE	./drivers/accgyro_lsm303dlhc.h	312;"	d
LSM303DLHC_HPF_AOI2_DISABLE	./drivers/accgyro_lsm303dlhc.h	320;"	d
LSM303DLHC_HPF_AOI2_ENABLE	./drivers/accgyro_lsm303dlhc.h	321;"	d
LSM303DLHC_HPF_CLICK_DISABLE	./drivers/accgyro_lsm303dlhc.h	302;"	d
LSM303DLHC_HPF_CLICK_ENABLE	./drivers/accgyro_lsm303dlhc.h	303;"	d
LSM303DLHC_HPM_AUTORESET_INT	./drivers/accgyro_lsm303dlhc.h	274;"	d
LSM303DLHC_HPM_NORMAL_MODE	./drivers/accgyro_lsm303dlhc.h	273;"	d
LSM303DLHC_HPM_NORMAL_MODE_RES	./drivers/accgyro_lsm303dlhc.h	271;"	d
LSM303DLHC_HPM_REF_SIGNAL	./drivers/accgyro_lsm303dlhc.h	272;"	d
LSM303DLHC_HR_DISABLE	./drivers/accgyro_lsm303dlhc.h	225;"	d
LSM303DLHC_HR_ENABLE	./drivers/accgyro_lsm303dlhc.h	224;"	d
LSM303DLHC_I2C	./drivers/accgyro_lsm303dlhc.h	80;"	d
LSM303DLHC_I2C_CLK	./drivers/accgyro_lsm303dlhc.h	81;"	d
LSM303DLHC_I2C_INT1_EXTI_IRQn	./drivers/accgyro_lsm303dlhc.h	109;"	d
LSM303DLHC_I2C_INT1_EXTI_LINE	./drivers/accgyro_lsm303dlhc.h	106;"	d
LSM303DLHC_I2C_INT1_EXTI_PIN_SOURCE	./drivers/accgyro_lsm303dlhc.h	108;"	d
LSM303DLHC_I2C_INT1_EXTI_PORT_SOURCE	./drivers/accgyro_lsm303dlhc.h	107;"	d
LSM303DLHC_I2C_INT1_GPIO_CLK	./drivers/accgyro_lsm303dlhc.h	105;"	d
LSM303DLHC_I2C_INT1_GPIO_PORT	./drivers/accgyro_lsm303dlhc.h	104;"	d
LSM303DLHC_I2C_INT1_PIN	./drivers/accgyro_lsm303dlhc.h	103;"	d
LSM303DLHC_I2C_INT2_EXTI_IRQn	./drivers/accgyro_lsm303dlhc.h	117;"	d
LSM303DLHC_I2C_INT2_EXTI_LINE	./drivers/accgyro_lsm303dlhc.h	114;"	d
LSM303DLHC_I2C_INT2_EXTI_PIN_SOURCE	./drivers/accgyro_lsm303dlhc.h	116;"	d
LSM303DLHC_I2C_INT2_EXTI_PORT_SOURCE	./drivers/accgyro_lsm303dlhc.h	115;"	d
LSM303DLHC_I2C_INT2_GPIO_CLK	./drivers/accgyro_lsm303dlhc.h	113;"	d
LSM303DLHC_I2C_INT2_GPIO_PORT	./drivers/accgyro_lsm303dlhc.h	112;"	d
LSM303DLHC_I2C_INT2_PIN	./drivers/accgyro_lsm303dlhc.h	111;"	d
LSM303DLHC_I2C_SCK_AF	./drivers/accgyro_lsm303dlhc.h	87;"	d
LSM303DLHC_I2C_SCK_GPIO_CLK	./drivers/accgyro_lsm303dlhc.h	85;"	d
LSM303DLHC_I2C_SCK_GPIO_PORT	./drivers/accgyro_lsm303dlhc.h	84;"	d
LSM303DLHC_I2C_SCK_PIN	./drivers/accgyro_lsm303dlhc.h	83;"	d
LSM303DLHC_I2C_SCK_SOURCE	./drivers/accgyro_lsm303dlhc.h	86;"	d
LSM303DLHC_I2C_SDA_AF	./drivers/accgyro_lsm303dlhc.h	93;"	d
LSM303DLHC_I2C_SDA_GPIO_CLK	./drivers/accgyro_lsm303dlhc.h	91;"	d
LSM303DLHC_I2C_SDA_GPIO_PORT	./drivers/accgyro_lsm303dlhc.h	90;"	d
LSM303DLHC_I2C_SDA_PIN	./drivers/accgyro_lsm303dlhc.h	89;"	d
LSM303DLHC_I2C_SDA_SOURCE	./drivers/accgyro_lsm303dlhc.h	92;"	d
LSM303DLHC_INT1INTERRUPT_DISABLE	./drivers/accgyro_lsm303dlhc.h	393;"	d
LSM303DLHC_INT1INTERRUPT_ENABLE	./drivers/accgyro_lsm303dlhc.h	394;"	d
LSM303DLHC_INT1INTERRUPT_HIGH_EDGE	./drivers/accgyro_lsm303dlhc.h	403;"	d
LSM303DLHC_INT1INTERRUPT_LOW_EDGE	./drivers/accgyro_lsm303dlhc.h	402;"	d
LSM303DLHC_INT1_CFG_A	./drivers/accgyro_lsm303dlhc.h	140;"	d
LSM303DLHC_INT1_DURATION_A	./drivers/accgyro_lsm303dlhc.h	143;"	d
LSM303DLHC_INT1_SOURCE_A	./drivers/accgyro_lsm303dlhc.h	141;"	d
LSM303DLHC_INT1_THS_A	./drivers/accgyro_lsm303dlhc.h	142;"	d
LSM303DLHC_INT2_CFG_A	./drivers/accgyro_lsm303dlhc.h	145;"	d
LSM303DLHC_INT2_DURATION_A	./drivers/accgyro_lsm303dlhc.h	148;"	d
LSM303DLHC_INT2_SOURCE_A	./drivers/accgyro_lsm303dlhc.h	146;"	d
LSM303DLHC_INT2_THS_A	./drivers/accgyro_lsm303dlhc.h	147;"	d
LSM303DLHC_IRA_REG_M	./drivers/accgyro_lsm303dlhc.h	170;"	d
LSM303DLHC_IRB_REG_M	./drivers/accgyro_lsm303dlhc.h	171;"	d
LSM303DLHC_IRC_REG_M	./drivers/accgyro_lsm303dlhc.h	172;"	d
LSM303DLHC_IT1_AOI1	./drivers/accgyro_lsm303dlhc.h	330;"	d
LSM303DLHC_IT1_AOI2	./drivers/accgyro_lsm303dlhc.h	331;"	d
LSM303DLHC_IT1_CLICK	./drivers/accgyro_lsm303dlhc.h	329;"	d
LSM303DLHC_IT1_DRY1	./drivers/accgyro_lsm303dlhc.h	332;"	d
LSM303DLHC_IT1_DRY2	./drivers/accgyro_lsm303dlhc.h	333;"	d
LSM303DLHC_IT1_OVERRUN	./drivers/accgyro_lsm303dlhc.h	335;"	d
LSM303DLHC_IT1_WTM	./drivers/accgyro_lsm303dlhc.h	334;"	d
LSM303DLHC_IT2_ACT	./drivers/accgyro_lsm303dlhc.h	347;"	d
LSM303DLHC_IT2_BOOT	./drivers/accgyro_lsm303dlhc.h	346;"	d
LSM303DLHC_IT2_CLICK	./drivers/accgyro_lsm303dlhc.h	343;"	d
LSM303DLHC_IT2_HLACTIVE	./drivers/accgyro_lsm303dlhc.h	348;"	d
LSM303DLHC_IT2_INT1	./drivers/accgyro_lsm303dlhc.h	344;"	d
LSM303DLHC_IT2_INT2	./drivers/accgyro_lsm303dlhc.h	345;"	d
LSM303DLHC_LONG_TIMEOUT	./drivers/accgyro_lsm303dlhc.h	76;"	d
LSM303DLHC_LOWPOWER_MODE	./drivers/accgyro_lsm303dlhc.h	187;"	d
LSM303DLHC_MAG_ADDRESS	./drivers/accgyro_lsm303dlhc.c	39;"	d	file:
LSM303DLHC_MOV_RECOGNITION	./drivers/accgyro_lsm303dlhc.h	358;"	d
LSM303DLHC_MR_REG_M	./drivers/accgyro_lsm303dlhc.h	161;"	d
LSM303DLHC_M_SENSITIVITY_XY_1_3Ga	./drivers/accgyro_lsm303dlhc.h	441;"	d
LSM303DLHC_M_SENSITIVITY_XY_1_9Ga	./drivers/accgyro_lsm303dlhc.h	442;"	d
LSM303DLHC_M_SENSITIVITY_XY_2_5Ga	./drivers/accgyro_lsm303dlhc.h	443;"	d
LSM303DLHC_M_SENSITIVITY_XY_4Ga	./drivers/accgyro_lsm303dlhc.h	444;"	d
LSM303DLHC_M_SENSITIVITY_XY_4_7Ga	./drivers/accgyro_lsm303dlhc.h	445;"	d
LSM303DLHC_M_SENSITIVITY_XY_5_6Ga	./drivers/accgyro_lsm303dlhc.h	446;"	d
LSM303DLHC_M_SENSITIVITY_XY_8_1Ga	./drivers/accgyro_lsm303dlhc.h	447;"	d
LSM303DLHC_M_SENSITIVITY_Z_1_3Ga	./drivers/accgyro_lsm303dlhc.h	448;"	d
LSM303DLHC_M_SENSITIVITY_Z_1_9Ga	./drivers/accgyro_lsm303dlhc.h	449;"	d
LSM303DLHC_M_SENSITIVITY_Z_2_5Ga	./drivers/accgyro_lsm303dlhc.h	450;"	d
LSM303DLHC_M_SENSITIVITY_Z_4Ga	./drivers/accgyro_lsm303dlhc.h	451;"	d
LSM303DLHC_M_SENSITIVITY_Z_4_7Ga	./drivers/accgyro_lsm303dlhc.h	452;"	d
LSM303DLHC_M_SENSITIVITY_Z_5_6Ga	./drivers/accgyro_lsm303dlhc.h	453;"	d
LSM303DLHC_M_SENSITIVITY_Z_8_1Ga	./drivers/accgyro_lsm303dlhc.h	454;"	d
LSM303DLHC_NORMAL_MODE	./drivers/accgyro_lsm303dlhc.h	186;"	d
LSM303DLHC_ODR_0_75_HZ	./drivers/accgyro_lsm303dlhc.h	411;"	d
LSM303DLHC_ODR_100_HZ	./drivers/accgyro_lsm303dlhc.h	199;"	d
LSM303DLHC_ODR_10_HZ	./drivers/accgyro_lsm303dlhc.h	196;"	d
LSM303DLHC_ODR_1344_HZ	./drivers/accgyro_lsm303dlhc.h	203;"	d
LSM303DLHC_ODR_15_HZ	./drivers/accgyro_lsm303dlhc.h	415;"	d
LSM303DLHC_ODR_1620_HZ_LP	./drivers/accgyro_lsm303dlhc.h	202;"	d
LSM303DLHC_ODR_1_5_HZ	./drivers/accgyro_lsm303dlhc.h	412;"	d
LSM303DLHC_ODR_1_HZ	./drivers/accgyro_lsm303dlhc.h	195;"	d
LSM303DLHC_ODR_200_HZ	./drivers/accgyro_lsm303dlhc.h	200;"	d
LSM303DLHC_ODR_220_HZ	./drivers/accgyro_lsm303dlhc.h	418;"	d
LSM303DLHC_ODR_25_HZ	./drivers/accgyro_lsm303dlhc.h	197;"	d
LSM303DLHC_ODR_30_HZ	./drivers/accgyro_lsm303dlhc.h	416;"	d
LSM303DLHC_ODR_3_0_HZ	./drivers/accgyro_lsm303dlhc.h	413;"	d
LSM303DLHC_ODR_400_HZ	./drivers/accgyro_lsm303dlhc.h	201;"	d
LSM303DLHC_ODR_50_HZ	./drivers/accgyro_lsm303dlhc.h	198;"	d
LSM303DLHC_ODR_75_HZ	./drivers/accgyro_lsm303dlhc.h	417;"	d
LSM303DLHC_ODR_7_5_HZ	./drivers/accgyro_lsm303dlhc.h	414;"	d
LSM303DLHC_OK	./drivers/accgyro_lsm303dlhc.h	60;"	d
LSM303DLHC_OR_COMBINATION	./drivers/accgyro_lsm303dlhc.h	356;"	d
LSM303DLHC_OUT_X_H_A	./drivers/accgyro_lsm303dlhc.h	132;"	d
LSM303DLHC_OUT_X_H_M	./drivers/accgyro_lsm303dlhc.h	162;"	d
LSM303DLHC_OUT_X_L_A	./drivers/accgyro_lsm303dlhc.h	131;"	d
LSM303DLHC_OUT_X_L_M	./drivers/accgyro_lsm303dlhc.h	163;"	d
LSM303DLHC_OUT_Y_H_A	./drivers/accgyro_lsm303dlhc.h	134;"	d
LSM303DLHC_OUT_Y_H_M	./drivers/accgyro_lsm303dlhc.h	166;"	d
LSM303DLHC_OUT_Y_L_A	./drivers/accgyro_lsm303dlhc.h	133;"	d
LSM303DLHC_OUT_Y_L_M	./drivers/accgyro_lsm303dlhc.h	167;"	d
LSM303DLHC_OUT_Z_H_A	./drivers/accgyro_lsm303dlhc.h	136;"	d
LSM303DLHC_OUT_Z_H_M	./drivers/accgyro_lsm303dlhc.h	164;"	d
LSM303DLHC_OUT_Z_L_A	./drivers/accgyro_lsm303dlhc.h	135;"	d
LSM303DLHC_OUT_Z_L_M	./drivers/accgyro_lsm303dlhc.h	165;"	d
LSM303DLHC_POS_RECOGNITION	./drivers/accgyro_lsm303dlhc.h	359;"	d
LSM303DLHC_REFERENCE_A	./drivers/accgyro_lsm303dlhc.h	129;"	d
LSM303DLHC_SINGLE_CONVERSION	./drivers/accgyro_lsm303dlhc.h	463;"	d
LSM303DLHC_SLEEP	./drivers/accgyro_lsm303dlhc.h	464;"	d
LSM303DLHC_SR_REG_M	./drivers/accgyro_lsm303dlhc.h	169;"	d
LSM303DLHC_STATUS_REG_A	./drivers/accgyro_lsm303dlhc.h	130;"	d
LSM303DLHC_TEMPSENSOR_DISABLE	./drivers/accgyro_lsm303dlhc.h	473;"	d
LSM303DLHC_TEMPSENSOR_ENABLE	./drivers/accgyro_lsm303dlhc.h	472;"	d
LSM303DLHC_TEMP_OUT_H_M	./drivers/accgyro_lsm303dlhc.h	174;"	d
LSM303DLHC_TEMP_OUT_L_M	./drivers/accgyro_lsm303dlhc.h	175;"	d
LSM303DLHC_TIME_LATENCY_A	./drivers/accgyro_lsm303dlhc.h	155;"	d
LSM303DLHC_TIME_LIMIT_A	./drivers/accgyro_lsm303dlhc.h	154;"	d
LSM303DLHC_TIME_WINDOW_A	./drivers/accgyro_lsm303dlhc.h	156;"	d
LSM303DLHC_X_DOUBLE_CLICK	./drivers/accgyro_lsm303dlhc.h	384;"	d
LSM303DLHC_X_ENABLE	./drivers/accgyro_lsm303dlhc.h	212;"	d
LSM303DLHC_X_HIGH	./drivers/accgyro_lsm303dlhc.h	371;"	d
LSM303DLHC_X_LOW	./drivers/accgyro_lsm303dlhc.h	372;"	d
LSM303DLHC_X_SINGLE_CLICK	./drivers/accgyro_lsm303dlhc.h	385;"	d
LSM303DLHC_Y_DOUBLE_CLICK	./drivers/accgyro_lsm303dlhc.h	382;"	d
LSM303DLHC_Y_ENABLE	./drivers/accgyro_lsm303dlhc.h	213;"	d
LSM303DLHC_Y_HIGH	./drivers/accgyro_lsm303dlhc.h	369;"	d
LSM303DLHC_Y_LOW	./drivers/accgyro_lsm303dlhc.h	370;"	d
LSM303DLHC_Y_SINGLE_CLICK	./drivers/accgyro_lsm303dlhc.h	383;"	d
LSM303DLHC_Z_DOUBLE_CLICK	./drivers/accgyro_lsm303dlhc.h	380;"	d
LSM303DLHC_Z_ENABLE	./drivers/accgyro_lsm303dlhc.h	214;"	d
LSM303DLHC_Z_HIGH	./drivers/accgyro_lsm303dlhc.h	367;"	d
LSM303DLHC_Z_LOW	./drivers/accgyro_lsm303dlhc.h	368;"	d
LSM303DLHC_Z_SINGLE_CLICK	./drivers/accgyro_lsm303dlhc.h	381;"	d
LeadFilter_PARAM	./flight/navigation.c	/^} LeadFilter_PARAM;$/;"	t	typeref:struct:__anon4	file:
Leave_LowPowerMode	./vcp/hw_config.c	/^void Leave_LowPowerMode(void)$/;"	f
LoopCopyDataInit	./startup/startup_stm32f10x_hd_gcc.S	/^LoopCopyDataInit:$/;"	l
LoopCopyDataInit	./startup/startup_stm32f10x_md_gcc.S	/^LoopCopyDataInit:$/;"	l
LoopCopyDataInit	./startup/startup_stm32f30x_md_gcc.S	/^LoopCopyDataInit:$/;"	l
LoopFillZerobss	./startup/startup_stm32f10x_hd_gcc.S	/^LoopFillZerobss:$/;"	l
LoopFillZerobss	./startup/startup_stm32f10x_md_gcc.S	/^LoopFillZerobss:$/;"	l
LoopFillZerobss	./startup/startup_stm32f30x_md_gcc.S	/^LoopFillZerobss:$/;"	l
LoopForever	./startup/startup_stm32f10x_hd_gcc.S	/^LoopForever:$/;"	l
LoopForever	./startup/startup_stm32f10x_md_gcc.S	/^LoopForever:$/;"	l
LoopForever	./startup/startup_stm32f30x_md_gcc.S	/^LoopForever:$/;"	l
M25P16_CS_GPIO	./target/CC3D/target.h	38;"	d
M25P16_CS_GPIO	./target/NAZE/target.h	61;"	d
M25P16_CS_GPIO	./target/SPRACINGF3/target.h	121;"	d
M25P16_CS_GPIO	./target/SUPERBEE/target.h	61;"	d
M25P16_CS_PIN	./target/CC3D/target.h	39;"	d
M25P16_CS_PIN	./target/NAZE/target.h	62;"	d
M25P16_CS_PIN	./target/SPRACINGF3/target.h	122;"	d
M25P16_CS_PIN	./target/SUPERBEE/target.h	62;"	d
M25P16_INSTRUCTION_BULK_ERASE	./drivers/flash_m25p16.c	36;"	d	file:
M25P16_INSTRUCTION_PAGE_PROGRAM	./drivers/flash_m25p16.c	34;"	d	file:
M25P16_INSTRUCTION_RDID	./drivers/flash_m25p16.c	28;"	d	file:
M25P16_INSTRUCTION_RDID	./target/NAZE/hardware_revision.c	60;"	d	file:
M25P16_INSTRUCTION_RDID	./target/SUPERBEE/hardware_revision.c	60;"	d	file:
M25P16_INSTRUCTION_READ_BYTES	./drivers/flash_m25p16.c	29;"	d	file:
M25P16_INSTRUCTION_READ_STATUS_REG	./drivers/flash_m25p16.c	30;"	d	file:
M25P16_INSTRUCTION_SECTOR_ERASE	./drivers/flash_m25p16.c	35;"	d	file:
M25P16_INSTRUCTION_WRITE_DISABLE	./drivers/flash_m25p16.c	33;"	d	file:
M25P16_INSTRUCTION_WRITE_ENABLE	./drivers/flash_m25p16.c	32;"	d	file:
M25P16_INSTRUCTION_WRITE_STATUS_REG	./drivers/flash_m25p16.c	31;"	d	file:
M25P16_SPI_INSTANCE	./target/CC3D/target.h	40;"	d
M25P16_SPI_INSTANCE	./target/NAZE/target.h	63;"	d
M25P16_SPI_INSTANCE	./target/SPRACINGF3/target.h	123;"	d
M25P16_SPI_INSTANCE	./target/SUPERBEE/target.h	63;"	d
M25P16_STATUS_FLAG_WRITE_ENABLED	./drivers/flash_m25p16.c	39;"	d	file:
M25P16_STATUS_FLAG_WRITE_IN_PROGRESS	./drivers/flash_m25p16.c	38;"	d	file:
MAG	./target/CC3D/target.h	63;"	d
MAG	./target/CHEBUZZF3/target.h	62;"	d
MAG	./target/CJMCU/target.h	43;"	d
MAG	./target/EUSTM32F103RC/target.h	68;"	d
MAG	./target/NAZE/target.h	108;"	d
MAG	./target/OLIMEXINO/target.h	63;"	d
MAG	./target/PORT103R/target.h	79;"	d
MAG	./target/SPARKY/target.h	45;"	d
MAG	./target/SPRACINGF3/target.h	53;"	d
MAG	./target/STM32F3DISCOVERY/target.h	55;"	d
MAG	./target/SUPERBEE/target.h	116;"	d
MAG_ADDRESS	./drivers/compass_hmc5883l.c	105;"	d	file:
MAG_AK8975	./sensors/compass.h	/^    MAG_AK8975 = 3$/;"	e	enum:__anon118
MAG_AK8975_ALIGN	./target/ALIENWIIF3/target.h	53;"	d
MAG_AK8975_ALIGN	./target/CHEBUZZF3/target.h	65;"	d
MAG_AK8975_ALIGN	./target/EUSTM32F103RC/target.h	72;"	d
MAG_AK8975_ALIGN	./target/SPARKY/target.h	48;"	d
MAG_DATA_READY_EXTI_Handler	./drivers/compass_hmc5883l.c	/^void MAG_DATA_READY_EXTI_Handler(void)$/;"	f
MAG_DATA_REGISTER	./drivers/compass_hmc5883l.c	106;"	d	file:
MAG_DEFAULT	./sensors/compass.h	/^    MAG_DEFAULT = 0,$/;"	e	enum:__anon118
MAG_HMC5883	./sensors/compass.h	/^    MAG_HMC5883 = 2,$/;"	e	enum:__anon118
MAG_HMC5883_ALIGN	./target/NAZE/target.h	111;"	d
MAG_HMC5883_ALIGN	./target/SPRACINGF3/target.h	56;"	d
MAG_HMC5883_ALIGN	./target/SUPERBEE/target.h	119;"	d
MAG_I2C_ADDRESS	./drivers/accgyro_lsm303dlhc.h	181;"	d
MAG_MAX	./sensors/compass.h	28;"	d
MAG_MODE	./config/runtime_config.h	/^    MAG_MODE        = (1 << 2),$/;"	e	enum:__anon19
MAG_NONE	./sensors/compass.h	/^    MAG_NONE = 1,$/;"	e	enum:__anon118
MAP_TO_MOTOR_OUTPUT	./drivers/pwm_mapping.c	/^    MAP_TO_MOTOR_OUTPUT,$/;"	e	enum:__anon35	file:
MAP_TO_PPM_INPUT	./drivers/pwm_mapping.c	/^    MAP_TO_PPM_INPUT = 1,$/;"	e	enum:__anon35	file:
MAP_TO_PWM_INPUT	./drivers/pwm_mapping.c	/^    MAP_TO_PWM_INPUT,$/;"	e	enum:__anon35	file:
MAP_TO_SERVO_OUTPUT	./drivers/pwm_mapping.c	/^    MAP_TO_SERVO_OUTPUT,$/;"	e	enum:__anon35	file:
MARK_ADJUSTMENT_FUNCTION_AS_BUSY	./io/rc_controls.c	308;"	d	file:
MARK_ADJUSTMENT_FUNCTION_AS_READY	./io/rc_controls.c	309;"	d	file:
MASS_MEMORY_START	./vcp/hw_config.h	47;"	d
MASTER_VALUE	./io/serial_cli.c	/^    MASTER_VALUE = (1 << 6),$/;"	e	enum:__anon99	file:
MAX	./common/maths.h	30;"	d
MAX_ADJUSTMENT_RANGE_COUNT	./io/rc_controls.h	230;"	d
MAX_AUX_CHANNEL_COUNT	./rx/rx.h	60;"	d
MAX_CONTROL_RATE_PROFILE_COUNT	./config/config.h	21;"	d
MAX_INPUTS	./drivers/pwm_mapping.h	34;"	d
MAX_LED_STRIP_LENGTH	./io/ledstrip.h	20;"	d
MAX_MAPPABLE_RX_INPUTS	./rx/rx.h	74;"	d
MAX_MISSED_PWM_EVENTS	./drivers/pwm_rx.c	229;"	d	file:
MAX_MODE_ACTIVATION_CONDITION_COUNT	./io/rc_controls.h	88;"	d
MAX_MODE_RANGE_STEP	./io/rc_controls.h	97;"	d
MAX_MOTORS	./drivers/pwm_mapping.h	23;"	d
MAX_MSP_PORT_COUNT	./io/serial_msp.h	24;"	d
MAX_MULTI_BEEPS	./io/beeper.c	49;"	d	file:
MAX_PROFILE_COUNT	./config/config.h	20;"	d
MAX_PWM_MOTORS	./drivers/pwm_mapping.h	20;"	d
MAX_PWM_OUTPUT_PORTS	./drivers/pwm_mapping.h	25;"	d
MAX_PWM_SERVOS	./drivers/pwm_mapping.h	21;"	d
MAX_SENSORS_TO_DETECT	./sensors/sensors.h	27;"	d
MAX_SERVOS	./drivers/pwm_mapping.h	24;"	d
MAX_SIMULTANEOUS_ADJUSTMENT_COUNT	./io/rc_controls.h	227;"	d
MAX_SOFTSERIAL_PORTS	./drivers/serial_softserial.c	43;"	d	file:
MAX_SOFTSERIAL_PORTS	./drivers/serial_softserial.c	45;"	d	file:
MAX_SUPPORTED_MOTORS	./flight/mixer.h	20;"	d
MAX_SUPPORTED_RC_CHANNEL_COUNT	./rx/rx.h	57;"	d
MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT	./rx/rx.h	56;"	d
MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT	./rx/rx.h	55;"	d
MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT	./rx/rx.h	65;"	d
MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT	./rx/rx.h	67;"	d
MAX_SUPPORTED_SERVOS	./flight/mixer.h	21;"	d
MICROSECONDS_IN_A_SECOND	./io/display.c	69;"	d	file:
MILLISECONDS_IN_A_SECOND	./telemetry/hott.c	89;"	d	file:
MIN	./common/maths.h	29;"	d
MIN_CHANNELS_BEFORE_PPM_FRAME_CONSIDERED_VALID	./drivers/pwm_rx.c	122;"	d	file:
MIN_MODE_RANGE_STEP	./io/rc_controls.h	96;"	d
MIXER_AIRPLANE	./flight/mixer.h	/^    MIXER_AIRPLANE = 14,        \/\/ airplane \/ singlecopter \/ dualcopter (not yet properly supported)$/;"	e	enum:mixerMode
MIXER_ATAIL4	./flight/mixer.h	/^    MIXER_ATAIL4 = 22,$/;"	e	enum:mixerMode
MIXER_BI	./flight/mixer.h	/^    MIXER_BI = 4,$/;"	e	enum:mixerMode
MIXER_CUSTOM	./flight/mixer.h	/^    MIXER_CUSTOM = 23$/;"	e	enum:mixerMode
MIXER_DUALCOPTER	./flight/mixer.h	/^    MIXER_DUALCOPTER = 20,$/;"	e	enum:mixerMode
MIXER_FLYING_WING	./flight/mixer.h	/^    MIXER_FLYING_WING = 8,$/;"	e	enum:mixerMode
MIXER_GIMBAL	./flight/mixer.h	/^    MIXER_GIMBAL = 5,$/;"	e	enum:mixerMode
MIXER_HELI_120_CCPM	./flight/mixer.h	/^    MIXER_HELI_120_CCPM = 15,$/;"	e	enum:mixerMode
MIXER_HELI_90_DEG	./flight/mixer.h	/^    MIXER_HELI_90_DEG = 16,$/;"	e	enum:mixerMode
MIXER_HEX6	./flight/mixer.h	/^    MIXER_HEX6 = 7,$/;"	e	enum:mixerMode
MIXER_HEX6H	./flight/mixer.h	/^    MIXER_HEX6H = 18,$/;"	e	enum:mixerMode
MIXER_HEX6X	./flight/mixer.h	/^    MIXER_HEX6X = 10,$/;"	e	enum:mixerMode
MIXER_OCTOFLATP	./flight/mixer.h	/^    MIXER_OCTOFLATP = 12,$/;"	e	enum:mixerMode
MIXER_OCTOFLATX	./flight/mixer.h	/^    MIXER_OCTOFLATX = 13,$/;"	e	enum:mixerMode
MIXER_OCTOX8	./flight/mixer.h	/^    MIXER_OCTOX8 = 11,$/;"	e	enum:mixerMode
MIXER_PPM_TO_SERVO	./flight/mixer.h	/^    MIXER_PPM_TO_SERVO = 19,    \/\/ PPM -> servo relay$/;"	e	enum:mixerMode
MIXER_QUADP	./flight/mixer.h	/^    MIXER_QUADP = 2,$/;"	e	enum:mixerMode
MIXER_QUADX	./flight/mixer.h	/^    MIXER_QUADX = 3,$/;"	e	enum:mixerMode
MIXER_SINGLECOPTER	./flight/mixer.h	/^    MIXER_SINGLECOPTER = 21,$/;"	e	enum:mixerMode
MIXER_TRI	./flight/mixer.h	/^    MIXER_TRI = 1,$/;"	e	enum:mixerMode
MIXER_VTAIL4	./flight/mixer.h	/^    MIXER_VTAIL4 = 17,$/;"	e	enum:mixerMode
MIXER_Y4	./flight/mixer.h	/^    MIXER_Y4 = 9,$/;"	e	enum:mixerMode
MIXER_Y6	./flight/mixer.h	/^    MIXER_Y6 = 6,$/;"	e	enum:mixerMode
MMA8451_DEVICE_SIGNATURE	./drivers/accgyro_mma845x.c	37;"	d	file:
MMA8452_ADDRESS	./drivers/accgyro_mma845x.c	34;"	d	file:
MMA8452_CTRL_REG1	./drivers/accgyro_mma845x.c	44;"	d	file:
MMA8452_CTRL_REG1_ACTIVE	./drivers/accgyro_mma845x.c	76;"	d	file:
MMA8452_CTRL_REG1_LNOISE	./drivers/accgyro_mma845x.c	75;"	d	file:
MMA8452_CTRL_REG2	./drivers/accgyro_mma845x.c	45;"	d	file:
MMA8452_CTRL_REG2_B0_MODS0	./drivers/accgyro_mma845x.c	65;"	d	file:
MMA8452_CTRL_REG2_B1_MODS1	./drivers/accgyro_mma845x.c	64;"	d	file:
MMA8452_CTRL_REG2_B2_SLPE	./drivers/accgyro_mma845x.c	63;"	d	file:
MMA8452_CTRL_REG2_B3_SMODS0	./drivers/accgyro_mma845x.c	62;"	d	file:
MMA8452_CTRL_REG2_B4_SMODS1	./drivers/accgyro_mma845x.c	61;"	d	file:
MMA8452_CTRL_REG2_B6_RST	./drivers/accgyro_mma845x.c	60;"	d	file:
MMA8452_CTRL_REG2_B7_ST	./drivers/accgyro_mma845x.c	59;"	d	file:
MMA8452_CTRL_REG2_MODS_HR	./drivers/accgyro_mma845x.c	68;"	d	file:
MMA8452_CTRL_REG2_MODS_LNLP	./drivers/accgyro_mma845x.c	69;"	d	file:
MMA8452_CTRL_REG2_MODS_LP	./drivers/accgyro_mma845x.c	67;"	d	file:
MMA8452_CTRL_REG2_MODS_NOR	./drivers/accgyro_mma845x.c	70;"	d	file:
MMA8452_CTRL_REG3	./drivers/accgyro_mma845x.c	46;"	d	file:
MMA8452_CTRL_REG3_IPOL	./drivers/accgyro_mma845x.c	72;"	d	file:
MMA8452_CTRL_REG4	./drivers/accgyro_mma845x.c	47;"	d	file:
MMA8452_CTRL_REG4_INT_EN_DRDY	./drivers/accgyro_mma845x.c	73;"	d	file:
MMA8452_CTRL_REG5	./drivers/accgyro_mma845x.c	48;"	d	file:
MMA8452_DEVICE_SIGNATURE	./drivers/accgyro_mma845x.c	36;"	d	file:
MMA8452_FS_RANGE_2G	./drivers/accgyro_mma845x.c	52;"	d	file:
MMA8452_FS_RANGE_4G	./drivers/accgyro_mma845x.c	51;"	d	file:
MMA8452_FS_RANGE_8G	./drivers/accgyro_mma845x.c	50;"	d	file:
MMA8452_HPF_CUTOFF_LV1	./drivers/accgyro_mma845x.c	54;"	d	file:
MMA8452_HPF_CUTOFF_LV2	./drivers/accgyro_mma845x.c	55;"	d	file:
MMA8452_HPF_CUTOFF_LV3	./drivers/accgyro_mma845x.c	56;"	d	file:
MMA8452_HPF_CUTOFF_LV4	./drivers/accgyro_mma845x.c	57;"	d	file:
MMA8452_HP_FILTER_CUTOFF	./drivers/accgyro_mma845x.c	43;"	d	file:
MMA8452_OUT_X_MSB	./drivers/accgyro_mma845x.c	40;"	d	file:
MMA8452_STATUS	./drivers/accgyro_mma845x.c	39;"	d	file:
MMA8452_WHO_AM_I	./drivers/accgyro_mma845x.c	41;"	d	file:
MMA8452_XYZ_DATA_CFG	./drivers/accgyro_mma845x.c	42;"	d	file:
MOCAP	./target/SUPERBEE/target.h	106;"	d
MOCAP_MODE	./config/runtime_config.h	/^    MOCAP_MODE      = (1 << 10),$/;"	e	enum:__anon19
MODE_ACTIVE	./drivers/accgyro_l3gd20.c	45;"	d	file:
MODE_MASK	./drivers/gpio_stm32f30x.c	31;"	d	file:
MODE_OFFSET	./drivers/gpio_stm32f30x.c	27;"	d	file:
MODE_RX	./drivers/serial.h	/^    MODE_RX = 1 << 0,$/;"	e	enum:portMode_t
MODE_RXTX	./drivers/serial.h	/^    MODE_RXTX = MODE_RX | MODE_TX$/;"	e	enum:portMode_t
MODE_STEP_TO_CHANNEL_VALUE	./io/rc_controls.h	93;"	d
MODE_TX	./drivers/serial.h	/^    MODE_TX = 1 << 1,$/;"	e	enum:portMode_t
MPU3050_ADDRESS	./drivers/accgyro_mpu3050.c	35;"	d	file:
MPU3050_CLK_SEL_PLL_GX	./drivers/accgyro_mpu3050.c	56;"	d	file:
MPU3050_DLPF_10HZ	./drivers/accgyro_mpu3050.c	48;"	d	file:
MPU3050_DLPF_188HZ	./drivers/accgyro_mpu3050.c	52;"	d	file:
MPU3050_DLPF_20HZ	./drivers/accgyro_mpu3050.c	49;"	d	file:
MPU3050_DLPF_256HZ	./drivers/accgyro_mpu3050.c	53;"	d	file:
MPU3050_DLPF_42HZ	./drivers/accgyro_mpu3050.c	50;"	d	file:
MPU3050_DLPF_98HZ	./drivers/accgyro_mpu3050.c	51;"	d	file:
MPU3050_DLPF_FS_SYNC	./drivers/accgyro_mpu3050.c	39;"	d	file:
MPU3050_FS_SEL_2000DPS	./drivers/accgyro_mpu3050.c	47;"	d	file:
MPU3050_GYRO_OUT	./drivers/accgyro_mpu3050.c	42;"	d	file:
MPU3050_INT_CFG	./drivers/accgyro_mpu3050.c	40;"	d	file:
MPU3050_PWR_MGM	./drivers/accgyro_mpu3050.c	44;"	d	file:
MPU3050_SMPLRT_DIV	./drivers/accgyro_mpu3050.c	38;"	d	file:
MPU3050_TEMP_OUT	./drivers/accgyro_mpu3050.c	41;"	d	file:
MPU3050_USER_CTRL	./drivers/accgyro_mpu3050.c	43;"	d	file:
MPU3050_USER_RESET	./drivers/accgyro_mpu3050.c	55;"	d	file:
MPU6000ES_REV_C4	./drivers/accgyro_spi_mpu6000.c	112;"	d	file:
MPU6000ES_REV_C5	./drivers/accgyro_spi_mpu6000.c	113;"	d	file:
MPU6000ES_REV_D6	./drivers/accgyro_spi_mpu6000.c	114;"	d	file:
MPU6000ES_REV_D7	./drivers/accgyro_spi_mpu6000.c	115;"	d	file:
MPU6000ES_REV_D8	./drivers/accgyro_spi_mpu6000.c	116;"	d	file:
MPU6000_ACCEL_CONFIG	./drivers/accgyro_spi_mpu6000.c	48;"	d	file:
MPU6000_ACCEL_XOUT_H	./drivers/accgyro_spi_mpu6000.c	53;"	d	file:
MPU6000_ACCEL_XOUT_L	./drivers/accgyro_spi_mpu6000.c	54;"	d	file:
MPU6000_ACCEL_YOUT_H	./drivers/accgyro_spi_mpu6000.c	55;"	d	file:
MPU6000_ACCEL_YOUT_L	./drivers/accgyro_spi_mpu6000.c	56;"	d	file:
MPU6000_ACCEL_ZOUT_H	./drivers/accgyro_spi_mpu6000.c	57;"	d	file:
MPU6000_ACCEL_ZOUT_L	./drivers/accgyro_spi_mpu6000.c	58;"	d	file:
MPU6000_CONFIG	./drivers/accgyro_spi_mpu6000.h	4;"	d
MPU6000_CS_GPIO	./target/CC3D/target.h	34;"	d
MPU6000_CS_GPIO	./target/EUSTM32F103RC/target.h	34;"	d
MPU6000_CS_GPIO	./target/PORT103R/target.h	49;"	d
MPU6000_CS_PIN	./target/CC3D/target.h	35;"	d
MPU6000_CS_PIN	./target/EUSTM32F103RC/target.h	35;"	d
MPU6000_CS_PIN	./target/PORT103R/target.h	50;"	d
MPU6000_FIFO_COUNTH	./drivers/accgyro_spi_mpu6000.c	71;"	d	file:
MPU6000_FIFO_COUNTL	./drivers/accgyro_spi_mpu6000.c	72;"	d	file:
MPU6000_FIFO_EN	./drivers/accgyro_spi_mpu6000.c	49;"	d	file:
MPU6000_FIFO_R_W	./drivers/accgyro_spi_mpu6000.c	73;"	d	file:
MPU6000_GYRO_CONFIG	./drivers/accgyro_spi_mpu6000.c	47;"	d	file:
MPU6000_GYRO_XOUT_H	./drivers/accgyro_spi_mpu6000.c	61;"	d	file:
MPU6000_GYRO_XOUT_L	./drivers/accgyro_spi_mpu6000.c	62;"	d	file:
MPU6000_GYRO_YOUT_H	./drivers/accgyro_spi_mpu6000.c	63;"	d	file:
MPU6000_GYRO_YOUT_L	./drivers/accgyro_spi_mpu6000.c	64;"	d	file:
MPU6000_GYRO_ZOUT_H	./drivers/accgyro_spi_mpu6000.c	65;"	d	file:
MPU6000_GYRO_ZOUT_L	./drivers/accgyro_spi_mpu6000.c	66;"	d	file:
MPU6000_INT_ENABLE	./drivers/accgyro_spi_mpu6000.c	51;"	d	file:
MPU6000_INT_PIN_CFG	./drivers/accgyro_spi_mpu6000.c	50;"	d	file:
MPU6000_INT_STATUS	./drivers/accgyro_spi_mpu6000.c	52;"	d	file:
MPU6000_PRODUCT_ID	./drivers/accgyro_spi_mpu6000.c	45;"	d	file:
MPU6000_PWR_MGMT_1	./drivers/accgyro_spi_mpu6000.c	69;"	d	file:
MPU6000_PWR_MGMT_2	./drivers/accgyro_spi_mpu6000.c	70;"	d	file:
MPU6000_REV_C4	./drivers/accgyro_spi_mpu6000.c	117;"	d	file:
MPU6000_REV_C5	./drivers/accgyro_spi_mpu6000.c	118;"	d	file:
MPU6000_REV_D10	./drivers/accgyro_spi_mpu6000.c	123;"	d	file:
MPU6000_REV_D6	./drivers/accgyro_spi_mpu6000.c	119;"	d	file:
MPU6000_REV_D7	./drivers/accgyro_spi_mpu6000.c	120;"	d	file:
MPU6000_REV_D8	./drivers/accgyro_spi_mpu6000.c	121;"	d	file:
MPU6000_REV_D9	./drivers/accgyro_spi_mpu6000.c	122;"	d	file:
MPU6000_SIGNAL_PATH_RESET	./drivers/accgyro_spi_mpu6000.c	68;"	d	file:
MPU6000_SMPLRT_DIV	./drivers/accgyro_spi_mpu6000.c	46;"	d	file:
MPU6000_SPI_INSTANCE	./target/CC3D/target.h	36;"	d
MPU6000_SPI_INSTANCE	./target/EUSTM32F103RC/target.h	36;"	d
MPU6000_SPI_INSTANCE	./target/PORT103R/target.h	51;"	d
MPU6000_TEMP_OUT_H	./drivers/accgyro_spi_mpu6000.c	59;"	d	file:
MPU6000_TEMP_OUT_L	./drivers/accgyro_spi_mpu6000.c	60;"	d	file:
MPU6000_USER_CTRL	./drivers/accgyro_spi_mpu6000.c	67;"	d	file:
MPU6000_WHOAMI	./drivers/accgyro_spi_mpu6000.c	74;"	d	file:
MPU6000_WHO_AM_I_CONST	./drivers/accgyro_spi_mpu6000.h	13;"	d
MPU6050_ADDRESS	./drivers/accgyro_mpu6050.c	42;"	d	file:
MPU6050_SMPLRT_DIV	./drivers/accgyro_mpu6050.c	141;"	d	file:
MPU6500_BIT_RESET	./drivers/accgyro_spi_mpu6500.h	31;"	d
MPU6500_CS_GPIO	./target/EUSTM32F103RC/target.h	38;"	d
MPU6500_CS_GPIO	./target/NAZE/target.h	65;"	d
MPU6500_CS_GPIO	./target/PORT103R/target.h	53;"	d
MPU6500_CS_GPIO	./target/SUPERBEE/target.h	65;"	d
MPU6500_CS_PIN	./target/EUSTM32F103RC/target.h	39;"	d
MPU6500_CS_PIN	./target/NAZE/target.h	66;"	d
MPU6500_CS_PIN	./target/PORT103R/target.h	54;"	d
MPU6500_CS_PIN	./target/SUPERBEE/target.h	66;"	d
MPU6500_RA_ACCEL_CFG	./drivers/accgyro_spi_mpu6500.h	25;"	d
MPU6500_RA_ACCEL_XOUT_H	./drivers/accgyro_spi_mpu6500.h	19;"	d
MPU6500_RA_BANK_SEL	./drivers/accgyro_spi_mpu6500.h	21;"	d
MPU6500_RA_GYRO_CFG	./drivers/accgyro_spi_mpu6500.h	23;"	d
MPU6500_RA_GYRO_XOUT_H	./drivers/accgyro_spi_mpu6500.h	20;"	d
MPU6500_RA_LPF	./drivers/accgyro_spi_mpu6500.h	26;"	d
MPU6500_RA_MEM_RW	./drivers/accgyro_spi_mpu6500.h	22;"	d
MPU6500_RA_PWR_MGMT_1	./drivers/accgyro_spi_mpu6500.h	24;"	d
MPU6500_RA_RATE_DIV	./drivers/accgyro_spi_mpu6500.h	27;"	d
MPU6500_RA_WHOAMI	./drivers/accgyro_spi_mpu6500.h	18;"	d
MPU6500_SPI_INSTANCE	./target/EUSTM32F103RC/target.h	40;"	d
MPU6500_SPI_INSTANCE	./target/NAZE/target.h	67;"	d
MPU6500_SPI_INSTANCE	./target/PORT103R/target.h	55;"	d
MPU6500_SPI_INSTANCE	./target/SUPERBEE/target.h	67;"	d
MPU6500_WHO_AM_I_CONST	./drivers/accgyro_spi_mpu6500.h	29;"	d
MPU_6050_FULL_RESOLUTION	./drivers/accgyro_mpu6050.c	/^    MPU_6050_FULL_RESOLUTION$/;"	e	enum:__anon40	file:
MPU_6050_HALF_RESOLUTION	./drivers/accgyro_mpu6050.c	/^    MPU_6050_HALF_RESOLUTION,$/;"	e	enum:__anon40	file:
MPU_CLK_SEL_PLLGYROX	./drivers/accgyro_spi_mpu6000.c	80;"	d	file:
MPU_CLK_SEL_PLLGYROZ	./drivers/accgyro_spi_mpu6000.c	81;"	d	file:
MPU_DATA_READY_EXTI_Handler	./drivers/accgyro_mpu6050.c	/^void MPU_DATA_READY_EXTI_Handler(void)$/;"	f
MPU_EXT_SYNC_GYROX	./drivers/accgyro_spi_mpu6000.c	82;"	d	file:
MPU_RA_ACCEL_CONFIG	./drivers/accgyro_mpu6050.c	71;"	d	file:
MPU_RA_ACCEL_XOUT_H	./drivers/accgyro_mpu6050.c	102;"	d	file:
MPU_RA_ACCEL_XOUT_L	./drivers/accgyro_mpu6050.c	103;"	d	file:
MPU_RA_ACCEL_YOUT_H	./drivers/accgyro_mpu6050.c	104;"	d	file:
MPU_RA_ACCEL_YOUT_L	./drivers/accgyro_mpu6050.c	105;"	d	file:
MPU_RA_ACCEL_ZOUT_H	./drivers/accgyro_mpu6050.c	106;"	d	file:
MPU_RA_ACCEL_ZOUT_L	./drivers/accgyro_mpu6050.c	107;"	d	file:
MPU_RA_BANK_SEL	./drivers/accgyro_mpu6050.c	128;"	d	file:
MPU_RA_CONFIG	./drivers/accgyro_mpu6050.c	69;"	d	file:
MPU_RA_DMP_CFG_1	./drivers/accgyro_mpu6050.c	131;"	d	file:
MPU_RA_DMP_CFG_2	./drivers/accgyro_mpu6050.c	132;"	d	file:
MPU_RA_DMP_INT_STATUS	./drivers/accgyro_mpu6050.c	100;"	d	file:
MPU_RA_EXT_SENS_DATA_00	./drivers/accgyro_mpu6050.c	116;"	d	file:
MPU_RA_FF_DUR	./drivers/accgyro_mpu6050.c	73;"	d	file:
MPU_RA_FF_THR	./drivers/accgyro_mpu6050.c	72;"	d	file:
MPU_RA_FIFO_COUNTH	./drivers/accgyro_mpu6050.c	133;"	d	file:
MPU_RA_FIFO_COUNTL	./drivers/accgyro_mpu6050.c	134;"	d	file:
MPU_RA_FIFO_EN	./drivers/accgyro_mpu6050.c	78;"	d	file:
MPU_RA_FIFO_R_W	./drivers/accgyro_mpu6050.c	135;"	d	file:
MPU_RA_GYRO_CONFIG	./drivers/accgyro_mpu6050.c	70;"	d	file:
MPU_RA_GYRO_XOUT_H	./drivers/accgyro_mpu6050.c	110;"	d	file:
MPU_RA_GYRO_XOUT_L	./drivers/accgyro_mpu6050.c	111;"	d	file:
MPU_RA_GYRO_YOUT_H	./drivers/accgyro_mpu6050.c	112;"	d	file:
MPU_RA_GYRO_YOUT_L	./drivers/accgyro_mpu6050.c	113;"	d	file:
MPU_RA_GYRO_ZOUT_H	./drivers/accgyro_mpu6050.c	114;"	d	file:
MPU_RA_GYRO_ZOUT_L	./drivers/accgyro_mpu6050.c	115;"	d	file:
MPU_RA_I2C_MST_CTRL	./drivers/accgyro_mpu6050.c	79;"	d	file:
MPU_RA_I2C_MST_DELAY_CTRL	./drivers/accgyro_mpu6050.c	122;"	d	file:
MPU_RA_I2C_MST_STATUS	./drivers/accgyro_mpu6050.c	97;"	d	file:
MPU_RA_I2C_SLV0_ADDR	./drivers/accgyro_mpu6050.c	80;"	d	file:
MPU_RA_I2C_SLV0_CTRL	./drivers/accgyro_mpu6050.c	82;"	d	file:
MPU_RA_I2C_SLV0_DO	./drivers/accgyro_mpu6050.c	118;"	d	file:
MPU_RA_I2C_SLV0_REG	./drivers/accgyro_mpu6050.c	81;"	d	file:
MPU_RA_I2C_SLV1_ADDR	./drivers/accgyro_mpu6050.c	83;"	d	file:
MPU_RA_I2C_SLV1_CTRL	./drivers/accgyro_mpu6050.c	85;"	d	file:
MPU_RA_I2C_SLV1_DO	./drivers/accgyro_mpu6050.c	119;"	d	file:
MPU_RA_I2C_SLV1_REG	./drivers/accgyro_mpu6050.c	84;"	d	file:
MPU_RA_I2C_SLV2_ADDR	./drivers/accgyro_mpu6050.c	86;"	d	file:
MPU_RA_I2C_SLV2_CTRL	./drivers/accgyro_mpu6050.c	88;"	d	file:
MPU_RA_I2C_SLV2_DO	./drivers/accgyro_mpu6050.c	120;"	d	file:
MPU_RA_I2C_SLV2_REG	./drivers/accgyro_mpu6050.c	87;"	d	file:
MPU_RA_I2C_SLV3_ADDR	./drivers/accgyro_mpu6050.c	89;"	d	file:
MPU_RA_I2C_SLV3_CTRL	./drivers/accgyro_mpu6050.c	91;"	d	file:
MPU_RA_I2C_SLV3_DO	./drivers/accgyro_mpu6050.c	121;"	d	file:
MPU_RA_I2C_SLV3_REG	./drivers/accgyro_mpu6050.c	90;"	d	file:
MPU_RA_I2C_SLV4_ADDR	./drivers/accgyro_mpu6050.c	92;"	d	file:
MPU_RA_I2C_SLV4_CTRL	./drivers/accgyro_mpu6050.c	95;"	d	file:
MPU_RA_I2C_SLV4_DI	./drivers/accgyro_mpu6050.c	96;"	d	file:
MPU_RA_I2C_SLV4_DO	./drivers/accgyro_mpu6050.c	94;"	d	file:
MPU_RA_I2C_SLV4_REG	./drivers/accgyro_mpu6050.c	93;"	d	file:
MPU_RA_INT_ENABLE	./drivers/accgyro_mpu6050.c	99;"	d	file:
MPU_RA_INT_PIN_CFG	./drivers/accgyro_mpu6050.c	98;"	d	file:
MPU_RA_INT_STATUS	./drivers/accgyro_mpu6050.c	101;"	d	file:
MPU_RA_MEM_R_W	./drivers/accgyro_mpu6050.c	130;"	d	file:
MPU_RA_MEM_START_ADDR	./drivers/accgyro_mpu6050.c	129;"	d	file:
MPU_RA_MOT_DETECT_CTRL	./drivers/accgyro_mpu6050.c	124;"	d	file:
MPU_RA_MOT_DETECT_STATUS	./drivers/accgyro_mpu6050.c	117;"	d	file:
MPU_RA_MOT_DUR	./drivers/accgyro_mpu6050.c	75;"	d	file:
MPU_RA_MOT_THR	./drivers/accgyro_mpu6050.c	74;"	d	file:
MPU_RA_PRODUCT_ID	./drivers/accgyro_mpu6050.c	61;"	d	file:
MPU_RA_PWR_MGMT_1	./drivers/accgyro_mpu6050.c	126;"	d	file:
MPU_RA_PWR_MGMT_2	./drivers/accgyro_mpu6050.c	127;"	d	file:
MPU_RA_SIGNAL_PATH_RESET	./drivers/accgyro_mpu6050.c	123;"	d	file:
MPU_RA_SMPLRT_DIV	./drivers/accgyro_mpu6050.c	68;"	d	file:
MPU_RA_TEMP_OUT_H	./drivers/accgyro_mpu6050.c	108;"	d	file:
MPU_RA_TEMP_OUT_L	./drivers/accgyro_mpu6050.c	109;"	d	file:
MPU_RA_USER_CTRL	./drivers/accgyro_mpu6050.c	125;"	d	file:
MPU_RA_WHO_AM_I	./drivers/accgyro_mpu6050.c	136;"	d	file:
MPU_RA_XA_OFFS_H	./drivers/accgyro_mpu6050.c	55;"	d	file:
MPU_RA_XA_OFFS_L_TC	./drivers/accgyro_mpu6050.c	56;"	d	file:
MPU_RA_XG_OFFS_TC	./drivers/accgyro_mpu6050.c	49;"	d	file:
MPU_RA_XG_OFFS_USRH	./drivers/accgyro_mpu6050.c	62;"	d	file:
MPU_RA_XG_OFFS_USRL	./drivers/accgyro_mpu6050.c	63;"	d	file:
MPU_RA_X_FINE_GAIN	./drivers/accgyro_mpu6050.c	52;"	d	file:
MPU_RA_YA_OFFS_H	./drivers/accgyro_mpu6050.c	57;"	d	file:
MPU_RA_YA_OFFS_L_TC	./drivers/accgyro_mpu6050.c	58;"	d	file:
MPU_RA_YG_OFFS_TC	./drivers/accgyro_mpu6050.c	50;"	d	file:
MPU_RA_YG_OFFS_USRH	./drivers/accgyro_mpu6050.c	64;"	d	file:
MPU_RA_YG_OFFS_USRL	./drivers/accgyro_mpu6050.c	65;"	d	file:
MPU_RA_Y_FINE_GAIN	./drivers/accgyro_mpu6050.c	53;"	d	file:
MPU_RA_ZA_OFFS_H	./drivers/accgyro_mpu6050.c	59;"	d	file:
MPU_RA_ZA_OFFS_L_TC	./drivers/accgyro_mpu6050.c	60;"	d	file:
MPU_RA_ZG_OFFS_TC	./drivers/accgyro_mpu6050.c	51;"	d	file:
MPU_RA_ZG_OFFS_USRH	./drivers/accgyro_mpu6050.c	66;"	d	file:
MPU_RA_ZG_OFFS_USRL	./drivers/accgyro_mpu6050.c	67;"	d	file:
MPU_RA_ZRMOT_DUR	./drivers/accgyro_mpu6050.c	77;"	d	file:
MPU_RA_ZRMOT_THR	./drivers/accgyro_mpu6050.c	76;"	d	file:
MPU_RA_Z_FINE_GAIN	./drivers/accgyro_mpu6050.c	54;"	d	file:
MPU_RF_DATA_RDY_EN	./drivers/accgyro_mpu6050.c	139;"	d	file:
MR_REG_M	./drivers/accgyro_lsm303dlhc.c	74;"	d	file:
MS5611_ADDR	./drivers/barometer_ms5611.c	32;"	d	file:
MSG_ACK_ACK	./io/gps.c	/^    MSG_ACK_ACK = 0x01,$/;"	e	enum:__anon90	file:
MSG_ACK_NACK	./io/gps.c	/^    MSG_ACK_NACK = 0x00,$/;"	e	enum:__anon90	file:
MSG_CFG_NAV_SETTINGS	./io/gps.c	/^    MSG_CFG_NAV_SETTINGS = 0x24$/;"	e	enum:__anon90	file:
MSG_CFG_PRT	./io/gps.c	/^    MSG_CFG_PRT = 0x00,$/;"	e	enum:__anon90	file:
MSG_CFG_RATE	./io/gps.c	/^    MSG_CFG_RATE = 0x08,$/;"	e	enum:__anon90	file:
MSG_CFG_SET_RATE	./io/gps.c	/^    MSG_CFG_SET_RATE = 0x01,$/;"	e	enum:__anon90	file:
MSG_POSLLH	./io/gps.c	/^    MSG_POSLLH = 0x2,$/;"	e	enum:__anon90	file:
MSG_SOL	./io/gps.c	/^    MSG_SOL = 0x6,$/;"	e	enum:__anon90	file:
MSG_STATUS	./io/gps.c	/^    MSG_STATUS = 0x3,$/;"	e	enum:__anon90	file:
MSG_SVINFO	./io/gps.c	/^    MSG_SVINFO = 0x30,$/;"	e	enum:__anon90	file:
MSG_VELNED	./io/gps.c	/^    MSG_VELNED = 0x12,$/;"	e	enum:__anon90	file:
MSP_ACC_CALIBRATION	./io/serial_msp.c	293;"	d	file:
MSP_ACC_TRIM	./io/serial_msp.c	313;"	d	file:
MSP_ADJUSTMENT_RANGES	./io/serial_msp.c	214;"	d	file:
MSP_ALTITUDE	./io/serial_msp.c	273;"	d	file:
MSP_ANALOG	./io/serial_msp.c	274;"	d	file:
MSP_API_VERSION	./io/serial_msp.c	175;"	d	file:
MSP_ARMING_CONFIG	./io/serial_msp.c	229;"	d	file:
MSP_ATTITUDE	./io/serial_msp.c	272;"	d	file:
MSP_BF_BUILD_INFO	./io/serial_msp.c	255;"	d	file:
MSP_BF_CONFIG	./io/serial_msp.c	249;"	d	file:
MSP_BOARD_ALIGNMENT	./io/serial_msp.c	193;"	d	file:
MSP_BOARD_INFO	./io/serial_msp.c	178;"	d	file:
MSP_BOX	./io/serial_msp.c	277;"	d	file:
MSP_BOXIDS	./io/serial_msp.c	283;"	d	file:
MSP_BOXNAMES	./io/serial_msp.c	280;"	d	file:
MSP_BUILD_INFO	./io/serial_msp.c	179;"	d	file:
MSP_CF_SERIAL_CONFIG	./io/serial_msp.c	218;"	d	file:
MSP_CHANNEL_FORWARDING	./io/serial_msp.c	184;"	d	file:
MSP_COMP_GPS	./io/serial_msp.c	271;"	d	file:
MSP_CURRENT_METER_CONFIG	./io/serial_msp.c	196;"	d	file:
MSP_DATAFLASH_ERASE	./io/serial_msp.c	234;"	d	file:
MSP_DATAFLASH_READ	./io/serial_msp.c	233;"	d	file:
MSP_DATAFLASH_SUMMARY	./io/serial_msp.c	232;"	d	file:
MSP_DEBUG	./io/serial_msp.c	309;"	d	file:
MSP_DEBUGMSG	./io/serial_msp.c	308;"	d	file:
MSP_EEPROM_WRITE	./io/serial_msp.c	306;"	d	file:
MSP_FAILSAFE_CONFIG	./io/serial_msp.c	239;"	d	file:
MSP_FC_VARIANT	./io/serial_msp.c	176;"	d	file:
MSP_FC_VERSION	./io/serial_msp.c	177;"	d	file:
MSP_FEATURE	./io/serial_msp.c	190;"	d	file:
MSP_GPSSVINFO	./io/serial_msp.c	315;"	d	file:
MSP_IDENT	./io/serial_msp.c	262;"	d	file:
MSP_LED_COLORS	./io/serial_msp.c	205;"	d	file:
MSP_LED_STRIP_CONFIG	./io/serial_msp.c	208;"	d	file:
MSP_LOOP_TIME	./io/serial_msp.c	236;"	d	file:
MSP_MAG_CALIBRATION	./io/serial_msp.c	294;"	d	file:
MSP_MISC	./io/serial_msp.c	278;"	d	file:
MSP_MIXER	./io/serial_msp.c	199;"	d	file:
MSP_MODE_RANGES	./io/serial_msp.c	187;"	d	file:
MSP_MOTOR	./io/serial_msp.c	268;"	d	file:
MSP_MOTOR_PINS	./io/serial_msp.c	279;"	d	file:
MSP_NAV_CONFIG	./io/serial_msp.c	286;"	d	file:
MSP_NAV_STATUS	./io/serial_msp.c	285;"	d	file:
MSP_PID	./io/serial_msp.c	276;"	d	file:
MSP_PIDNAMES	./io/serial_msp.c	281;"	d	file:
MSP_PID_CONTROLLER	./io/serial_msp.c	226;"	d	file:
MSP_PROTOCOL_VERSION	./io/serial_msp.c	132;"	d	file:
MSP_RAW_GPS	./io/serial_msp.c	270;"	d	file:
MSP_RAW_IMU	./io/serial_msp.c	266;"	d	file:
MSP_RC	./io/serial_msp.c	269;"	d	file:
MSP_RC_TUNING	./io/serial_msp.c	275;"	d	file:
MSP_REBOOT	./io/serial_msp.c	252;"	d	file:
MSP_RESET_CONF	./io/serial_msp.c	296;"	d	file:
MSP_RSSI_CONFIG	./io/serial_msp.c	211;"	d	file:
MSP_RX_CONFIG	./io/serial_msp.c	202;"	d	file:
MSP_RX_MAP	./io/serial_msp.c	244;"	d	file:
MSP_SELECT_SETTING	./io/serial_msp.c	298;"	d	file:
MSP_SERVO	./io/serial_msp.c	267;"	d	file:
MSP_SERVO_CONF	./io/serial_msp.c	284;"	d	file:
MSP_SET_ACC_TRIM	./io/serial_msp.c	314;"	d	file:
MSP_SET_ADJUSTMENT_RANGE	./io/serial_msp.c	215;"	d	file:
MSP_SET_ARMING_CONFIG	./io/serial_msp.c	230;"	d	file:
MSP_SET_BF_CONFIG	./io/serial_msp.c	250;"	d	file:
MSP_SET_BOARD_ALIGNMENT	./io/serial_msp.c	194;"	d	file:
MSP_SET_BOX	./io/serial_msp.c	291;"	d	file:
MSP_SET_CF_SERIAL_CONFIG	./io/serial_msp.c	219;"	d	file:
MSP_SET_CHANNEL_FORWARDING	./io/serial_msp.c	185;"	d	file:
MSP_SET_CURRENT_METER_CONFIG	./io/serial_msp.c	197;"	d	file:
MSP_SET_FAILSAFE_CONFIG	./io/serial_msp.c	240;"	d	file:
MSP_SET_FEATURE	./io/serial_msp.c	191;"	d	file:
MSP_SET_HEAD	./io/serial_msp.c	299;"	d	file:
MSP_SET_LED_COLORS	./io/serial_msp.c	206;"	d	file:
MSP_SET_LED_STRIP_CONFIG	./io/serial_msp.c	209;"	d	file:
MSP_SET_LOOP_TIME	./io/serial_msp.c	237;"	d	file:
MSP_SET_MISC	./io/serial_msp.c	295;"	d	file:
MSP_SET_MIXER	./io/serial_msp.c	200;"	d	file:
MSP_SET_MODE_RANGE	./io/serial_msp.c	188;"	d	file:
MSP_SET_MOTOR	./io/serial_msp.c	301;"	d	file:
MSP_SET_NAV_CONFIG	./io/serial_msp.c	302;"	d	file:
MSP_SET_PID	./io/serial_msp.c	290;"	d	file:
MSP_SET_PID_CONTROLLER	./io/serial_msp.c	227;"	d	file:
MSP_SET_RAW_GPS	./io/serial_msp.c	289;"	d	file:
MSP_SET_RAW_RC	./io/serial_msp.c	288;"	d	file:
MSP_SET_RC_TUNING	./io/serial_msp.c	292;"	d	file:
MSP_SET_RSSI_CONFIG	./io/serial_msp.c	212;"	d	file:
MSP_SET_RX_CONFIG	./io/serial_msp.c	203;"	d	file:
MSP_SET_RX_MAP	./io/serial_msp.c	245;"	d	file:
MSP_SET_SERVO_CONF	./io/serial_msp.c	300;"	d	file:
MSP_SET_VOLTAGE_METER_CONFIG	./io/serial_msp.c	222;"	d	file:
MSP_SET_WP	./io/serial_msp.c	297;"	d	file:
MSP_SONAR_ALTITUDE	./io/serial_msp.c	224;"	d	file:
MSP_STATUS	./io/serial_msp.c	265;"	d	file:
MSP_UID	./io/serial_msp.c	312;"	d	file:
MSP_VOLTAGE_METER_CONFIG	./io/serial_msp.c	221;"	d	file:
MSP_WP	./io/serial_msp.c	282;"	d	file:
MULTIPLEBYTE_CMD	./drivers/accgyro_l3gd20.c	36;"	d	file:
MULTIWII_IDENTIFIER	./io/serial_msp.c	139;"	d	file:
MULTIWII_I_MULTIPLIER	./flight/autotune.c	150;"	d	file:
MULTIWII_P_MULTIPLIER	./flight/autotune.c	149;"	d	file:
MW_VERSION	./version.h	26;"	d
M_PIf	./common/maths.h	25;"	d
MagFull_Scale	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t MagFull_Scale;                     \/* Full Scale selection *\/$/;"	m	struct:__anon55
MagOutput_DataRate	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t MagOutput_DataRate;                \/* OUT data rate *\/$/;"	m	struct:__anon55
MemManage_Handler	./vcp/stm32_it.c	/^void MemManage_Handler(void)$/;"	f
Mode_AF_OD	./drivers/gpio.h	/^    Mode_AF_OD =        (GPIO_OType_OD << 4) | GPIO_Mode_AF,$/;"	e	enum:__anon46
Mode_AF_OD	./drivers/gpio.h	/^    Mode_AF_OD = 0x1C,$/;"	e	enum:__anon45
Mode_AF_PP	./drivers/gpio.h	/^    Mode_AF_PP =        (GPIO_OType_PP << 4) | GPIO_Mode_AF,$/;"	e	enum:__anon46
Mode_AF_PP	./drivers/gpio.h	/^    Mode_AF_PP = 0x18$/;"	e	enum:__anon45
Mode_AF_PP_PD	./drivers/gpio.h	/^    Mode_AF_PP_PD =     (GPIO_OType_PP << 4) | (GPIO_PuPd_DOWN  << 2) | GPIO_Mode_AF,$/;"	e	enum:__anon46
Mode_AF_PP_PU	./drivers/gpio.h	/^    Mode_AF_PP_PU =     (GPIO_OType_PP << 4) | (GPIO_PuPd_UP    << 2) | GPIO_Mode_AF$/;"	e	enum:__anon46
Mode_AIN	./drivers/gpio.h	/^    Mode_AIN =          (GPIO_PuPd_NOPULL << 2) | GPIO_Mode_AN,$/;"	e	enum:__anon46
Mode_AIN	./drivers/gpio.h	/^    Mode_AIN = 0x0,$/;"	e	enum:__anon45
Mode_IN_FLOATING	./drivers/gpio.h	/^    Mode_IN_FLOATING =  (GPIO_PuPd_NOPULL << 2) | GPIO_Mode_IN,$/;"	e	enum:__anon46
Mode_IN_FLOATING	./drivers/gpio.h	/^    Mode_IN_FLOATING = 0x04,$/;"	e	enum:__anon45
Mode_IPD	./drivers/gpio.h	/^    Mode_IPD =          (GPIO_PuPd_DOWN   << 2) | GPIO_Mode_IN,$/;"	e	enum:__anon46
Mode_IPD	./drivers/gpio.h	/^    Mode_IPD = 0x28,$/;"	e	enum:__anon45
Mode_IPU	./drivers/gpio.h	/^    Mode_IPU =          (GPIO_PuPd_UP     << 2) | GPIO_Mode_IN,$/;"	e	enum:__anon46
Mode_IPU	./drivers/gpio.h	/^    Mode_IPU = 0x48,$/;"	e	enum:__anon45
Mode_Out_OD	./drivers/gpio.h	/^    Mode_Out_OD =       (GPIO_OType_OD << 4) | GPIO_Mode_OUT,$/;"	e	enum:__anon46
Mode_Out_OD	./drivers/gpio.h	/^    Mode_Out_OD = 0x14,$/;"	e	enum:__anon45
Mode_Out_PP	./drivers/gpio.h	/^    Mode_Out_PP =       (GPIO_OType_PP << 4) | GPIO_Mode_OUT,$/;"	e	enum:__anon46
Mode_Out_PP	./drivers/gpio.h	/^    Mode_Out_PP = 0x10,$/;"	e	enum:__anon45
NAV_BANK_MAX	./flight/navigation.c	191;"	d	file:
NAV_IMAX	./flight/navigation.c	97;"	d	file:
NAV_MODE_NONE	./flight/navigation.h	/^    NAV_MODE_NONE = 0,$/;"	e	enum:__anon13
NAV_MODE_POSHOLD	./flight/navigation.h	/^    NAV_MODE_POSHOLD,$/;"	e	enum:__anon13
NAV_MODE_WP	./flight/navigation.h	/^    NAV_MODE_WP$/;"	e	enum:__anon13
NAV_SET_TAKEOFF_HEADING	./flight/navigation.c	101;"	d	file:
NAV_SLOW_NAV	./flight/navigation.c	190;"	d	file:
NAV_STATUS_FIX_VALID	./io/gps.c	/^    NAV_STATUS_FIX_VALID = 1$/;"	e	enum:__anon92	file:
NAV_TAIL_FIRST	./flight/navigation.c	100;"	d	file:
NAZE32	./target/NAZE/hardware_revision.h	/^    NAZE32, \/\/ Naze32 and compatible with 8MHz HSE$/;"	e	enum:nazeHardwareRevision_t
NAZE32	./target/SUPERBEE/hardware_revision.h	/^    NAZE32, \/\/ Naze32 and compatible with 8MHz HSE$/;"	e	enum:nazeHardwareRevision_t
NAZE32_REV5	./target/NAZE/hardware_revision.h	/^    NAZE32_REV5, \/\/ Naze32 and compatible with 12MHz HSE$/;"	e	enum:nazeHardwareRevision_t
NAZE32_REV5	./target/SUPERBEE/hardware_revision.h	/^    NAZE32_REV5, \/\/ Naze32 and compatible with 12MHz HSE$/;"	e	enum:nazeHardwareRevision_t
NAZE32_SP	./target/NAZE/hardware_revision.h	/^    NAZE32_SP \/\/ Naze32 w\/Sensor Platforms$/;"	e	enum:nazeHardwareRevision_t
NAZE32_SP	./target/SUPERBEE/hardware_revision.h	/^    NAZE32_SP \/\/ Naze32 w\/Sensor Platforms$/;"	e	enum:nazeHardwareRevision_t
NAZE_SPI_CS_GPIO	./target/NAZE/target.h	57;"	d
NAZE_SPI_CS_GPIO	./target/SUPERBEE/target.h	57;"	d
NAZE_SPI_CS_PIN	./target/NAZE/target.h	58;"	d
NAZE_SPI_CS_PIN	./target/SUPERBEE/target.h	58;"	d
NAZE_SPI_INSTANCE	./target/NAZE/target.h	56;"	d
NAZE_SPI_INSTANCE	./target/SUPERBEE/target.h	56;"	d
NEXT_PARSE_STATE	./io/ledstrip.c	410;"	d	file:
NMI_Handler	./vcp/stm32_it.c	/^void NMI_Handler(void)$/;"	f
NON_AUX_CHANNEL_COUNT	./rx/rx.h	59;"	d
NORMAL_CHAR_FORMAT	./drivers/display_ug2864hsweg01.c	30;"	d	file:
NO_FRAME	./io/gps.c	453;"	d	file:
NUM_ACCEL_FSR	./drivers/accgyro_mpu6050.c	/^    NUM_ACCEL_FSR$/;"	e	enum:accel_fsr_e	file:
NUM_ACCEL_FSR	./drivers/accgyro_spi_mpu6500.c	/^    NUM_ACCEL_FSR$/;"	e	enum:accel_fsr_e	file:
NUM_CLK	./drivers/accgyro_mpu6050.c	/^    NUM_CLK$/;"	e	enum:clock_sel_e	file:
NUM_CLK	./drivers/accgyro_spi_mpu6500.c	/^    NUM_CLK$/;"	e	enum:clock_sel_e	file:
NUM_FILTER	./drivers/accgyro_mpu6050.c	/^    NUM_FILTER$/;"	e	enum:lpf_e	file:
NUM_FILTER	./drivers/accgyro_spi_mpu6500.c	/^    NUM_FILTER$/;"	e	enum:lpf_e	file:
NUM_GYRO_FSR	./drivers/accgyro_mpu6050.c	/^    NUM_GYRO_FSR$/;"	e	enum:gyro_fsr_e	file:
NUM_GYRO_FSR	./drivers/accgyro_spi_mpu6500.c	/^    NUM_GYRO_FSR$/;"	e	enum:gyro_fsr_e	file:
NVIC_BUILD_PRIORITY	./drivers/nvic.h	30;"	d
NVIC_PRIORITY_BASE	./drivers/nvic.h	31;"	d
NVIC_PRIORITY_GROUPING	./drivers/nvic.h	4;"	d
NVIC_PRIORITY_SUB	./drivers/nvic.h	32;"	d
NVIC_PRIO_BARO_EXT	./drivers/nvic.h	9;"	d
NVIC_PRIO_CALLBACK	./drivers/nvic.h	27;"	d
NVIC_PRIO_I2C_ER	./drivers/nvic.h	20;"	d
NVIC_PRIO_I2C_EV	./drivers/nvic.h	21;"	d
NVIC_PRIO_MAG_DATA_READY	./drivers/nvic.h	26;"	d
NVIC_PRIO_MAX	./drivers/nvic.h	7;"	d
NVIC_PRIO_MPU_DATA_READY	./drivers/nvic.h	25;"	d
NVIC_PRIO_SERIALUART1	./drivers/nvic.h	13;"	d
NVIC_PRIO_SERIALUART1_RXDMA	./drivers/nvic.h	12;"	d
NVIC_PRIO_SERIALUART1_TXDMA	./drivers/nvic.h	11;"	d
NVIC_PRIO_SERIALUART2	./drivers/nvic.h	16;"	d
NVIC_PRIO_SERIALUART2_RXDMA	./drivers/nvic.h	15;"	d
NVIC_PRIO_SERIALUART2_TXDMA	./drivers/nvic.h	14;"	d
NVIC_PRIO_SERIALUART3	./drivers/nvic.h	19;"	d
NVIC_PRIO_SERIALUART3_RXDMA	./drivers/nvic.h	18;"	d
NVIC_PRIO_SERIALUART3_TXDMA	./drivers/nvic.h	17;"	d
NVIC_PRIO_SONAR_ECHO	./drivers/nvic.h	24;"	d
NVIC_PRIO_TIMER	./drivers/nvic.h	8;"	d
NVIC_PRIO_USB	./drivers/nvic.h	22;"	d
NVIC_PRIO_USB_WUP	./drivers/nvic.h	23;"	d
NVIC_PRIO_WS2811_DMA	./drivers/nvic.h	10;"	d
ODR_1344_HZ	./drivers/accgyro_lsm303dlhc.c	79;"	d	file:
ODR_15_HZ	./drivers/accgyro_lsm303dlhc.c	92;"	d	file:
ODR_75_HZ	./drivers/accgyro_lsm303dlhc.c	91;"	d	file:
OK_TO_ARM	./config/runtime_config.h	/^    OK_TO_ARM       = (1 << 0),$/;"	e	enum:__anon18
OLD_YAW	./flight/pid.h	22;"	d
OLED_address	./drivers/display_ug2864hsweg01.c	171;"	d	file:
ONESHOT125_TIMER_MHZ	./drivers/pwm_mapping.h	37;"	d
ONESHOT_FEATURE_CHANGED_DELAY_ON_BOOT_MS	./config/config.h	22;"	d
OTT_GAM_MSG_t	./telemetry/hott.h	/^} OTT_GAM_MSG_t;$/;"	t	typeref:struct:HOTT_GAM_MSG_s
OUTPUT_DATARATE_1	./drivers/accgyro_l3gd20.c	47;"	d	file:
OUTPUT_DATARATE_2	./drivers/accgyro_l3gd20.c	48;"	d	file:
OUTPUT_DATARATE_3	./drivers/accgyro_l3gd20.c	49;"	d	file:
OUTPUT_DATARATE_4	./drivers/accgyro_l3gd20.c	50;"	d	file:
OUTPUT_MASK	./drivers/gpio_stm32f30x.c	33;"	d	file:
OUTPUT_OFFSET	./drivers/gpio_stm32f30x.c	29;"	d	file:
OUT_TEMP_ADDR	./drivers/accgyro_l3gd20.c	42;"	d	file:
OUT_X_H_M	./drivers/accgyro_lsm303dlhc.c	75;"	d	file:
OUT_X_L_A	./drivers/accgyro_lsm303dlhc.c	71;"	d	file:
OUT_X_L_ADDR	./drivers/accgyro_l3gd20.c	43;"	d	file:
P8	./flight/pid.h	/^    uint8_t P8[PID_ITEM_COUNT];$/;"	m	struct:pidProfile_s
PAGE_ARMED	./io/display.h	/^    PAGE_ARMED,$/;"	e	enum:__anon67
PAGE_BATTERY	./io/display.h	/^    PAGE_BATTERY,$/;"	e	enum:__anon67
PAGE_COUNT	./io/display.c	101;"	d	file:
PAGE_CYCLE_FREQUENCY	./io/display.c	72;"	d	file:
PAGE_DEBUG	./io/display.h	/^    PAGE_DEBUG$/;"	e	enum:__anon67
PAGE_GPS	./io/display.h	/^    PAGE_GPS$/;"	e	enum:__anon67
PAGE_PROFILE	./io/display.h	/^    PAGE_PROFILE$/;"	e	enum:__anon67
PAGE_RX	./io/display.h	/^    PAGE_RX,$/;"	e	enum:__anon67
PAGE_SENSORS	./io/display.h	/^    PAGE_SENSORS,$/;"	e	enum:__anon67
PAGE_STATE_FLAG_CYCLE_ENABLED	./io/display.c	/^    PAGE_STATE_FLAG_CYCLE_ENABLED = (1 << 0),$/;"	e	enum:__anon80	file:
PAGE_STATE_FLAG_FORCE_PAGE_CHANGE	./io/display.c	/^    PAGE_STATE_FLAG_FORCE_PAGE_CHANGE = (1 << 1)$/;"	e	enum:__anon80	file:
PAGE_STATE_FLAG_NONE	./io/display.c	/^    PAGE_STATE_FLAG_NONE = 0,$/;"	e	enum:__anon80	file:
PAGE_TITLE_LINE_COUNT	./io/display.c	79;"	d	file:
PAGE_WELCOME	./io/display.h	/^    PAGE_WELCOME,$/;"	e	enum:__anon67
PARSE_STATE_COUNT	./io/ledstrip.c	312;"	d	file:
PASSTHRU_MODE	./config/runtime_config.h	/^    PASSTHRU_MODE   = (1 << 8),$/;"	e	enum:__anon19
PERIODIC_TASK_COUNT	./mw.c	454;"	d	file:
PHASE_IDLE	./flight/autotune.c	/^    PHASE_IDLE = 0,$/;"	e	enum:__anon10	file:
PHASE_SAVE_OR_RESTORE_PIDS	./flight/autotune.c	/^    PHASE_SAVE_OR_RESTORE_PIDS,$/;"	e	enum:__anon10	file:
PHASE_TUNE_PITCH	./flight/autotune.c	/^    PHASE_TUNE_PITCH,$/;"	e	enum:__anon10	file:
PHASE_TUNE_ROLL	./flight/autotune.c	/^    PHASE_TUNE_ROLL,$/;"	e	enum:__anon10	file:
PID	./flight/navigation.c	/^} PID;$/;"	t	typeref:struct:__anon6	file:
PIDALT	./flight/pid.h	/^    PIDALT,$/;"	e	enum:__anon7
PIDLEVEL	./flight/pid.h	/^    PIDLEVEL,$/;"	e	enum:__anon7
PIDMAG	./flight/pid.h	/^    PIDMAG,$/;"	e	enum:__anon7
PIDNAVR	./flight/pid.h	/^    PIDNAVR,$/;"	e	enum:__anon7
PIDPITCH	./flight/pid.h	/^    PIDPITCH,$/;"	e	enum:__anon7
PIDPOS	./flight/pid.h	/^    PIDPOS,$/;"	e	enum:__anon7
PIDPOSR	./flight/pid.h	/^    PIDPOSR,$/;"	e	enum:__anon7
PIDROLL	./flight/pid.h	/^    PIDROLL,$/;"	e	enum:__anon7
PIDVEL	./flight/pid.h	/^    PIDVEL,$/;"	e	enum:__anon7
PIDYAW	./flight/pid.h	/^    PIDYAW,$/;"	e	enum:__anon7
PID_CONTROLLER_HARAKIRI	./flight/pid.h	/^    PID_CONTROLLER_HARAKIRI,$/;"	e	enum:__anon8
PID_CONTROLLER_LUX_FLOAT	./flight/pid.h	/^    PID_CONTROLLER_LUX_FLOAT,$/;"	e	enum:__anon8
PID_CONTROLLER_MULTI_WII	./flight/pid.h	/^    PID_CONTROLLER_MULTI_WII,$/;"	e	enum:__anon8
PID_CONTROLLER_MULTI_WII_23	./flight/pid.h	/^    PID_CONTROLLER_MULTI_WII_23,$/;"	e	enum:__anon8
PID_CONTROLLER_MULTI_WII_HYBRID	./flight/pid.h	/^    PID_CONTROLLER_MULTI_WII_HYBRID,$/;"	e	enum:__anon8
PID_CONTROLLER_REWRITE	./flight/pid.h	/^    PID_CONTROLLER_REWRITE,$/;"	e	enum:__anon8
PID_ITEM_COUNT	./flight/pid.h	/^    PID_ITEM_COUNT$/;"	e	enum:__anon7
PID_PARAM	./flight/navigation.c	/^} PID_PARAM;$/;"	t	typeref:struct:__anon5	file:
PIDweight	./flight/pid.c	/^uint8_t dynP8[3], dynI8[3], dynD8[3], PIDweight[3];$/;"	v
PITCH	./io/rc_controls.h	/^    PITCH,$/;"	e	enum:rc_alias
PITCH_LOOKUP_LENGTH	./io/rc_curves.h	20;"	d
PIT_CE	./io/rc_controls.h	79;"	d
PIT_HI	./io/rc_controls.h	80;"	d
PIT_LO	./io/rc_controls.h	78;"	d
PORTSHARING_NOT_SHARED	./io/serial.h	/^    PORTSHARING_NOT_SHARED,$/;"	e	enum:__anon69
PORTSHARING_SHARED	./io/serial.h	/^    PORTSHARING_SHARED$/;"	e	enum:__anon69
PORTSHARING_UNUSED	./io/serial.h	/^    PORTSHARING_UNUSED = 0,$/;"	e	enum:__anon69
POSHOLD_IMAX	./flight/navigation.c	95;"	d	file:
POSHOLD_RATE_IMAX	./flight/navigation.c	96;"	d	file:
POWERED	./vcp/usb_pwr.h	/^    POWERED,$/;"	e	enum:_DEVICE_STATE
PPM_AND_PWM_SAMPLE_COUNT	./rx/rx.c	76;"	d	file:
PPM_CAPTURE_COUNT	./drivers/pwm_rx.c	38;"	d	file:
PPM_IN_MAX_CHANNEL_PULSE_US	./drivers/pwm_rx.c	105;"	d	file:
PPM_IN_MAX_NUM_CHANNELS	./drivers/pwm_rx.c	108;"	d	file:
PPM_IN_MIN_CHANNEL_PULSE_US	./drivers/pwm_rx.c	104;"	d	file:
PPM_IN_MIN_NUM_CHANNELS	./drivers/pwm_rx.c	107;"	d	file:
PPM_IN_MIN_SYNC_PULSE_US	./drivers/pwm_rx.c	103;"	d	file:
PPM_RCVR_TIMEOUT	./drivers/pwm_rx.c	109;"	d	file:
PPM_STABLE_FRAMES_REQUIRED_COUNT	./drivers/pwm_rx.c	106;"	d	file:
PPM_TIMER_PERIOD	./drivers/pwm_rx.c	79;"	d	file:
PREAMBLE1	./io/gps.c	/^    PREAMBLE1 = 0xb5,$/;"	e	enum:__anon90	file:
PREAMBLE2	./io/gps.c	/^    PREAMBLE2 = 0x62,$/;"	e	enum:__anon90	file:
PREDICT	./blackbox/blackbox.c	93;"	d	file:
PRESSURE_SAMPLES_MEDIAN	./sensors/barometer.c	63;"	d	file:
PRESSURE_SAMPLE_COUNT	./sensors/barometer.c	87;"	d	file:
PREVENT_ARMING	./config/runtime_config.h	/^    PREVENT_ARMING  = (1 << 1),$/;"	e	enum:__anon18
PROFILE_VALUE	./io/serial_cli.c	/^    PROFILE_VALUE = (1 << 7),$/;"	e	enum:__anon99	file:
PROM_NB	./drivers/barometer_ms5611.c	45;"	d	file:
PROTOCOL_HEADER	./telemetry/frsky.c	81;"	d	file:
PROTOCOL_TAIL	./telemetry/frsky.c	82;"	d	file:
PTermState	./flight/pid.c	/^static filterStatePt1_t PTermState[3], DTermState[3];$/;"	v	file:
PULSE_1MS	./drivers/pwm_mapping.h	32;"	d
PUPD_MASK	./drivers/gpio_stm32f30x.c	32;"	d	file:
PUPD_OFFSET	./drivers/gpio_stm32f30x.c	28;"	d	file:
PWM1	./drivers/pwm_mapping.h	/^    PWM1 = 0,$/;"	e	enum:__anon42
PWM10	./drivers/pwm_mapping.h	/^    PWM10,$/;"	e	enum:__anon42
PWM11	./drivers/pwm_mapping.h	/^    PWM11,$/;"	e	enum:__anon42
PWM12	./drivers/pwm_mapping.h	/^    PWM12,$/;"	e	enum:__anon42
PWM13	./drivers/pwm_mapping.h	/^    PWM13,$/;"	e	enum:__anon42
PWM14	./drivers/pwm_mapping.h	/^    PWM14,$/;"	e	enum:__anon42
PWM15	./drivers/pwm_mapping.h	/^    PWM15,$/;"	e	enum:__anon42
PWM16	./drivers/pwm_mapping.h	/^    PWM16$/;"	e	enum:__anon42
PWM2	./drivers/pwm_mapping.h	/^    PWM2,$/;"	e	enum:__anon42
PWM3	./drivers/pwm_mapping.h	/^    PWM3,$/;"	e	enum:__anon42
PWM4	./drivers/pwm_mapping.h	/^    PWM4,$/;"	e	enum:__anon42
PWM5	./drivers/pwm_mapping.h	/^    PWM5,$/;"	e	enum:__anon42
PWM6	./drivers/pwm_mapping.h	/^    PWM6,$/;"	e	enum:__anon42
PWM7	./drivers/pwm_mapping.h	/^    PWM7,$/;"	e	enum:__anon42
PWM8	./drivers/pwm_mapping.h	/^    PWM8,$/;"	e	enum:__anon42
PWM9	./drivers/pwm_mapping.h	/^    PWM9,$/;"	e	enum:__anon42
PWM_BRUSHED_TIMER_MHZ	./drivers/pwm_output.c	50;"	d	file:
PWM_INPUT_PORT_COUNT	./drivers/pwm_rx.c	39;"	d	file:
PWM_PORTS_OR_PPM_CAPTURE_COUNT	./drivers/pwm_rx.c	42;"	d	file:
PWM_PORTS_OR_PPM_CAPTURE_COUNT	./drivers/pwm_rx.c	44;"	d	file:
PWM_PULSE_MAX	./rx/rx.h	28;"	d
PWM_PULSE_MIN	./rx/rx.h	27;"	d
PWM_RANGE_MAX	./rx/rx.h	24;"	d
PWM_RANGE_MIDDLE	./rx/rx.h	25;"	d
PWM_RANGE_MIN	./rx/rx.h	23;"	d
PWM_RANGE_ZERO	./rx/rx.h	22;"	d
PWM_TIMER_MHZ	./drivers/pwm_mapping.h	36;"	d
PWM_TIMER_PERIOD	./drivers/pwm_rx.c	80;"	d	file:
P_f	./flight/pid.h	/^    float P_f[3];                           \/\/ float p i and d factors for lux float pid controller$/;"	m	struct:pidProfile_s
Pencode	./blackbox/blackbox.c	/^    uint8_t Pencode;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
PendSV_Handler	./vcp/stm32_it.c	/^void PendSV_Handler(void)$/;"	f
Pin_0	./drivers/gpio.h	/^    Pin_0 = 0x0001,$/;"	e	enum:__anon48
Pin_1	./drivers/gpio.h	/^    Pin_1 = 0x0002,$/;"	e	enum:__anon48
Pin_10	./drivers/gpio.h	/^    Pin_10 = 0x0400,$/;"	e	enum:__anon48
Pin_11	./drivers/gpio.h	/^    Pin_11 = 0x0800,$/;"	e	enum:__anon48
Pin_12	./drivers/gpio.h	/^    Pin_12 = 0x1000,$/;"	e	enum:__anon48
Pin_13	./drivers/gpio.h	/^    Pin_13 = 0x2000,$/;"	e	enum:__anon48
Pin_14	./drivers/gpio.h	/^    Pin_14 = 0x4000,$/;"	e	enum:__anon48
Pin_15	./drivers/gpio.h	/^    Pin_15 = 0x8000,$/;"	e	enum:__anon48
Pin_2	./drivers/gpio.h	/^    Pin_2 = 0x0004,$/;"	e	enum:__anon48
Pin_3	./drivers/gpio.h	/^    Pin_3 = 0x0008,$/;"	e	enum:__anon48
Pin_4	./drivers/gpio.h	/^    Pin_4 = 0x0010,$/;"	e	enum:__anon48
Pin_5	./drivers/gpio.h	/^    Pin_5 = 0x0020,$/;"	e	enum:__anon48
Pin_6	./drivers/gpio.h	/^    Pin_6 = 0x0040,$/;"	e	enum:__anon48
Pin_7	./drivers/gpio.h	/^    Pin_7 = 0x0080,$/;"	e	enum:__anon48
Pin_8	./drivers/gpio.h	/^    Pin_8 = 0x0100,$/;"	e	enum:__anon48
Pin_9	./drivers/gpio.h	/^    Pin_9 = 0x0200,$/;"	e	enum:__anon48
Pin_All	./drivers/gpio.h	/^    Pin_All = 0xFFFF$/;"	e	enum:__anon48
PowerOff	./vcp/usb_pwr.c	/^RESULT PowerOff()$/;"	f
PowerOn	./vcp/usb_pwr.c	/^RESULT PowerOn(void)$/;"	f
Power_Mode	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t Power_Mode;                         \/* Power-down\/Normal Mode *\/$/;"	m	struct:__anon53
Ppredict	./blackbox/blackbox.c	/^    uint8_t Ppredict;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
QMF_SORT	./common/maths.c	154;"	d	file:
QMF_SWAP	./common/maths.c	155;"	d	file:
QMP_COPY	./common/maths.c	156;"	d	file:
QUADRANT_NORTH_EAST	./io/ledstrip.c	/^    QUADRANT_NORTH_EAST = 1,$/;"	e	enum:__anon78	file:
QUADRANT_NORTH_WEST	./io/ledstrip.c	/^    QUADRANT_NORTH_WEST$/;"	e	enum:__anon78	file:
QUADRANT_SOUTH_EAST	./io/ledstrip.c	/^    QUADRANT_SOUTH_EAST,$/;"	e	enum:__anon78	file:
QUADRANT_SOUTH_WEST	./io/ledstrip.c	/^    QUADRANT_SOUTH_WEST,$/;"	e	enum:__anon78	file:
RAD	./common/maths.h	27;"	d
RADX100	./flight/navigation.c	188;"	d	file:
RCconstPI	./flight/pid.h	21;"	d
READ_CMD	./drivers/accgyro_l3gd20.c	35;"	d	file:
REMAPPABLE_CHANNEL_COUNT	./rx/rx.h	96;"	d
REQUIRED_CHANNEL_MASK	./rx/rx.c	93;"	d	file:
REQUIRE_CC_ARM_PRINTF_SUPPORT	./build_config.h	34;"	d
REQUIRE_PRINTF_LONG_SUPPORT	./build_config.h	35;"	d
RESET_FREQUENCY_2HZ	./io/rc_controls.c	594;"	d	file:
RESUME_ESOF	./vcp/usb_pwr.h	/^    RESUME_ESOF$/;"	e	enum:_RESUME_STATE
RESUME_EXTERNAL	./vcp/usb_pwr.h	/^    RESUME_EXTERNAL,$/;"	e	enum:_RESUME_STATE
RESUME_INTERNAL	./vcp/usb_pwr.h	/^    RESUME_INTERNAL,$/;"	e	enum:_RESUME_STATE
RESUME_LATER	./vcp/usb_pwr.h	/^    RESUME_LATER,$/;"	e	enum:_RESUME_STATE
RESUME_OFF	./vcp/usb_pwr.h	/^    RESUME_OFF,$/;"	e	enum:_RESUME_STATE
RESUME_ON	./vcp/usb_pwr.h	/^    RESUME_ON,$/;"	e	enum:_RESUME_STATE
RESUME_START	./vcp/usb_pwr.h	/^    RESUME_START,$/;"	e	enum:_RESUME_STATE
RESUME_STATE	./vcp/usb_pwr.h	/^} RESUME_STATE;$/;"	t	typeref:enum:_RESUME_STATE
RESUME_WAIT	./vcp/usb_pwr.h	/^    RESUME_WAIT,$/;"	e	enum:_RESUME_STATE
REV_1	./target/CJMCU/hardware_revision.h	/^    REV_1, \/\/ Blue LED3$/;"	e	enum:cjmcuHardwareRevision_t
REV_2	./target/CJMCU/hardware_revision.h	/^    REV_2  \/\/ Green LED3$/;"	e	enum:cjmcuHardwareRevision_t
RGB_BLUE	./common/color.h	/^    RGB_BLUE$/;"	e	enum:__anon30
RGB_COLOR_COMPONENT_COUNT	./common/color.h	27;"	d
RGB_GREEN	./common/color.h	/^    RGB_GREEN,$/;"	e	enum:__anon30
RGB_RED	./common/color.h	/^    RGB_RED = 0,$/;"	e	enum:__anon30
RING_COLORS	./io/ledstrip.c	/^    RING_COLORS$/;"	e	enum:__anon77	file:
ROLL	./io/rc_controls.h	/^    ROLL = 0,$/;"	e	enum:rc_alias
ROL_CE	./io/rc_controls.h	76;"	d
ROL_HI	./io/rc_controls.h	77;"	d
ROL_LO	./io/rc_controls.h	75;"	d
ROTATION_SEQUENCE_LED_COUNT	./io/ledstrip.c	778;"	d	file:
ROTATION_SEQUENCE_LED_WIDTH	./io/ledstrip.c	779;"	d	file:
RSSI_ADC_CHANNEL	./target/CC3D/target.h	105;"	d
RSSI_ADC_CHANNEL	./target/CHEBUZZF3/target.h	95;"	d
RSSI_ADC_CHANNEL	./target/EUSTM32F103RC/target.h	113;"	d
RSSI_ADC_CHANNEL	./target/NAZE/target.h	160;"	d
RSSI_ADC_CHANNEL	./target/OLIMEXINO/target.h	100;"	d
RSSI_ADC_CHANNEL	./target/PORT103R/target.h	123;"	d
RSSI_ADC_CHANNEL	./target/SPRACINGF3/target.h	143;"	d
RSSI_ADC_CHANNEL	./target/STM32F3DISCOVERY/target.h	86;"	d
RSSI_ADC_CHANNEL	./target/SUPERBEE/target.h	173;"	d
RSSI_ADC_GPIO	./target/CC3D/target.h	103;"	d
RSSI_ADC_GPIO	./target/CHEBUZZF3/target.h	93;"	d
RSSI_ADC_GPIO	./target/EUSTM32F103RC/target.h	111;"	d
RSSI_ADC_GPIO	./target/NAZE/target.h	158;"	d
RSSI_ADC_GPIO	./target/OLIMEXINO/target.h	98;"	d
RSSI_ADC_GPIO	./target/PORT103R/target.h	121;"	d
RSSI_ADC_GPIO	./target/SPRACINGF3/target.h	141;"	d
RSSI_ADC_GPIO	./target/STM32F3DISCOVERY/target.h	84;"	d
RSSI_ADC_GPIO	./target/SUPERBEE/target.h	171;"	d
RSSI_ADC_GPIO_PIN	./target/CC3D/target.h	104;"	d
RSSI_ADC_GPIO_PIN	./target/CHEBUZZF3/target.h	94;"	d
RSSI_ADC_GPIO_PIN	./target/EUSTM32F103RC/target.h	112;"	d
RSSI_ADC_GPIO_PIN	./target/NAZE/target.h	159;"	d
RSSI_ADC_GPIO_PIN	./target/OLIMEXINO/target.h	99;"	d
RSSI_ADC_GPIO_PIN	./target/PORT103R/target.h	122;"	d
RSSI_ADC_GPIO_PIN	./target/SPRACINGF3/target.h	142;"	d
RSSI_ADC_GPIO_PIN	./target/STM32F3DISCOVERY/target.h	85;"	d
RSSI_ADC_GPIO_PIN	./target/SUPERBEE/target.h	172;"	d
RSSI_ADC_SAMPLE_COUNT	./rx/rx.c	398;"	d	file:
RSSI_SCALE_DEFAULT	./rx/rx.h	78;"	d
RSSI_SCALE_MAX	./rx/rx.h	77;"	d
RSSI_SCALE_MIN	./rx/rx.h	76;"	d
RX_CHANNELS_PER_PAGE_COUNT	./io/display.c	255;"	d	file:
RX_TOTAL_BITS	./drivers/serial_softserial.c	39;"	d	file:
Reboot_Loader	./startup/startup_stm32f10x_hd_gcc.S	/^Reboot_Loader:                       \/\/ HJI - TC bootloader entry on reset mod$/;"	l
Reboot_Loader	./startup/startup_stm32f10x_md_gcc.S	/^Reboot_Loader:                       \/\/ HJI - TC bootloader entry on reset mod$/;"	l
Reboot_Loader	./startup/startup_stm32f30x_md_gcc.S	/^Reboot_Loader:                \/\/ HJI 11\/9\/2012$/;"	l
Request	./vcp/usb_prop.c	/^uint8_t Request = 0;$/;"	v
Reset_Handler	./startup/startup_stm32f10x_hd_gcc.S	/^Reset_Handler:$/;"	l
Reset_Handler	./startup/startup_stm32f10x_md_gcc.S	/^Reset_Handler:$/;"	l
Reset_Handler	./startup/startup_stm32f30x_md_gcc.S	/^Reset_Handler:$/;"	l
Resume	./vcp/usb_pwr.c	/^void Resume(RESUME_STATE eResumeSetVal)$/;"	f
ResumeS	./vcp/usb_pwr.c	/^} ResumeS;$/;"	v	typeref:struct:__anon15
Resume_Init	./vcp/usb_pwr.c	/^void Resume_Init(void)$/;"	f
SATELLITE_COUNT	./io/display.c	325;"	d	file:
SATELLITE_GRAPH_LEFT_OFFSET	./io/display.c	326;"	d	file:
SBAS_AUTO	./io/gps.h	/^    SBAS_AUTO = 0,$/;"	e	enum:__anon62
SBAS_EGNOS	./io/gps.h	/^    SBAS_EGNOS,$/;"	e	enum:__anon62
SBAS_GAGAN	./io/gps.h	/^    SBAS_GAGAN$/;"	e	enum:__anon62
SBAS_MODE_MAX	./io/gps.h	40;"	d
SBAS_MSAS	./io/gps.h	/^    SBAS_MSAS,$/;"	e	enum:__anon62
SBAS_WAAS	./io/gps.h	/^    SBAS_WAAS,$/;"	e	enum:__anon62
SBSP_B	./io/serial_msp.c	/^    SBSP_B,     \/\/ 'B'$/;"	e	enum:__anon73	file:
SBSP_CMD_RECEIVED	./io/serial_msp.c	/^    SBSP_CMD_RECEIVED$/;"	e	enum:__anon73	file:
SBSP_FRESH_POS_OPT	./io/serial_msp.c	172;"	d	file:
SBSP_IDENT	./io/serial_msp.c	171;"	d	file:
SBSP_START	./io/serial_msp.c	/^    SBSP_START, \/\/ '$'$/;"	e	enum:__anon73	file:
SBSP_VERSION	./io/serial_msp.c	169;"	d	file:
SBUS_BAUDRATE	./rx/sbus.c	69;"	d	file:
SBUS_DIGITAL_CHANNEL_MAX	./rx/sbus.c	73;"	d	file:
SBUS_DIGITAL_CHANNEL_MIN	./rx/sbus.c	72;"	d	file:
SBUS_FLAG_CHANNEL_17	./rx/sbus.c	100;"	d	file:
SBUS_FLAG_CHANNEL_18	./rx/sbus.c	101;"	d	file:
SBUS_FLAG_FAILSAFE_ACTIVE	./rx/sbus.c	103;"	d	file:
SBUS_FLAG_SIGNAL_LOSS	./rx/sbus.c	102;"	d	file:
SBUS_FRAME_BEGIN_BYTE	./rx/sbus.c	67;"	d	file:
SBUS_FRAME_SIZE	./rx/sbus.c	65;"	d	file:
SBUS_MAX_CHANNEL	./rx/sbus.c	64;"	d	file:
SBUS_PORT_OPTIONS	./rx/sbus.c	70;"	d	file:
SBUS_STATE_FAILSAFE	./rx/sbus.c	59;"	d	file:
SBUS_STATE_SIGNALLOSS	./rx/sbus.c	60;"	d	file:
SBUS_TIME_NEEDED_PER_FRAME	./rx/sbus.c	50;"	d	file:
SCL_H	./drivers/bus_i2c_soft.c	33;"	d	file:
SCL_H	./drivers/bus_i2c_soft.c	46;"	d	file:
SCL_L	./drivers/bus_i2c_soft.c	34;"	d	file:
SCL_L	./drivers/bus_i2c_soft.c	47;"	d	file:
SCL_read	./drivers/bus_i2c_soft.c	39;"	d	file:
SCL_read	./drivers/bus_i2c_soft.c	52;"	d	file:
SCREEN_CHARACTER_COLUMN_COUNT	./drivers/display_ug2864hsweg01.h	31;"	d
SCREEN_CHARACTER_ROW_COUNT	./drivers/display_ug2864hsweg01.h	32;"	d
SCREEN_HEIGHT	./drivers/display_ug2864hsweg01.h	21;"	d
SCREEN_WIDTH	./drivers/display_ug2864hsweg01.h	20;"	d
SDA_H	./drivers/bus_i2c_soft.c	36;"	d	file:
SDA_H	./drivers/bus_i2c_soft.c	49;"	d	file:
SDA_L	./drivers/bus_i2c_soft.c	37;"	d	file:
SDA_L	./drivers/bus_i2c_soft.c	50;"	d	file:
SDA_read	./drivers/bus_i2c_soft.c	40;"	d	file:
SDA_read	./drivers/bus_i2c_soft.c	53;"	d	file:
SECOND_PORT_INDEX	./config/config.c	262;"	d	file:
SECOND_PORT_INDEX	./config/config.c	265;"	d	file:
SECTION_MASK	./io/serial_cli.c	248;"	d	file:
SECTOR_ERASE_TIMEOUT_MILLIS	./drivers/flash_m25p16.c	55;"	d	file:
SELF_TEST_HIGH_LIMIT	./drivers/compass_hmc5883l.c	115;"	d	file:
SELF_TEST_LOW_LIMIT	./drivers/compass_hmc5883l.c	114;"	d	file:
SEND_BREAK	./vcp/usb_prop.h	63;"	d
SEND_ENCAPSULATED_COMMAND	./vcp/usb_prop.h	55;"	d
SENSOR_ACC	./sensors/sensors.h	/^    SENSOR_ACC = 1 << 1,$/;"	e	enum:__anon121
SENSOR_BARO	./sensors/sensors.h	/^    SENSOR_BARO = 1 << 2,$/;"	e	enum:__anon121
SENSOR_GPS	./sensors/sensors.h	/^    SENSOR_GPS = 1 << 5,$/;"	e	enum:__anon121
SENSOR_GPSMAG	./sensors/sensors.h	/^    SENSOR_GPSMAG = 1 << 6,$/;"	e	enum:__anon121
SENSOR_GYRO	./sensors/sensors.h	/^    SENSOR_GYRO = 1 << 0, \/\/ always present$/;"	e	enum:__anon121
SENSOR_INDEX_ACC	./sensors/sensors.h	/^    SENSOR_INDEX_ACC,$/;"	e	enum:__anon119
SENSOR_INDEX_BARO	./sensors/sensors.h	/^    SENSOR_INDEX_BARO,$/;"	e	enum:__anon119
SENSOR_INDEX_GYRO	./sensors/sensors.h	/^    SENSOR_INDEX_GYRO = 0,$/;"	e	enum:__anon119
SENSOR_INDEX_MAG	./sensors/sensors.h	/^    SENSOR_INDEX_MAG$/;"	e	enum:__anon119
SENSOR_MAG	./sensors/sensors.h	/^    SENSOR_MAG = 1 << 3,$/;"	e	enum:__anon121
SENSOR_MOCAP	./sensors/sensors.h	/^    SENSOR_MOCAP = 1 << 7,$/;"	e	enum:__anon121
SENSOR_NAMES_MASK	./io/serial_cli.c	173;"	d	file:
SENSOR_SONAR	./sensors/sensors.h	/^    SENSOR_SONAR = 1 << 4,$/;"	e	enum:__anon121
SERIALRX_PROVIDER_COUNT	./rx/rx.h	53;"	d
SERIALRX_PROVIDER_MAX	./rx/rx.h	/^    SERIALRX_PROVIDER_MAX = SERIALRX_XBUS_MODE_B_RJ01$/;"	e	enum:__anon3
SERIALRX_SBUS	./rx/rx.h	/^    SERIALRX_SBUS = 2,$/;"	e	enum:__anon3
SERIALRX_SPEKTRUM1024	./rx/rx.h	/^    SERIALRX_SPEKTRUM1024 = 0,$/;"	e	enum:__anon3
SERIALRX_SPEKTRUM2048	./rx/rx.h	/^    SERIALRX_SPEKTRUM2048 = 1,$/;"	e	enum:__anon3
SERIALRX_SUMD	./rx/rx.h	/^    SERIALRX_SUMD = 3,$/;"	e	enum:__anon3
SERIALRX_SUMH	./rx/rx.h	/^    SERIALRX_SUMH = 4,$/;"	e	enum:__anon3
SERIALRX_XBUS_MODE_B	./rx/rx.h	/^    SERIALRX_XBUS_MODE_B = 5,$/;"	e	enum:__anon3
SERIALRX_XBUS_MODE_B_RJ01	./rx/rx.h	/^    SERIALRX_XBUS_MODE_B_RJ01 = 6,$/;"	e	enum:__anon3
SERIAL_BIDIR	./drivers/serial.h	/^    SERIAL_BIDIR         = 1 << 3$/;"	e	enum:portOptions_t
SERIAL_INVERTED	./drivers/serial.h	/^    SERIAL_INVERTED      = 1 << 0,$/;"	e	enum:portOptions_t
SERIAL_NOT_INVERTED	./drivers/serial.h	/^    SERIAL_NOT_INVERTED  = 0 << 0,$/;"	e	enum:portOptions_t
SERIAL_PARITY_EVEN	./drivers/serial.h	/^    SERIAL_PARITY_EVEN   = 1 << 2,$/;"	e	enum:portOptions_t
SERIAL_PARITY_NO	./drivers/serial.h	/^    SERIAL_PARITY_NO     = 0 << 2,$/;"	e	enum:portOptions_t
SERIAL_PORT_COUNT	./target/ALIENWIIF3/target.h	63;"	d
SERIAL_PORT_COUNT	./target/CC3D/target.h	74;"	d
SERIAL_PORT_COUNT	./target/CHEBUZZF3/target.h	74;"	d
SERIAL_PORT_COUNT	./target/CJMCU/target.h	51;"	d
SERIAL_PORT_COUNT	./target/EUSTM32F103RC/target.h	85;"	d
SERIAL_PORT_COUNT	./target/NAZE/target.h	125;"	d
SERIAL_PORT_COUNT	./target/NAZE32PRO/target.h	38;"	d
SERIAL_PORT_COUNT	./target/OLIMEXINO/target.h	72;"	d
SERIAL_PORT_COUNT	./target/PORT103R/target.h	95;"	d
SERIAL_PORT_COUNT	./target/SPARKY/target.h	57;"	d
SERIAL_PORT_COUNT	./target/SPRACINGF3/target.h	70;"	d
SERIAL_PORT_COUNT	./target/STM32F3DISCOVERY/target.h	65;"	d
SERIAL_PORT_COUNT	./target/SUPERBEE/target.h	138;"	d
SERIAL_PORT_IDENTIFIER_MAX	./io/serial.h	/^    SERIAL_PORT_IDENTIFIER_MAX = SERIAL_PORT_SOFTSERIAL2$/;"	e	enum:__anon72
SERIAL_PORT_NONE	./io/serial.h	/^    SERIAL_PORT_NONE = -1,$/;"	e	enum:__anon72
SERIAL_PORT_SOFTSERIAL1	./io/serial.h	/^    SERIAL_PORT_SOFTSERIAL1 = 30,$/;"	e	enum:__anon72
SERIAL_PORT_SOFTSERIAL2	./io/serial.h	/^    SERIAL_PORT_SOFTSERIAL2,$/;"	e	enum:__anon72
SERIAL_PORT_USART1	./io/serial.h	/^    SERIAL_PORT_USART1 = 0,$/;"	e	enum:__anon72
SERIAL_PORT_USART2	./io/serial.h	/^    SERIAL_PORT_USART2,$/;"	e	enum:__anon72
SERIAL_PORT_USART3	./io/serial.h	/^    SERIAL_PORT_USART3,$/;"	e	enum:__anon72
SERIAL_PORT_USART4	./io/serial.h	/^    SERIAL_PORT_USART4,$/;"	e	enum:__anon72
SERIAL_PORT_USB_VCP	./io/serial.h	/^    SERIAL_PORT_USB_VCP = 20,$/;"	e	enum:__anon72
SERIAL_RX	./target/ALIENWIIF3/target.h	114;"	d
SERIAL_RX	./target/CC3D/target.h	113;"	d
SERIAL_RX	./target/CHEBUZZF3/target.h	123;"	d
SERIAL_RX	./target/CJMCU/target.h	60;"	d
SERIAL_RX	./target/EUSTM32F103RC/target.h	125;"	d
SERIAL_RX	./target/NAZE/target.h	173;"	d
SERIAL_RX	./target/NAZE32PRO/target.h	46;"	d
SERIAL_RX	./target/OLIMEXINO/target.h	111;"	d
SERIAL_RX	./target/PORT103R/target.h	136;"	d
SERIAL_RX	./target/SPARKY/target.h	113;"	d
SERIAL_RX	./target/SPRACINGF3/target.h	162;"	d
SERIAL_RX	./target/STM32F3DISCOVERY/target.h	97;"	d
SERIAL_RX	./target/SUPERBEE/target.h	186;"	d
SERIAL_RX_FRAME_COMPLETE	./rx/rx.h	/^    SERIAL_RX_FRAME_COMPLETE = (1 << 0),$/;"	e	enum:__anon2
SERIAL_RX_FRAME_FAILSAFE	./rx/rx.h	/^    SERIAL_RX_FRAME_FAILSAFE = (1 << 1)$/;"	e	enum:__anon2
SERIAL_RX_FRAME_PENDING	./rx/rx.h	/^    SERIAL_RX_FRAME_PENDING = 0,$/;"	e	enum:__anon2
SERIAL_STOPBITS_1	./drivers/serial.h	/^    SERIAL_STOPBITS_1    = 0 << 1,$/;"	e	enum:portOptions_t
SERIAL_STOPBITS_2	./drivers/serial.h	/^    SERIAL_STOPBITS_2    = 1 << 1,$/;"	e	enum:portOptions_t
SERIAL_UNIDIR	./drivers/serial.h	/^    SERIAL_UNIDIR        = 0 << 3,$/;"	e	enum:portOptions_t
SERVO_BIPLANE_LEFT	./flight/mixer.c	/^    SERVO_BIPLANE_LEFT = 4,$/;"	e	enum:__anon12	file:
SERVO_BIPLANE_RIGHT	./flight/mixer.c	/^    SERVO_BIPLANE_RIGHT = 5,$/;"	e	enum:__anon12	file:
SERVO_CHUNK_SIZE	./io/serial_msp.c	319;"	d	file:
SERVO_DUALCOPTER_INDEX_MAX	./flight/mixer.c	82;"	d	file:
SERVO_DUALCOPTER_INDEX_MIN	./flight/mixer.c	81;"	d	file:
SERVO_DUALCOPTER_LEFT	./flight/mixer.c	/^    SERVO_DUALCOPTER_LEFT = 4,$/;"	e	enum:__anon12	file:
SERVO_DUALCOPTER_RIGHT	./flight/mixer.c	/^    SERVO_DUALCOPTER_RIGHT = 5,$/;"	e	enum:__anon12	file:
SERVO_ELEVATOR	./flight/mixer.c	/^    SERVO_ELEVATOR = 6,$/;"	e	enum:__anon12	file:
SERVO_FLAPPERONS_MAX	./flight/mixer.c	88;"	d	file:
SERVO_FLAPPERONS_MIN	./flight/mixer.c	87;"	d	file:
SERVO_FLAPPERON_1	./flight/mixer.c	/^    SERVO_FLAPPERON_1 = 3,$/;"	e	enum:__anon12	file:
SERVO_FLAPPERON_2	./flight/mixer.c	/^    SERVO_FLAPPERON_2 = 4,$/;"	e	enum:__anon12	file:
SERVO_FLAPS	./flight/mixer.c	/^    SERVO_FLAPS = 2,$/;"	e	enum:__anon12	file:
SERVO_GIMBAL_PITCH	./flight/mixer.c	/^    SERVO_GIMBAL_PITCH = 0,$/;"	e	enum:__anon12	file:
SERVO_GIMBAL_ROLL	./flight/mixer.c	/^    SERVO_GIMBAL_ROLL = 1,$/;"	e	enum:__anon12	file:
SERVO_PLANE_INDEX_MAX	./flight/mixer.c	79;"	d	file:
SERVO_PLANE_INDEX_MIN	./flight/mixer.c	78;"	d	file:
SERVO_RUDDER	./flight/mixer.c	/^    SERVO_RUDDER = 5,$/;"	e	enum:__anon12	file:
SERVO_SINGLECOPTER_1	./flight/mixer.c	/^    SERVO_SINGLECOPTER_1 = 3,$/;"	e	enum:__anon12	file:
SERVO_SINGLECOPTER_2	./flight/mixer.c	/^    SERVO_SINGLECOPTER_2 = 4,$/;"	e	enum:__anon12	file:
SERVO_SINGLECOPTER_3	./flight/mixer.c	/^    SERVO_SINGLECOPTER_3 = 5,$/;"	e	enum:__anon12	file:
SERVO_SINGLECOPTER_4	./flight/mixer.c	/^    SERVO_SINGLECOPTER_4 = 6,$/;"	e	enum:__anon12	file:
SERVO_SINGLECOPTER_INDEX_MAX	./flight/mixer.c	85;"	d	file:
SERVO_SINGLECOPTER_INDEX_MIN	./flight/mixer.c	84;"	d	file:
SERVO_THROTTLE	./flight/mixer.c	/^    SERVO_THROTTLE = 7, \/\/ for internal combustion (IC) planes$/;"	e	enum:__anon12	file:
SET_COMM_FEATURE	./vcp/usb_prop.h	57;"	d
SET_CONTROL_LINE_STATE	./vcp/usb_prop.h	62;"	d
SET_LINE_CODING	./vcp/usb_prop.h	60;"	d
SIGNED	./blackbox/blackbox.c	97;"	d	file:
SLOW_FRAME_INTERVAL	./blackbox/blackbox.c	84;"	d	file:
SMALL_ANGLE	./config/runtime_config.h	/^    SMALL_ANGLE    = (1 << 3),$/;"	e	enum:__anon20
SMARTPORT_BAUD	./telemetry/smartport.c	136;"	d	file:
SMARTPORT_NOT_CONNECTED_TIMEOUT_MS	./telemetry/smartport.c	139;"	d	file:
SMARTPORT_SERVICE_TIMEOUT_MS	./telemetry/smartport.c	138;"	d	file:
SMARTPORT_UART_MODE	./telemetry/smartport.c	137;"	d	file:
SMD500_PARAM_MG	./drivers/barometer_bmp085.c	105;"	d	file:
SMD500_PARAM_MH	./drivers/barometer_bmp085.c	106;"	d	file:
SMD500_PARAM_MI	./drivers/barometer_bmp085.c	107;"	d	file:
SOFTSERIAL1	./drivers/serial_softserial.h	/^    SOFTSERIAL1 = 0,$/;"	e	enum:__anon60
SOFTSERIAL2	./drivers/serial_softserial.h	/^    SOFTSERIAL2$/;"	e	enum:__anon60
SOFTSERIAL_1_TIMER	./target/CC3D/target.h	76;"	d
SOFTSERIAL_1_TIMER	./target/EUSTM32F103RC/target.h	87;"	d
SOFTSERIAL_1_TIMER	./target/NAZE/target.h	127;"	d
SOFTSERIAL_1_TIMER	./target/OLIMEXINO/target.h	74;"	d
SOFTSERIAL_1_TIMER	./target/PORT103R/target.h	97;"	d
SOFTSERIAL_1_TIMER	./target/SPRACINGF3/target.h	97;"	d
SOFTSERIAL_1_TIMER	./target/SUPERBEE/target.h	140;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/CC3D/target.h	78;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/EUSTM32F103RC/target.h	88;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/NAZE/target.h	128;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/OLIMEXINO/target.h	75;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/PORT103R/target.h	98;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/SPRACINGF3/target.h	98;"	d
SOFTSERIAL_1_TIMER_RX_HARDWARE	./target/SUPERBEE/target.h	141;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/CC3D/target.h	77;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/EUSTM32F103RC/target.h	89;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/NAZE/target.h	129;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/OLIMEXINO/target.h	76;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/PORT103R/target.h	99;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/SPRACINGF3/target.h	99;"	d
SOFTSERIAL_1_TIMER_TX_HARDWARE	./target/SUPERBEE/target.h	142;"	d
SOFTSERIAL_2_TIMER	./target/EUSTM32F103RC/target.h	90;"	d
SOFTSERIAL_2_TIMER	./target/NAZE/target.h	130;"	d
SOFTSERIAL_2_TIMER	./target/OLIMEXINO/target.h	77;"	d
SOFTSERIAL_2_TIMER	./target/PORT103R/target.h	100;"	d
SOFTSERIAL_2_TIMER	./target/SPRACINGF3/target.h	100;"	d
SOFTSERIAL_2_TIMER	./target/SUPERBEE/target.h	143;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/EUSTM32F103RC/target.h	91;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/NAZE/target.h	131;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/OLIMEXINO/target.h	78;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/PORT103R/target.h	101;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/SPRACINGF3/target.h	101;"	d
SOFTSERIAL_2_TIMER_RX_HARDWARE	./target/SUPERBEE/target.h	144;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/EUSTM32F103RC/target.h	92;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/NAZE/target.h	132;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/OLIMEXINO/target.h	79;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/PORT103R/target.h	102;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/SPRACINGF3/target.h	102;"	d
SOFTSERIAL_2_TIMER_TX_HARDWARE	./target/SUPERBEE/target.h	145;"	d
SOFTSERIAL_BUFFER_SIZE	./drivers/serial_softserial.h	20;"	d
SONAR	./target/CC3D/target.h	114;"	d
SONAR	./target/CC3D/target.h	122;"	d
SONAR	./target/EUSTM32F103RC/target.h	75;"	d
SONAR	./target/NAZE/target.h	113;"	d
SONAR	./target/OLIMEXINO/target.h	66;"	d
SONAR	./target/PORT103R/target.h	83;"	d
SONAR	./target/SPRACINGF3/target.h	61;"	d
SONAR	./target/SUPERBEE/target.h	122;"	d
SONAR	./target/SUPERBEE/target.h	124;"	d
SONAR_GPIO	./drivers/sonar_hcsr04.h	28;"	d
SONAR_MODE	./config/runtime_config.h	/^    SONAR_MODE      = (1 << 9),$/;"	e	enum:__anon19
SPEKTRUM_1024_CHANNEL_COUNT	./rx/spektrum.c	42;"	d	file:
SPEKTRUM_2048_CHANNEL_COUNT	./rx/spektrum.c	41;"	d	file:
SPEKTRUM_BAUDRATE	./rx/spektrum.c	46;"	d	file:
SPEKTRUM_BIND	./target/ALIENWIIF3/target.h	121;"	d
SPEKTRUM_BIND	./target/CC3D/target.h	126;"	d
SPEKTRUM_BIND	./target/CJMCU/target.h	64;"	d
SPEKTRUM_BIND	./target/EUSTM32F103RC/target.h	130;"	d
SPEKTRUM_BIND	./target/NAZE/target.h	178;"	d
SPEKTRUM_BIND	./target/NAZE32PRO/target.h	51;"	d
SPEKTRUM_BIND	./target/SPARKY/target.h	154;"	d
SPEKTRUM_BIND	./target/SPRACINGF3/target.h	168;"	d
SPEKTRUM_BIND	./target/SUPERBEE/target.h	191;"	d
SPEKTRUM_MAX_SUPPORTED_CHANNEL_COUNT	./rx/spektrum.c	40;"	d	file:
SPEKTRUM_SAT_BIND_DISABLED	./rx/spektrum.h	20;"	d
SPEKTRUM_SAT_BIND_MAX	./rx/spektrum.h	21;"	d
SPEK_FRAME_SIZE	./rx/spektrum.c	44;"	d	file:
SPI1_GPIO	./drivers/bus_spi.c	37;"	d	file:
SPI1_GPIO_PERIPHERAL	./drivers/bus_spi.c	38;"	d	file:
SPI1_MISO_CLK	./drivers/bus_spi.c	44;"	d	file:
SPI1_MISO_PIN	./drivers/bus_spi.c	42;"	d	file:
SPI1_MISO_PIN_SOURCE	./drivers/bus_spi.c	43;"	d	file:
SPI1_MOSI_CLK	./drivers/bus_spi.c	47;"	d	file:
SPI1_MOSI_PIN	./drivers/bus_spi.c	45;"	d	file:
SPI1_MOSI_PIN_SOURCE	./drivers/bus_spi.c	46;"	d	file:
SPI1_SCK_CLK	./drivers/bus_spi.c	41;"	d	file:
SPI1_SCK_PIN	./drivers/bus_spi.c	39;"	d	file:
SPI1_SCK_PIN_SOURCE	./drivers/bus_spi.c	40;"	d	file:
SPI2_GPIO	./drivers/bus_spi.c	127;"	d	file:
SPI2_GPIO	./target/SPRACINGF3/target.h	110;"	d
SPI2_GPIO_PERIPHERAL	./drivers/bus_spi.c	128;"	d	file:
SPI2_GPIO_PERIPHERAL	./target/SPRACINGF3/target.h	111;"	d
SPI2_MISO_PIN	./drivers/bus_spi.c	133;"	d	file:
SPI2_MISO_PIN	./target/SPRACINGF3/target.h	116;"	d
SPI2_MISO_PIN_SOURCE	./drivers/bus_spi.c	134;"	d	file:
SPI2_MISO_PIN_SOURCE	./target/SPRACINGF3/target.h	117;"	d
SPI2_MOSI_PIN	./drivers/bus_spi.c	135;"	d	file:
SPI2_MOSI_PIN	./target/SPRACINGF3/target.h	118;"	d
SPI2_MOSI_PIN_SOURCE	./drivers/bus_spi.c	136;"	d	file:
SPI2_MOSI_PIN_SOURCE	./target/SPRACINGF3/target.h	119;"	d
SPI2_NSS_PIN	./drivers/bus_spi.c	129;"	d	file:
SPI2_NSS_PIN	./target/SPRACINGF3/target.h	112;"	d
SPI2_NSS_PIN_SOURCE	./drivers/bus_spi.c	130;"	d	file:
SPI2_NSS_PIN_SOURCE	./target/SPRACINGF3/target.h	113;"	d
SPI2_SCK_PIN	./drivers/bus_spi.c	131;"	d	file:
SPI2_SCK_PIN	./target/SPRACINGF3/target.h	114;"	d
SPI2_SCK_PIN_SOURCE	./drivers/bus_spi.c	132;"	d	file:
SPI2_SCK_PIN_SOURCE	./target/SPRACINGF3/target.h	115;"	d
SPI_0_5625MHZ_CLOCK_DIVIDER	./drivers/bus_spi.h	20;"	d
SPI_18MHZ_CLOCK_DIVIDER	./drivers/bus_spi.h	21;"	d
SPI_9MHZ_CLOCK_DIVIDER	./drivers/bus_spi.h	22;"	d
SPI_DEVICE_FLASH	./target/NAZE/hardware_revision.c	57;"	d	file:
SPI_DEVICE_FLASH	./target/SUPERBEE/hardware_revision.c	57;"	d	file:
SPI_DEVICE_MPU	./target/NAZE/hardware_revision.c	58;"	d	file:
SPI_DEVICE_MPU	./target/SUPERBEE/hardware_revision.c	58;"	d	file:
SPI_DEVICE_NONE	./target/NAZE/hardware_revision.c	56;"	d	file:
SPI_DEVICE_NONE	./target/SUPERBEE/hardware_revision.c	56;"	d	file:
SPSTATE_INITIALIZED	./telemetry/smartport.c	/^    SPSTATE_INITIALIZED,$/;"	e	enum:__anon110	file:
SPSTATE_TIMEDOUT	./telemetry/smartport.c	/^    SPSTATE_TIMEDOUT,$/;"	e	enum:__anon110	file:
SPSTATE_UNINITIALIZED	./telemetry/smartport.c	/^    SPSTATE_UNINITIALIZED,$/;"	e	enum:__anon110	file:
SPSTATE_WORKING	./telemetry/smartport.c	/^    SPSTATE_WORKING,$/;"	e	enum:__anon110	file:
STANDARD_ENDPOINT_DESC_SIZE	./vcp/usb_desc.h	53;"	d
START_BIT_MASK	./drivers/serial_softserial.c	302;"	d	file:
STATE	./config/runtime_config.h	63;"	d
STATIC_ASSERT	./blackbox/blackbox.c	88;"	d	file:
STATIC_UNIT_TESTED	./build_config.h	24;"	d
STATIC_UNIT_TESTED	./build_config.h	27;"	d
STICK_CHANNEL_COUNT	./rx/rx.h	20;"	d
STOP_BIT_MASK	./drivers/serial_softserial.c	301;"	d	file:
STR	./common/utils.h	28;"	d
STR	./version.h	23;"	d
STR_HELPER	./common/utils.h	27;"	d
STR_HELPER	./version.h	22;"	d
SUMD_BAUDRATE	./rx/sumd.c	43;"	d	file:
SUMD_BUFFSIZE	./rx/sumd.c	41;"	d	file:
SUMD_BYTES_PER_CHANNEL	./rx/sumd.c	104;"	d	file:
SUMD_FRAME_STATE_FAILSAFE	./rx/sumd.c	108;"	d	file:
SUMD_FRAME_STATE_OK	./rx/sumd.c	107;"	d	file:
SUMD_MAX_CHANNEL	./rx/sumd.c	40;"	d	file:
SUMD_OFFSET_CHANNEL_1_HIGH	./rx/sumd.c	102;"	d	file:
SUMD_OFFSET_CHANNEL_1_LOW	./rx/sumd.c	103;"	d	file:
SUMD_SYNCBYTE	./rx/sumd.c	39;"	d	file:
SUMH_BAUDRATE	./rx/sumh.c	43;"	d	file:
SUMH_FRAME_SIZE	./rx/sumh.c	46;"	d	file:
SUMH_MAX_CHANNEL_COUNT	./rx/sumh.c	45;"	d	file:
SUSPENDED	./vcp/usb_pwr.h	/^    SUSPENDED,$/;"	e	enum:_DEVICE_STATE
SVC_Handler	./vcp/stm32_it.c	/^void SVC_Handler(void)$/;"	f
SYSTEM_STATE_CONFIG_LOADED	./main.c	/^    SYSTEM_STATE_CONFIG_LOADED  = (1 << 0),$/;"	e	enum:__anon125	file:
SYSTEM_STATE_INITIALISING	./main.c	/^    SYSTEM_STATE_INITIALISING   = 0,$/;"	e	enum:__anon125	file:
SYSTEM_STATE_MOTORS_READY	./main.c	/^    SYSTEM_STATE_MOTORS_READY   = (1 << 2),$/;"	e	enum:__anon125	file:
SYSTEM_STATE_READY	./main.c	/^    SYSTEM_STATE_READY          = (1 << 7)$/;"	e	enum:__anon125	file:
SYSTEM_STATE_SENSORS_READY	./main.c	/^    SYSTEM_STATE_SENSORS_READY  = (1 << 1),$/;"	e	enum:__anon125	file:
SerialRXType	./rx/rx.h	/^} SerialRXType;$/;"	t	typeref:enum:__anon3
SetSysClock	./target/ALIENWIIF3/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
SetSysClock	./target/CHEBUZZF3/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
SetSysClock	./target/NAZE32PRO/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
SetSysClock	./target/SPARKY/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
SetSysClock	./target/SPRACINGF3/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
SetSysClock	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^void SetSysClock(void)$/;"	f
Set_System	./vcp/hw_config.c	/^void Set_System(void)$/;"	f
Set_USBClock	./vcp/hw_config.c	/^void Set_USBClock(void)$/;"	f
Speed_10MHz	./drivers/gpio.h	/^    Speed_10MHz = 1,$/;"	e	enum:__anon47
Speed_2MHz	./drivers/gpio.h	/^    Speed_2MHz,$/;"	e	enum:__anon47
Speed_50MHz	./drivers/gpio.h	/^    Speed_50MHz$/;"	e	enum:__anon47
StopPwmAllMotors	./flight/mixer.c	/^void StopPwmAllMotors()$/;"	f
String_Descriptor	./vcp/usb_prop.c	/^ONE_DESCRIPTOR String_Descriptor[4] = { { (uint8_t*)Virtual_Com_Port_StringLangID, VIRTUAL_COM_PORT_SIZ_STRING_LANGID }, { (uint8_t*)Virtual_Com_Port_StringVendor, VIRTUAL_COM_PORT_SIZ_STRING_VENDOR }, { (uint8_t*)Virtual_Com_Port_StringProduct,$/;"	v
Suspend	./vcp/usb_pwr.c	/^void Suspend(void)$/;"	f
SysTick_Handler	./drivers/system.c	/^void SysTick_Handler(void)$/;"	f
SystemCoreClock	./target/ALIENWIIF3/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClock	./target/CHEBUZZF3/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClock	./target/NAZE32PRO/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClock	./target/SPARKY/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClock	./target/SPRACINGF3/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClock	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^  uint32_t SystemCoreClock = 72000000;$/;"	v
SystemCoreClockUpdate	./target/ALIENWIIF3/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemCoreClockUpdate	./target/CHEBUZZF3/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemCoreClockUpdate	./target/NAZE32PRO/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemCoreClockUpdate	./target/SPARKY/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemCoreClockUpdate	./target/SPRACINGF3/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemCoreClockUpdate	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^void SystemCoreClockUpdate (void)$/;"	f
SystemInit	./target/ALIENWIIF3/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
SystemInit	./target/CHEBUZZF3/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
SystemInit	./target/NAZE32PRO/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
SystemInit	./target/SPARKY/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
SystemInit	./target/SPRACINGF3/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
SystemInit	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^void SystemInit(void)$/;"	f
TAN_89_99_DEGREES	./flight/navigation.c	448;"	d	file:
TARGET_BOARD_IDENTIFIER	./target/ALIENWIIF3/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/CC3D/target.h	18;"	d
TARGET_BOARD_IDENTIFIER	./target/CHEBUZZF3/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/CJMCU/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/EUSTM32F103RC/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/NAZE/target.h	185;"	d
TARGET_BOARD_IDENTIFIER	./target/NAZE/target.h	186;"	d
TARGET_BOARD_IDENTIFIER	./target/NAZE/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/NAZE32PRO/target.h	18;"	d
TARGET_BOARD_IDENTIFIER	./target/OLIMEXINO/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/PORT103R/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/SPARKY/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/SPRACINGF3/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/STM32F3DISCOVERY/target.h	20;"	d
TARGET_BOARD_IDENTIFIER	./target/SUPERBEE/target.h	198;"	d
TARGET_BOARD_IDENTIFIER	./target/SUPERBEE/target.h	199;"	d
TARGET_BOARD_IDENTIFIER	./target/SUPERBEE/target.h	20;"	d
TELEMETRY	./target/CC3D/target.h	112;"	d
TELEMETRY	./target/CHEBUZZF3/target.h	122;"	d
TELEMETRY	./target/EUSTM32F103RC/target.h	124;"	d
TELEMETRY	./target/NAZE/target.h	172;"	d
TELEMETRY	./target/NAZE32PRO/target.h	45;"	d
TELEMETRY	./target/OLIMEXINO/target.h	110;"	d
TELEMETRY	./target/PORT103R/target.h	135;"	d
TELEMETRY	./target/SPARKY/target.h	112;"	d
TELEMETRY	./target/SPRACINGF3/target.h	161;"	d
TELEMETRY	./target/STM32F3DISCOVERY/target.h	96;"	d
TELEMETRY	./target/SUPERBEE/target.h	185;"	d
TELEMETRY_COMMON_H_	./telemetry/telemetry.h	27;"	d
TELEMETRY_FRSKY_H_	./telemetry/frsky.h	21;"	d
TELEMETRY_FUNCTION_MASK	./mw.c	334;"	d	file:
TELEMETRY_MSP_COMMAND_SEQUENCE_ENTRY_COUNT	./io/serial_msp.c	1902;"	d	file:
TELEMETRY_MSP_H_	./telemetry/msp.h	26;"	d
TELEMETRY_MSP_INITIAL_PORT_MODE	./telemetry/msp.c	47;"	d	file:
TELEMETRY_SMARTPORT_H_	./telemetry/smartport.h	9;"	d
THROTTLE	./io/rc_controls.h	/^    THROTTLE,$/;"	e	enum:rc_alias
THROTTLE_HIGH	./io/rc_controls.h	/^    THROTTLE_HIGH$/;"	e	enum:__anon95
THROTTLE_LOOKUP_LENGTH	./io/rc_curves.h	22;"	d
THROTTLE_LOW	./io/rc_controls.h	/^    THROTTLE_LOW = 0,$/;"	e	enum:__anon95
THR_CE	./io/rc_controls.h	85;"	d
THR_HI	./io/rc_controls.h	86;"	d
THR_LO	./io/rc_controls.h	84;"	d
TICKER_CHARACTER_COUNT	./io/display.c	119;"	d	file:
TIMER_AHB_PERIPHERALS	./drivers/timer.c	114;"	d	file:
TIMER_AHB_PERIPHERALS	./drivers/timer.c	147;"	d	file:
TIMER_AHB_PERIPHERALS	./drivers/timer.c	174;"	d	file:
TIMER_AHB_PERIPHERALS	./drivers/timer.c	219;"	d	file:
TIMER_AHB_PERIPHERALS	./drivers/timer.c	251;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	112;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	145;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	172;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	217;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	249;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	65;"	d	file:
TIMER_APB1_PERIPHERALS	./drivers/timer.c	88;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	113;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	146;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	173;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	218;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	250;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	66;"	d	file:
TIMER_APB2_PERIPHERALS	./drivers/timer.c	89;"	d	file:
TIMER_INDEX	./drivers/timer.c	279;"	d	file:
TIME_SECTION_BEGIN	./debug.h	26;"	d
TIME_SECTION_BEGIN	./debug.h	38;"	d
TIME_SECTION_END	./debug.h	31;"	d
TIME_SECTION_END	./debug.h	39;"	d
TIM_IT_CCx	./drivers/timer.c	258;"	d	file:
TIM_N	./drivers/timer.c	35;"	d	file:
TIM_SelectOCxM_NoDisable	./drivers/timer_stm32f10x.c	/^void TIM_SelectOCxM_NoDisable(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)$/;"	f
TIM_SelectOCxM_NoDisable	./drivers/timer_stm32f30x.c	/^void TIM_SelectOCxM_NoDisable(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode)$/;"	f
TRAILING	./drivers/serial_softserial.c	/^    TRAILING,$/;"	e	enum:__anon38	file:
TX_TOTAL_BITS	./drivers/serial_softserial.c	40;"	d	file:
TYPE_ADC	./drivers/timer.h	/^    TYPE_ADC,$/;"	e	enum:__anon57
TYPE_FREE	./drivers/timer.h	/^    TYPE_FREE,$/;"	e	enum:__anon57
TYPE_PPMINPUT	./drivers/timer.h	/^    TYPE_PPMINPUT,$/;"	e	enum:__anon57
TYPE_PWMINPUT	./drivers/timer.h	/^    TYPE_PWMINPUT,$/;"	e	enum:__anon57
TYPE_PWMOUTPUT_FAST	./drivers/timer.h	/^    TYPE_PWMOUTPUT_FAST,$/;"	e	enum:__anon57
TYPE_PWMOUTPUT_MOTOR	./drivers/timer.h	/^    TYPE_PWMOUTPUT_MOTOR,$/;"	e	enum:__anon57
TYPE_PWMOUTPUT_SERVO	./drivers/timer.h	/^    TYPE_PWMOUTPUT_SERVO,$/;"	e	enum:__anon57
TYPE_SERIAL_RX	./drivers/timer.h	/^    TYPE_SERIAL_RX,$/;"	e	enum:__anon57
TYPE_SERIAL_RXTX	./drivers/timer.h	/^    TYPE_SERIAL_RXTX,$/;"	e	enum:__anon57
TYPE_SERIAL_TX	./drivers/timer.h	/^    TYPE_SERIAL_TX,$/;"	e	enum:__anon57
TYPE_SOFTSERIAL_AUXTIMER	./drivers/timer.h	/^    TYPE_SOFTSERIAL_AUXTIMER,    \/\/ timer channel is used for softserial. No IO function on pin$/;"	e	enum:__anon57
TYPE_SOFTSERIAL_RX	./drivers/timer.h	/^    TYPE_SOFTSERIAL_RX,$/;"	e	enum:__anon57
TYPE_SOFTSERIAL_RXTX	./drivers/timer.h	/^    TYPE_SOFTSERIAL_RXTX,        \/\/ bidirectional pin for softserial$/;"	e	enum:__anon57
TYPE_SOFTSERIAL_TX	./drivers/timer.h	/^    TYPE_SOFTSERIAL_TX,$/;"	e	enum:__anon57
TYPE_TIMER	./drivers/timer.h	/^    TYPE_TIMER$/;"	e	enum:__anon57
Temperature_Sensor	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t Temperature_Sensor;                \/* Temperature sensor enable\/disable *\/$/;"	m	struct:__anon55
UART1_GPIO	./drivers/serial_uart_stm32f30x.c	50;"	d	file:
UART1_GPIO	./target/ALIENWIIF3/target.h	67;"	d
UART1_GPIO	./target/SPARKY/target.h	61;"	d
UART1_GPIO	./target/SPRACINGF3/target.h	75;"	d
UART1_GPIO_AF	./drivers/serial_uart_stm32f30x.c	51;"	d	file:
UART1_GPIO_AF	./target/ALIENWIIF3/target.h	68;"	d
UART1_GPIO_AF	./target/SPARKY/target.h	62;"	d
UART1_GPIO_AF	./target/SPRACINGF3/target.h	76;"	d
UART1_RX_BUFFER_SIZE	./drivers/serial_uart.h	22;"	d
UART1_RX_PIN	./drivers/serial_uart_stm32f30x.c	49;"	d	file:
UART1_RX_PIN	./target/ALIENWIIF3/target.h	66;"	d
UART1_RX_PIN	./target/SPARKY/target.h	60;"	d
UART1_RX_PIN	./target/SPRACINGF3/target.h	74;"	d
UART1_RX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	53;"	d	file:
UART1_RX_PINSOURCE	./target/ALIENWIIF3/target.h	70;"	d
UART1_RX_PINSOURCE	./target/SPARKY/target.h	64;"	d
UART1_RX_PINSOURCE	./target/SPRACINGF3/target.h	78;"	d
UART1_TX_BUFFER_SIZE	./drivers/serial_uart.h	23;"	d
UART1_TX_PIN	./drivers/serial_uart_stm32f30x.c	48;"	d	file:
UART1_TX_PIN	./target/ALIENWIIF3/target.h	65;"	d
UART1_TX_PIN	./target/SPARKY/target.h	59;"	d
UART1_TX_PIN	./target/SPRACINGF3/target.h	73;"	d
UART1_TX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	52;"	d	file:
UART1_TX_PINSOURCE	./target/ALIENWIIF3/target.h	69;"	d
UART1_TX_PINSOURCE	./target/SPARKY/target.h	63;"	d
UART1_TX_PINSOURCE	./target/SPRACINGF3/target.h	77;"	d
UART2_GPIO	./drivers/serial_uart_stm32f30x.c	59;"	d	file:
UART2_GPIO	./target/ALIENWIIF3/target.h	74;"	d
UART2_GPIO	./target/SPARKY/target.h	68;"	d
UART2_GPIO	./target/SPRACINGF3/target.h	83;"	d
UART2_GPIO_AF	./drivers/serial_uart_stm32f30x.c	60;"	d	file:
UART2_GPIO_AF	./target/ALIENWIIF3/target.h	75;"	d
UART2_GPIO_AF	./target/SPARKY/target.h	69;"	d
UART2_GPIO_AF	./target/SPRACINGF3/target.h	84;"	d
UART2_RX_BUFFER_SIZE	./drivers/serial_uart.h	24;"	d
UART2_RX_PIN	./drivers/serial_uart_stm32f30x.c	58;"	d	file:
UART2_RX_PIN	./target/ALIENWIIF3/target.h	73;"	d
UART2_RX_PIN	./target/SPARKY/target.h	67;"	d
UART2_RX_PIN	./target/SPRACINGF3/target.h	82;"	d
UART2_RX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	62;"	d	file:
UART2_RX_PINSOURCE	./target/ALIENWIIF3/target.h	77;"	d
UART2_RX_PINSOURCE	./target/SPARKY/target.h	71;"	d
UART2_RX_PINSOURCE	./target/SPRACINGF3/target.h	86;"	d
UART2_TX_BUFFER_SIZE	./drivers/serial_uart.h	25;"	d
UART2_TX_PIN	./drivers/serial_uart_stm32f30x.c	57;"	d	file:
UART2_TX_PIN	./target/ALIENWIIF3/target.h	72;"	d
UART2_TX_PIN	./target/SPARKY/target.h	66;"	d
UART2_TX_PIN	./target/SPRACINGF3/target.h	81;"	d
UART2_TX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	61;"	d	file:
UART2_TX_PINSOURCE	./target/ALIENWIIF3/target.h	76;"	d
UART2_TX_PINSOURCE	./target/SPARKY/target.h	70;"	d
UART2_TX_PINSOURCE	./target/SPRACINGF3/target.h	85;"	d
UART3_GPIO	./drivers/serial_uart_stm32f30x.c	69;"	d	file:
UART3_GPIO	./target/ALIENWIIF3/target.h	82;"	d
UART3_GPIO	./target/SPARKY/target.h	76;"	d
UART3_GPIO	./target/SPRACINGF3/target.h	92;"	d
UART3_GPIO_AF	./drivers/serial_uart_stm32f30x.c	68;"	d	file:
UART3_GPIO_AF	./target/ALIENWIIF3/target.h	81;"	d
UART3_GPIO_AF	./target/SPARKY/target.h	75;"	d
UART3_GPIO_AF	./target/SPRACINGF3/target.h	91;"	d
UART3_RX_BUFFER_SIZE	./drivers/serial_uart.h	26;"	d
UART3_RX_PIN	./drivers/serial_uart_stm32f30x.c	67;"	d	file:
UART3_RX_PIN	./target/ALIENWIIF3/target.h	80;"	d
UART3_RX_PIN	./target/SPARKY/target.h	74;"	d
UART3_RX_PIN	./target/SPRACINGF3/target.h	90;"	d
UART3_RX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	71;"	d	file:
UART3_RX_PINSOURCE	./target/ALIENWIIF3/target.h	84;"	d
UART3_RX_PINSOURCE	./target/SPARKY/target.h	78;"	d
UART3_RX_PINSOURCE	./target/SPRACINGF3/target.h	94;"	d
UART3_TX_BUFFER_SIZE	./drivers/serial_uart.h	27;"	d
UART3_TX_PIN	./drivers/serial_uart_stm32f30x.c	66;"	d	file:
UART3_TX_PIN	./target/ALIENWIIF3/target.h	79;"	d
UART3_TX_PIN	./target/SPARKY/target.h	73;"	d
UART3_TX_PIN	./target/SPRACINGF3/target.h	89;"	d
UART3_TX_PINSOURCE	./drivers/serial_uart_stm32f30x.c	70;"	d	file:
UART3_TX_PINSOURCE	./target/ALIENWIIF3/target.h	83;"	d
UART3_TX_PINSOURCE	./target/SPARKY/target.h	77;"	d
UART3_TX_PINSOURCE	./target/SPRACINGF3/target.h	93;"	d
UBLOX_PAYLOAD_SIZE	./io/gps.c	845;"	d	file:
UBLOX_SBAS_MESSAGE_LENGTH	./io/gps.c	154;"	d	file:
UBLOX_parse_gps	./io/gps.c	/^static bool UBLOX_parse_gps(void)$/;"	f	file:
UNCONNECTED	./vcp/usb_pwr.h	/^    UNCONNECTED,$/;"	e	enum:_DEVICE_STATE
UNIT_TESTED	./build_config.h	25;"	d
UNIT_TESTED	./build_config.h	28;"	d
UNKNOWN	./target/CJMCU/hardware_revision.h	/^    UNKNOWN = 0,$/;"	e	enum:cjmcuHardwareRevision_t
UNKNOWN	./target/NAZE/hardware_revision.h	/^    UNKNOWN = 0,$/;"	e	enum:nazeHardwareRevision_t
UNKNOWN	./target/SUPERBEE/hardware_revision.h	/^    UNKNOWN = 0,$/;"	e	enum:nazeHardwareRevision_t
UNSIGNED	./blackbox/blackbox.c	96;"	d	file:
UNUSED	./build_config.h	20;"	d
UNUSED	./common/utils.h	36;"	d
UNUSED_PORT	./io/serial_msp.c	/^    UNUSED_PORT = 0,$/;"	e	enum:__anon74	file:
UNUSED_PPM_TIMER_REFERENCE	./drivers/pwm_rx.c	314;"	d	file:
UPDATE_BARO_TASK	./mw.c	/^    UPDATE_BARO_TASK,$/;"	e	enum:__anon24	file:
UPDATE_COMPASS_TASK	./mw.c	/^    UPDATE_COMPASS_TASK,$/;"	e	enum:__anon24	file:
UPDATE_DISPLAY_TASK	./mw.c	/^    UPDATE_DISPLAY_TASK$/;"	e	enum:__anon24	file:
UPDATE_SONAR_TASK	./mw.c	/^    UPDATE_SONAR_TASK,$/;"	e	enum:__anon24	file:
USABLE_TIMER_CHANNEL_COUNT	./drivers/timer.h	21;"	d
USABLE_TIMER_CHANNEL_COUNT	./target/ALIENWIIF3/target.h	32;"	d
USABLE_TIMER_CHANNEL_COUNT	./target/CC3D/target.h	45;"	d
USABLE_TIMER_CHANNEL_COUNT	./target/CHEBUZZF3/target.h	36;"	d
USABLE_TIMER_CHANNEL_COUNT	./target/SPARKY/target.h	29;"	d
USABLE_TIMER_CHANNEL_COUNT	./target/SPRACINGF3/target.h	31;"	d
USART1_IRQHandler	./drivers/serial_uart_stm32f10x.c	/^void USART1_IRQHandler(void)$/;"	f
USART1_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void USART1_IRQHandler(void)$/;"	f
USART2_IRQHandler	./drivers/serial_uart_stm32f10x.c	/^void USART2_IRQHandler(void)$/;"	f
USART2_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void USART2_IRQHandler(void)$/;"	f
USART3_APB1_PERIPHERALS	./target/CC3D/target.h	83;"	d
USART3_APB1_PERIPHERALS	./target/NAZE/target.h	138;"	d
USART3_APB1_PERIPHERALS	./target/SUPERBEE/target.h	151;"	d
USART3_APB2_PERIPHERALS	./target/CC3D/target.h	84;"	d
USART3_APB2_PERIPHERALS	./target/NAZE/target.h	139;"	d
USART3_APB2_PERIPHERALS	./target/SUPERBEE/target.h	152;"	d
USART3_GPIO	./target/CC3D/target.h	82;"	d
USART3_GPIO	./target/NAZE/target.h	137;"	d
USART3_GPIO	./target/SUPERBEE/target.h	150;"	d
USART3_IRQHandler	./drivers/serial_uart_stm32f10x.c	/^void USART3_IRQHandler(void)$/;"	f
USART3_IRQHandler	./drivers/serial_uart_stm32f30x.c	/^void USART3_IRQHandler(void)$/;"	f
USART3_RX_PIN	./target/CC3D/target.h	80;"	d
USART3_RX_PIN	./target/NAZE/target.h	135;"	d
USART3_RX_PIN	./target/SUPERBEE/target.h	148;"	d
USART3_TX_PIN	./target/CC3D/target.h	81;"	d
USART3_TX_PIN	./target/NAZE/target.h	136;"	d
USART3_TX_PIN	./target/SUPERBEE/target.h	149;"	d
USARTx	./drivers/serial_uart.h	/^    USART_TypeDef *USARTx;$/;"	m	struct:__anon36
USB_CONFIGURATION_DESCRIPTOR_TYPE	./vcp/usb_desc.h	38;"	d
USB_Cable_Config	./vcp/hw_config.c	/^void USB_Cable_Config(FunctionalState NewState)$/;"	f
USB_DEVICE_DESCRIPTOR_TYPE	./vcp/usb_desc.h	37;"	d
USB_ENDPOINT_DESCRIPTOR_TYPE	./vcp/usb_desc.h	41;"	d
USB_FS_WKUP_IRQHandler	./vcp/stm32_it.c	/^void USB_FS_WKUP_IRQHandler(void)$/;"	f
USB_INTERFACE_DESCRIPTOR_TYPE	./vcp/usb_desc.h	40;"	d
USB_Interrupts_Config	./vcp/hw_config.c	/^void USB_Interrupts_Config(void)$/;"	f
USB_Istr	./vcp/usb_istr.c	/^void USB_Istr(void)$/;"	f
USB_LP_IRQHandler	./vcp/stm32_it.c	/^void USB_LP_IRQHandler(void)$/;"	f
USB_STRING_DESCRIPTOR_TYPE	./vcp/usb_desc.h	39;"	d
USB_TIMEOUT	./drivers/serial_usb_vcp.c	37;"	d	file:
USED_TIMERS	./drivers/timer.c	110;"	d	file:
USED_TIMERS	./drivers/timer.c	143;"	d	file:
USED_TIMERS	./drivers/timer.c	170;"	d	file:
USED_TIMERS	./drivers/timer.c	215;"	d	file:
USED_TIMERS	./drivers/timer.c	247;"	d	file:
USED_TIMERS	./drivers/timer.c	63;"	d	file:
USED_TIMERS	./drivers/timer.c	86;"	d	file:
USED_TIMER_COUNT	./drivers/timer.c	255;"	d	file:
USE_ACC_ADXL345	./target/EUSTM32F103RC/target.h	55;"	d
USE_ACC_ADXL345	./target/NAZE/target.h	92;"	d
USE_ACC_ADXL345	./target/SUPERBEE/target.h	92;"	d
USE_ACC_BMA280	./target/EUSTM32F103RC/target.h	56;"	d
USE_ACC_BMA280	./target/NAZE/target.h	93;"	d
USE_ACC_BMA280	./target/SUPERBEE/target.h	93;"	d
USE_ACC_LSM303DLHC	./target/CHEBUZZF3/target.h	55;"	d
USE_ACC_LSM303DLHC	./target/STM32F3DISCOVERY/target.h	53;"	d
USE_ACC_MMA8452	./target/EUSTM32F103RC/target.h	57;"	d
USE_ACC_MMA8452	./target/NAZE/target.h	94;"	d
USE_ACC_MMA8452	./target/SUPERBEE/target.h	94;"	d
USE_ACC_MPU6050	./target/ALIENWIIF3/target.h	41;"	d
USE_ACC_MPU6050	./target/CHEBUZZF3/target.h	54;"	d
USE_ACC_MPU6050	./target/CJMCU/target.h	38;"	d
USE_ACC_MPU6050	./target/EUSTM32F103RC/target.h	58;"	d
USE_ACC_MPU6050	./target/NAZE/target.h	95;"	d
USE_ACC_MPU6050	./target/OLIMEXINO/target.h	55;"	d
USE_ACC_MPU6050	./target/PORT103R/target.h	71;"	d
USE_ACC_MPU6050	./target/SPARKY/target.h	38;"	d
USE_ACC_MPU6050	./target/SPRACINGF3/target.h	47;"	d
USE_ACC_MPU6050	./target/SUPERBEE/target.h	95;"	d
USE_ACC_SPI_MPU6000	./target/CC3D/target.h	53;"	d
USE_ACC_SPI_MPU6500	./target/EUSTM32F103RC/target.h	60;"	d
USE_ACC_SPI_MPU6500	./target/NAZE/target.h	96;"	d
USE_ACC_SPI_MPU6500	./target/SUPERBEE/target.h	96;"	d
USE_ADC	./target/ALIENWIIF3/target.h	101;"	d
USE_ADC	./target/CC3D/target.h	93;"	d
USE_ADC	./target/CHEBUZZF3/target.h	79;"	d
USE_ADC	./target/EUSTM32F103RC/target.h	101;"	d
USE_ADC	./target/NAZE/target.h	148;"	d
USE_ADC	./target/OLIMEXINO/target.h	88;"	d
USE_ADC	./target/PORT103R/target.h	111;"	d
USE_ADC	./target/SPARKY/target.h	96;"	d
USE_ADC	./target/SPRACINGF3/target.h	125;"	d
USE_ADC	./target/STM32F3DISCOVERY/target.h	70;"	d
USE_ADC	./target/SUPERBEE/target.h	161;"	d
USE_BARO_BMP085	./target/CC3D/target.h	60;"	d
USE_BARO_BMP085	./target/EUSTM32F103RC/target.h	66;"	d
USE_BARO_BMP085	./target/NAZE/target.h	106;"	d
USE_BARO_BMP085	./target/OLIMEXINO/target.h	61;"	d
USE_BARO_BMP085	./target/PORT103R/target.h	77;"	d
USE_BARO_BMP085	./target/SUPERBEE/target.h	109;"	d
USE_BARO_BMP085	./target/SUPERBEE/target.h	113;"	d
USE_BARO_MS5611	./target/CC3D/target.h	59;"	d
USE_BARO_MS5611	./target/CHEBUZZF3/target.h	60;"	d
USE_BARO_MS5611	./target/EUSTM32F103RC/target.h	65;"	d
USE_BARO_MS5611	./target/NAZE/target.h	105;"	d
USE_BARO_MS5611	./target/PORT103R/target.h	76;"	d
USE_BARO_MS5611	./target/SPARKY/target.h	43;"	d
USE_BARO_MS5611	./target/SPRACINGF3/target.h	51;"	d
USE_BARO_MS5611	./target/SUPERBEE/target.h	108;"	d
USE_BARO_MS5611	./target/SUPERBEE/target.h	112;"	d
USE_CLI	./target/ALIENWIIF3/target.h	119;"	d
USE_CLI	./target/CC3D/target.h	117;"	d
USE_CLI	./target/CHEBUZZF3/target.h	126;"	d
USE_CLI	./target/CJMCU/target.h	62;"	d
USE_CLI	./target/EUSTM32F103RC/target.h	128;"	d
USE_CLI	./target/NAZE/target.h	176;"	d
USE_CLI	./target/NAZE32PRO/target.h	49;"	d
USE_CLI	./target/OLIMEXINO/target.h	115;"	d
USE_CLI	./target/PORT103R/target.h	139;"	d
USE_CLI	./target/SPARKY/target.h	117;"	d
USE_CLI	./target/SPRACINGF3/target.h	166;"	d
USE_CLI	./target/STM32F3DISCOVERY/target.h	100;"	d
USE_CLI	./target/SUPERBEE/target.h	189;"	d
USE_FAKE_ACC	./target/EUSTM32F103RC/target.h	54;"	d
USE_FAKE_ACC	./target/OLIMEXINO/target.h	50;"	d
USE_FAKE_ACC	./target/PORT103R/target.h	67;"	d
USE_FAKE_GYRO	./target/EUSTM32F103RC/target.h	43;"	d
USE_FAKE_GYRO	./target/OLIMEXINO/target.h	41;"	d
USE_FAKE_GYRO	./target/PORT103R/target.h	58;"	d
USE_FAST_DMA_BUFFER_IMPL	./drivers/light_ws2811strip.c	94;"	d	file:
USE_FLASHFS	./target/CC3D/target.h	42;"	d
USE_FLASHFS	./target/NAZE/target.h	69;"	d
USE_FLASHFS	./target/SPRACINGF3/target.h	58;"	d
USE_FLASHFS	./target/SUPERBEE/target.h	69;"	d
USE_FLASH_M25P16	./target/CC3D/target.h	43;"	d
USE_FLASH_M25P16	./target/NAZE/target.h	71;"	d
USE_FLASH_M25P16	./target/SPRACINGF3/target.h	59;"	d
USE_FLASH_M25P16	./target/SUPERBEE/target.h	71;"	d
USE_GYRO_L3G4200D	./target/EUSTM32F103RC/target.h	44;"	d
USE_GYRO_L3GD20	./target/CHEBUZZF3/target.h	42;"	d
USE_GYRO_L3GD20	./target/STM32F3DISCOVERY/target.h	43;"	d
USE_GYRO_MPU3050	./target/NAZE/target.h	82;"	d
USE_GYRO_MPU3050	./target/SUPERBEE/target.h	82;"	d
USE_GYRO_MPU6050	./target/ALIENWIIF3/target.h	36;"	d
USE_GYRO_MPU6050	./target/CHEBUZZF3/target.h	43;"	d
USE_GYRO_MPU6050	./target/CJMCU/target.h	41;"	d
USE_GYRO_MPU6050	./target/EUSTM32F103RC/target.h	47;"	d
USE_GYRO_MPU6050	./target/NAZE/target.h	83;"	d
USE_GYRO_MPU6050	./target/OLIMEXINO/target.h	45;"	d
USE_GYRO_MPU6050	./target/PORT103R/target.h	62;"	d
USE_GYRO_MPU6050	./target/SPARKY/target.h	33;"	d
USE_GYRO_MPU6050	./target/SPRACINGF3/target.h	43;"	d
USE_GYRO_MPU6050	./target/SUPERBEE/target.h	83;"	d
USE_GYRO_SPI_MPU6000	./target/CC3D/target.h	48;"	d
USE_GYRO_SPI_MPU6000	./target/EUSTM32F103RC/target.h	48;"	d
USE_GYRO_SPI_MPU6500	./target/EUSTM32F103RC/target.h	49;"	d
USE_GYRO_SPI_MPU6500	./target/NAZE/target.h	84;"	d
USE_GYRO_SPI_MPU6500	./target/SUPERBEE/target.h	84;"	d
USE_HARDWARE_REVISION_DETECTION	./target/CJMCU/target.h	21;"	d
USE_HARDWARE_REVISION_DETECTION	./target/NAZE/target.h	21;"	d
USE_HARDWARE_REVISION_DETECTION	./target/SUPERBEE/target.h	21;"	d
USE_I2C	./target/ALIENWIIF3/target.h	87;"	d
USE_I2C	./target/CC3D/target.h	90;"	d
USE_I2C	./target/CHEBUZZF3/target.h	76;"	d
USE_I2C	./target/CJMCU/target.h	53;"	d
USE_I2C	./target/EUSTM32F103RC/target.h	94;"	d
USE_I2C	./target/NAZE/target.h	141;"	d
USE_I2C	./target/NAZE32PRO/target.h	40;"	d
USE_I2C	./target/OLIMEXINO/target.h	81;"	d
USE_I2C	./target/PORT103R/target.h	104;"	d
USE_I2C	./target/SPARKY/target.h	82;"	d
USE_I2C	./target/SPRACINGF3/target.h	104;"	d
USE_I2C	./target/STM32F3DISCOVERY/target.h	67;"	d
USE_I2C	./target/SUPERBEE/target.h	154;"	d
USE_LED_STRIP_ON_DMA1_CHANNEL2	./target/CHEBUZZF3/target.h	109;"	d
USE_LED_STRIP_ON_DMA1_CHANNEL2	./target/SPRACINGF3/target.h	148;"	d
USE_LED_STRIP_ON_DMA1_CHANNEL3	./drivers/light_ws2811strip_stm32f30x.c	30;"	d	file:
USE_LED_STRIP_ON_DMA1_CHANNEL3	./target/SPARKY/target.h	124;"	d
USE_MAG_AK8975	./target/CHEBUZZF3/target.h	63;"	d
USE_MAG_AK8975	./target/EUSTM32F103RC/target.h	70;"	d
USE_MAG_AK8975	./target/PORT103R/target.h	81;"	d
USE_MAG_AK8975	./target/SPARKY/target.h	46;"	d
USE_MAG_AK8975	./target/SPRACINGF3/target.h	54;"	d
USE_MAG_DATA_READY_SIGNAL	./target/NAZE/target.h	79;"	d
USE_MAG_DATA_READY_SIGNAL	./target/SPRACINGF3/target.h	38;"	d
USE_MAG_DATA_READY_SIGNAL	./target/SUPERBEE/target.h	79;"	d
USE_MAG_HMC5883	./target/CC3D/target.h	64;"	d
USE_MAG_HMC5883	./target/CJMCU/target.h	44;"	d
USE_MAG_HMC5883	./target/EUSTM32F103RC/target.h	69;"	d
USE_MAG_HMC5883	./target/NAZE/target.h	109;"	d
USE_MAG_HMC5883	./target/OLIMEXINO/target.h	64;"	d
USE_MAG_HMC5883	./target/PORT103R/target.h	80;"	d
USE_MAG_HMC5883	./target/SPRACINGF3/target.h	55;"	d
USE_MAG_HMC5883	./target/STM32F3DISCOVERY/target.h	56;"	d
USE_MAG_HMC5883	./target/SUPERBEE/target.h	117;"	d
USE_MPU_DATA_READY_SIGNAL	./target/NAZE/target.h	76;"	d
USE_MPU_DATA_READY_SIGNAL	./target/SPRACINGF3/target.h	35;"	d
USE_MPU_DATA_READY_SIGNAL	./target/SUPERBEE/target.h	76;"	d
USE_QUAD_MIXER_ONLY	./target/CJMCU/target.h	70;"	d
USE_SERVOS	./target/ALIENWIIF3/target.h	118;"	d
USE_SERVOS	./target/CC3D/target.h	116;"	d
USE_SERVOS	./target/CHEBUZZF3/target.h	125;"	d
USE_SERVOS	./target/EUSTM32F103RC/target.h	127;"	d
USE_SERVOS	./target/NAZE/target.h	175;"	d
USE_SERVOS	./target/NAZE32PRO/target.h	48;"	d
USE_SERVOS	./target/OLIMEXINO/target.h	114;"	d
USE_SERVOS	./target/PORT103R/target.h	138;"	d
USE_SERVOS	./target/SPARKY/target.h	116;"	d
USE_SERVOS	./target/SPRACINGF3/target.h	165;"	d
USE_SERVOS	./target/STM32F3DISCOVERY/target.h	99;"	d
USE_SERVOS	./target/SUPERBEE/target.h	188;"	d
USE_SOFTSERIAL1	./target/CC3D/target.h	73;"	d
USE_SOFTSERIAL1	./target/EUSTM32F103RC/target.h	83;"	d
USE_SOFTSERIAL1	./target/NAZE/target.h	123;"	d
USE_SOFTSERIAL1	./target/OLIMEXINO/target.h	70;"	d
USE_SOFTSERIAL1	./target/PORT103R/target.h	93;"	d
USE_SOFTSERIAL1	./target/SPRACINGF3/target.h	68;"	d
USE_SOFTSERIAL1	./target/SUPERBEE/target.h	136;"	d
USE_SOFTSERIAL2	./target/EUSTM32F103RC/target.h	84;"	d
USE_SOFTSERIAL2	./target/NAZE/target.h	124;"	d
USE_SOFTSERIAL2	./target/OLIMEXINO/target.h	71;"	d
USE_SOFTSERIAL2	./target/PORT103R/target.h	94;"	d
USE_SOFTSERIAL2	./target/SPRACINGF3/target.h	69;"	d
USE_SOFTSERIAL2	./target/SUPERBEE/target.h	137;"	d
USE_SPI	./target/CC3D/target.h	86;"	d
USE_SPI	./target/CHEBUZZF3/target.h	38;"	d
USE_SPI	./target/NAZE/target.h	53;"	d
USE_SPI	./target/SPRACINGF3/target.h	107;"	d
USE_SPI	./target/STM32F3DISCOVERY/target.h	39;"	d
USE_SPI	./target/SUPERBEE/target.h	53;"	d
USE_SPI_DEVICE_1	./target/CC3D/target.h	87;"	d
USE_SPI_DEVICE_1	./target/CHEBUZZF3/target.h	39;"	d
USE_SPI_DEVICE_1	./target/STM32F3DISCOVERY/target.h	40;"	d
USE_SPI_DEVICE_2	./target/CC3D/target.h	88;"	d
USE_SPI_DEVICE_2	./target/NAZE/target.h	54;"	d
USE_SPI_DEVICE_2	./target/SPRACINGF3/target.h	108;"	d
USE_SPI_DEVICE_2	./target/SUPERBEE/target.h	54;"	d
USE_USART1	./target/ALIENWIIF3/target.h	60;"	d
USE_USART1	./target/CC3D/target.h	71;"	d
USE_USART1	./target/CHEBUZZF3/target.h	72;"	d
USE_USART1	./target/CJMCU/target.h	48;"	d
USE_USART1	./target/EUSTM32F103RC/target.h	81;"	d
USE_USART1	./target/NAZE/target.h	120;"	d
USE_USART1	./target/NAZE32PRO/target.h	36;"	d
USE_USART1	./target/OLIMEXINO/target.h	68;"	d
USE_USART1	./target/PORT103R/target.h	91;"	d
USE_USART1	./target/SPARKY/target.h	54;"	d
USE_USART1	./target/SPRACINGF3/target.h	65;"	d
USE_USART1	./target/STM32F3DISCOVERY/target.h	63;"	d
USE_USART1	./target/SUPERBEE/target.h	133;"	d
USE_USART1_RX_DMA	./drivers/serial_uart_stm32f10x.c	52;"	d	file:
USE_USART1_RX_DMA	./drivers/serial_uart_stm32f10x.c	55;"	d	file:
USE_USART1_RX_DMA	./drivers/serial_uart_stm32f30x.c	41;"	d	file:
USE_USART2	./target/ALIENWIIF3/target.h	61;"	d
USE_USART2	./target/CHEBUZZF3/target.h	73;"	d
USE_USART2	./target/CJMCU/target.h	49;"	d
USE_USART2	./target/EUSTM32F103RC/target.h	82;"	d
USE_USART2	./target/NAZE/target.h	121;"	d
USE_USART2	./target/NAZE32PRO/target.h	37;"	d
USE_USART2	./target/OLIMEXINO/target.h	69;"	d
USE_USART2	./target/PORT103R/target.h	92;"	d
USE_USART2	./target/SPARKY/target.h	55;"	d
USE_USART2	./target/SPRACINGF3/target.h	66;"	d
USE_USART2	./target/STM32F3DISCOVERY/target.h	64;"	d
USE_USART2	./target/SUPERBEE/target.h	134;"	d
USE_USART3	./target/ALIENWIIF3/target.h	62;"	d
USE_USART3	./target/CC3D/target.h	72;"	d
USE_USART3	./target/NAZE/target.h	122;"	d
USE_USART3	./target/SPARKY/target.h	56;"	d
USE_USART3	./target/SPRACINGF3/target.h	67;"	d
USE_USART3	./target/SUPERBEE/target.h	135;"	d
USE_VCP	./target/ALIENWIIF3/target.h	59;"	d
USE_VCP	./target/CC3D/target.h	70;"	d
USE_VCP	./target/CHEBUZZF3/target.h	71;"	d
USE_VCP	./target/NAZE32PRO/target.h	35;"	d
USE_VCP	./target/SPARKY/target.h	53;"	d
USE_VCP	./target/STM32F3DISCOVERY/target.h	62;"	d
U_ID_0	./platform.h	27;"	d
U_ID_0	./platform.h	40;"	d
U_ID_1	./platform.h	28;"	d
U_ID_1	./platform.h	41;"	d
U_ID_2	./platform.h	29;"	d
U_ID_2	./platform.h	42;"	d
UsageFault_Handler	./vcp/stm32_it.c	/^void UsageFault_Handler(void)$/;"	f
User_Standard_Requests	./vcp/usb_prop.c	/^USER_STANDARD_REQUESTS User_Standard_Requests = {$/;"	v
V	./common/maths.h	/^    t_fp_vector_def V;$/;"	m	union:__anon25
VALUE_COUNT	./io/serial_cli.c	462;"	d	file:
VALUE_TYPE_MASK	./io/serial_cli.c	247;"	d	file:
VAR_FLOAT	./io/serial_cli.c	/^    VAR_FLOAT = (1 << 5),$/;"	e	enum:__anon99	file:
VAR_INT16	./io/serial_cli.c	/^    VAR_INT16 = (1 << 3),$/;"	e	enum:__anon99	file:
VAR_INT8	./io/serial_cli.c	/^    VAR_INT8 = (1 << 1),$/;"	e	enum:__anon99	file:
VAR_UINT16	./io/serial_cli.c	/^    VAR_UINT16 = (1 << 2),$/;"	e	enum:__anon99	file:
VAR_UINT32	./io/serial_cli.c	/^    VAR_UINT32 = (1 << 4),$/;"	e	enum:__anon99	file:
VAR_UINT8	./io/serial_cli.c	/^    VAR_UINT8 = (1 << 0),$/;"	e	enum:__anon99	file:
VBATFREQ	./mw.c	92;"	d	file:
VBAT_ADC_CHANNEL	./target/ALIENWIIF3/target.h	111;"	d
VBAT_ADC_CHANNEL	./target/CC3D/target.h	101;"	d
VBAT_ADC_CHANNEL	./target/CHEBUZZF3/target.h	87;"	d
VBAT_ADC_CHANNEL	./target/EUSTM32F103RC/target.h	109;"	d
VBAT_ADC_CHANNEL	./target/NAZE/target.h	156;"	d
VBAT_ADC_CHANNEL	./target/OLIMEXINO/target.h	96;"	d
VBAT_ADC_CHANNEL	./target/PORT103R/target.h	119;"	d
VBAT_ADC_CHANNEL	./target/SPARKY/target.h	104;"	d
VBAT_ADC_CHANNEL	./target/SPRACINGF3/target.h	135;"	d
VBAT_ADC_CHANNEL	./target/STM32F3DISCOVERY/target.h	78;"	d
VBAT_ADC_CHANNEL	./target/SUPERBEE/target.h	169;"	d
VBAT_ADC_GPIO	./target/ALIENWIIF3/target.h	109;"	d
VBAT_ADC_GPIO	./target/CC3D/target.h	99;"	d
VBAT_ADC_GPIO	./target/CHEBUZZF3/target.h	85;"	d
VBAT_ADC_GPIO	./target/EUSTM32F103RC/target.h	107;"	d
VBAT_ADC_GPIO	./target/NAZE/target.h	154;"	d
VBAT_ADC_GPIO	./target/OLIMEXINO/target.h	94;"	d
VBAT_ADC_GPIO	./target/PORT103R/target.h	117;"	d
VBAT_ADC_GPIO	./target/SPARKY/target.h	102;"	d
VBAT_ADC_GPIO	./target/SPRACINGF3/target.h	133;"	d
VBAT_ADC_GPIO	./target/STM32F3DISCOVERY/target.h	76;"	d
VBAT_ADC_GPIO	./target/SUPERBEE/target.h	167;"	d
VBAT_ADC_GPIO_PIN	./target/ALIENWIIF3/target.h	110;"	d
VBAT_ADC_GPIO_PIN	./target/CC3D/target.h	100;"	d
VBAT_ADC_GPIO_PIN	./target/CHEBUZZF3/target.h	86;"	d
VBAT_ADC_GPIO_PIN	./target/EUSTM32F103RC/target.h	108;"	d
VBAT_ADC_GPIO_PIN	./target/NAZE/target.h	155;"	d
VBAT_ADC_GPIO_PIN	./target/OLIMEXINO/target.h	95;"	d
VBAT_ADC_GPIO_PIN	./target/PORT103R/target.h	118;"	d
VBAT_ADC_GPIO_PIN	./target/SPARKY/target.h	103;"	d
VBAT_ADC_GPIO_PIN	./target/SPRACINGF3/target.h	134;"	d
VBAT_ADC_GPIO_PIN	./target/STM32F3DISCOVERY/target.h	77;"	d
VBAT_ADC_GPIO_PIN	./target/SUPERBEE/target.h	168;"	d
VBAT_SCALE_DEFAULT	./sensors/battery.h	22;"	d
VBAT_SCALE_MAX	./sensors/battery.h	24;"	d
VBAT_SCALE_MIN	./sensors/battery.h	23;"	d
VCOMPORT_IN_FRAME_INTERVAL	./vcp/usb_endp.c	40;"	d	file:
VECT_TAB_OFFSET	./target/ALIENWIIF3/system_stm32f30x.c	118;"	d	file:
VECT_TAB_OFFSET	./target/CHEBUZZF3/system_stm32f30x.c	118;"	d	file:
VECT_TAB_OFFSET	./target/NAZE32PRO/system_stm32f30x.c	118;"	d	file:
VECT_TAB_OFFSET	./target/SPARKY/system_stm32f30x.c	118;"	d	file:
VECT_TAB_OFFSET	./target/SPRACINGF3/system_stm32f30x.c	118;"	d	file:
VECT_TAB_OFFSET	./target/STM32F3DISCOVERY/system_stm32f30x.c	118;"	d	file:
VERTICAL_BARGRAPH_CHARACTER_COUNT	./drivers/display_ug2864hsweg01.h	35;"	d
VERTICAL_BARGRAPH_ZERO_CHARACTER	./drivers/display_ug2864hsweg01.h	34;"	d
VERTICAL_PADDING	./drivers/display_ug2864hsweg01.h	26;"	d
VIRTUAL_COM_PORT_DATA_SIZE	./vcp/usb_desc.h	43;"	d
VIRTUAL_COM_PORT_INT_SIZE	./vcp/usb_desc.h	44;"	d
VIRTUAL_COM_PORT_SIZ_CONFIG_DESC	./vcp/usb_desc.h	47;"	d
VIRTUAL_COM_PORT_SIZ_DEVICE_DESC	./vcp/usb_desc.h	46;"	d
VIRTUAL_COM_PORT_SIZ_STRING_LANGID	./vcp/usb_desc.h	48;"	d
VIRTUAL_COM_PORT_SIZ_STRING_PRODUCT	./vcp/usb_desc.h	50;"	d
VIRTUAL_COM_PORT_SIZ_STRING_SERIAL	./vcp/usb_desc.h	51;"	d
VIRTUAL_COM_PORT_SIZ_STRING_VENDOR	./vcp/usb_desc.h	49;"	d
Virtual_Com_Port_ClearFeature	./vcp/usb_prop.h	50;"	d
Virtual_Com_Port_ConfigDescriptor	./vcp/usb_desc.c	/^const uint8_t Virtual_Com_Port_ConfigDescriptor[] = {$/;"	v
Virtual_Com_Port_Data_Setup	./vcp/usb_prop.c	/^RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)$/;"	f
Virtual_Com_Port_DeviceDescriptor	./vcp/usb_desc.c	/^const uint8_t Virtual_Com_Port_DeviceDescriptor[] = { 0x12, \/* bLength *\/$/;"	v
Virtual_Com_Port_GetConfigDescriptor	./vcp/usb_prop.c	/^uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)$/;"	f
Virtual_Com_Port_GetConfiguration	./vcp/usb_prop.h	45;"	d
Virtual_Com_Port_GetDeviceDescriptor	./vcp/usb_prop.c	/^uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)$/;"	f
Virtual_Com_Port_GetInterface	./vcp/usb_prop.h	47;"	d
Virtual_Com_Port_GetLineCoding	./vcp/usb_prop.c	/^uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)$/;"	f
Virtual_Com_Port_GetStatus	./vcp/usb_prop.h	49;"	d
Virtual_Com_Port_GetStringDescriptor	./vcp/usb_prop.c	/^uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)$/;"	f
Virtual_Com_Port_Get_Interface_Setting	./vcp/usb_prop.c	/^RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)$/;"	f
Virtual_Com_Port_NoData_Setup	./vcp/usb_prop.c	/^RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)$/;"	f
Virtual_Com_Port_Reset	./vcp/usb_prop.c	/^void Virtual_Com_Port_Reset(void)$/;"	f
Virtual_Com_Port_SetConfiguration	./vcp/usb_prop.c	/^void Virtual_Com_Port_SetConfiguration(void)$/;"	f
Virtual_Com_Port_SetDeviceAddress	./vcp/usb_prop.c	/^void Virtual_Com_Port_SetDeviceAddress(void)$/;"	f
Virtual_Com_Port_SetDeviceFeature	./vcp/usb_prop.h	52;"	d
Virtual_Com_Port_SetEndPointFeature	./vcp/usb_prop.h	51;"	d
Virtual_Com_Port_SetInterface	./vcp/usb_prop.h	48;"	d
Virtual_Com_Port_SetLineCoding	./vcp/usb_prop.c	/^uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)$/;"	f
Virtual_Com_Port_Status_In	./vcp/usb_prop.c	/^void Virtual_Com_Port_Status_In(void)$/;"	f
Virtual_Com_Port_Status_Out	./vcp/usb_prop.c	/^void Virtual_Com_Port_Status_Out(void)$/;"	f
Virtual_Com_Port_StringLangID	./vcp/usb_desc.c	/^const uint8_t Virtual_Com_Port_StringLangID[VIRTUAL_COM_PORT_SIZ_STRING_LANGID] = {$/;"	v
Virtual_Com_Port_StringProduct	./vcp/usb_desc.c	/^const uint8_t Virtual_Com_Port_StringProduct[VIRTUAL_COM_PORT_SIZ_STRING_PRODUCT] = {$/;"	v
Virtual_Com_Port_StringSerial	./vcp/usb_desc.c	/^uint8_t Virtual_Com_Port_StringSerial[VIRTUAL_COM_PORT_SIZ_STRING_SERIAL] = {$/;"	v
Virtual_Com_Port_StringVendor	./vcp/usb_desc.c	/^const uint8_t Virtual_Com_Port_StringVendor[VIRTUAL_COM_PORT_SIZ_STRING_VENDOR] = {$/;"	v
Virtual_Com_Port_init	./vcp/usb_prop.c	/^void Virtual_Com_Port_init(void)$/;"	f
WARNING_FLAG_ARMING_DISABLED	./io/ledstrip.c	/^    WARNING_FLAG_ARMING_DISABLED = (1 << 2)$/;"	e	enum:__anon79	file:
WARNING_FLAG_FAILSAFE	./io/ledstrip.c	/^    WARNING_FLAG_FAILSAFE = (1 << 1),$/;"	e	enum:__anon79	file:
WARNING_FLAG_LOW_BATTERY	./io/ledstrip.c	/^    WARNING_FLAG_LOW_BATTERY = (1 << 0),$/;"	e	enum:__anon79	file:
WARNING_FLAG_NONE	./io/ledstrip.c	/^    WARNING_FLAG_NONE = 0,$/;"	e	enum:__anon79	file:
WARNING_LED_FLASH	./io/statusindicator.c	/^    WARNING_LED_FLASH$/;"	e	enum:__anon103	file:
WARNING_LED_OFF	./io/statusindicator.c	/^    WARNING_LED_OFF = 0,$/;"	e	enum:__anon103	file:
WARNING_LED_ON	./io/statusindicator.c	/^    WARNING_LED_ON,$/;"	e	enum:__anon103	file:
WS2811_BITS_PER_LED	./drivers/light_ws2811strip.h	21;"	d
WS2811_DATA_BUFFER_SIZE	./drivers/light_ws2811strip.h	24;"	d
WS2811_DELAY_BUFFER_LENGTH	./drivers/light_ws2811strip.h	22;"	d
WS2811_DMA_BUFFER_SIZE	./drivers/light_ws2811strip.h	26;"	d
WS2811_DMA_CHANNEL	./drivers/light_ws2811strip_stm32f30x.c	38;"	d	file:
WS2811_DMA_CHANNEL	./target/CHEBUZZF3/target.h	117;"	d
WS2811_DMA_CHANNEL	./target/SPARKY/target.h	132;"	d
WS2811_DMA_CHANNEL	./target/SPRACINGF3/target.h	156;"	d
WS2811_GPIO	./drivers/light_ws2811strip_stm32f30x.c	31;"	d	file:
WS2811_GPIO	./target/CHEBUZZF3/target.h	110;"	d
WS2811_GPIO	./target/SPARKY/target.h	125;"	d
WS2811_GPIO	./target/SPRACINGF3/target.h	149;"	d
WS2811_GPIO_AF	./drivers/light_ws2811strip_stm32f30x.c	33;"	d	file:
WS2811_GPIO_AF	./target/CHEBUZZF3/target.h	112;"	d
WS2811_GPIO_AF	./target/SPARKY/target.h	127;"	d
WS2811_GPIO_AF	./target/SPRACINGF3/target.h	151;"	d
WS2811_GPIO_AHB_PERIPHERAL	./drivers/light_ws2811strip_stm32f30x.c	32;"	d	file:
WS2811_GPIO_AHB_PERIPHERAL	./target/CHEBUZZF3/target.h	111;"	d
WS2811_GPIO_AHB_PERIPHERAL	./target/SPARKY/target.h	126;"	d
WS2811_GPIO_AHB_PERIPHERAL	./target/SPRACINGF3/target.h	150;"	d
WS2811_IRQ	./drivers/light_ws2811strip_stm32f30x.c	39;"	d	file:
WS2811_IRQ	./target/CHEBUZZF3/target.h	118;"	d
WS2811_IRQ	./target/SPARKY/target.h	133;"	d
WS2811_IRQ	./target/SPRACINGF3/target.h	157;"	d
WS2811_LED_STRIP_LENGTH	./drivers/light_ws2811strip.h	20;"	d
WS2811_PIN	./drivers/light_ws2811strip_stm32f30x.c	34;"	d	file:
WS2811_PIN	./target/CHEBUZZF3/target.h	113;"	d
WS2811_PIN	./target/SPARKY/target.h	128;"	d
WS2811_PIN	./target/SPRACINGF3/target.h	152;"	d
WS2811_PIN_SOURCE	./drivers/light_ws2811strip_stm32f30x.c	35;"	d	file:
WS2811_PIN_SOURCE	./target/CHEBUZZF3/target.h	114;"	d
WS2811_PIN_SOURCE	./target/SPARKY/target.h	129;"	d
WS2811_PIN_SOURCE	./target/SPRACINGF3/target.h	153;"	d
WS2811_TIMER	./drivers/light_ws2811strip_stm32f30x.c	36;"	d	file:
WS2811_TIMER	./target/CHEBUZZF3/target.h	115;"	d
WS2811_TIMER	./target/SPARKY/target.h	130;"	d
WS2811_TIMER	./target/SPRACINGF3/target.h	154;"	d
WS2811_TIMER_APB2_PERIPHERAL	./drivers/light_ws2811strip_stm32f30x.c	37;"	d	file:
WS2811_TIMER_APB2_PERIPHERAL	./target/CHEBUZZF3/target.h	116;"	d
WS2811_TIMER_APB2_PERIPHERAL	./target/SPARKY/target.h	131;"	d
WS2811_TIMER_APB2_PERIPHERAL	./target/SPRACINGF3/target.h	155;"	d
Working_Mode	./drivers/accgyro_lsm303dlhc.h	/^  uint8_t Working_Mode;                      \/* operating mode *\/$/;"	m	struct:__anon55
X	./common/axis.h	/^    X = 0,$/;"	e	enum:__anon27
X	./common/maths.h	/^    float X;$/;"	m	struct:fp_vector
XBUS_BAUDRATE	./rx/xbus.c	50;"	d	file:
XBUS_CHANNEL_COUNT	./rx/xbus.c	37;"	d	file:
XBUS_CONVERT_TO_USEC	./rx/xbus.c	70;"	d	file:
XBUS_CRC_AND_VALUE	./rx/xbus.c	47;"	d	file:
XBUS_CRC_POLY	./rx/xbus.c	48;"	d	file:
XBUS_FRAME_SIZE	./rx/xbus.c	41;"	d	file:
XBUS_MAX_FRAME_TIME	./rx/xbus.c	52;"	d	file:
XBUS_RJ01_BAUDRATE	./rx/xbus.c	51;"	d	file:
XBUS_RJ01_CHANNEL_COUNT	./rx/xbus.c	38;"	d	file:
XBUS_RJ01_FRAME_SIZE	./rx/xbus.c	43;"	d	file:
XBUS_RJ01_MESSAGE_LENGTH	./rx/xbus.c	44;"	d	file:
XBUS_RJ01_OFFSET_BYTES	./rx/xbus.c	45;"	d	file:
XBUS_START_OF_FRAME_BYTE	./rx/xbus.c	62;"	d	file:
XYZ_AXIS_COUNT	./common/axis.h	26;"	d
X_COORDINATE	./io/ledstrip.c	/^    X_COORDINATE,$/;"	e	enum:__anon77	file:
Y	./common/axis.h	/^    Y,$/;"	e	enum:__anon27
Y	./common/maths.h	/^    float Y;$/;"	m	struct:fp_vector
YAW	./io/rc_controls.h	/^    YAW,$/;"	e	enum:rc_alias
YAW_CE	./io/rc_controls.h	82;"	d
YAW_GAIN_MULTIPLIER	./flight/autotune.c	99;"	d	file:
YAW_HI	./io/rc_controls.h	83;"	d
YAW_JUMP_PREVENTION_LIMIT_HIGH	./flight/mixer.h	23;"	d
YAW_JUMP_PREVENTION_LIMIT_LOW	./flight/mixer.h	22;"	d
YAW_LO	./io/rc_controls.h	81;"	d
YAW_LOOKUP_LENGTH	./io/rc_curves.h	21;"	d
YAW_P_LIMIT_MAX	./flight/pid.h	24;"	d
YAW_P_LIMIT_MIN	./flight/pid.h	23;"	d
Y_COORDINATE	./io/ledstrip.c	/^    Y_COORDINATE,$/;"	e	enum:__anon77	file:
Z	./common/axis.h	/^    Z$/;"	e	enum:__anon27
Z	./common/maths.h	/^    float Z;$/;"	m	struct:fp_vector
_CASE	./drivers/timer.c	285;"	d	file:
_CASE	./drivers/timer.c	315;"	d	file:
_CASE_	./drivers/timer.c	284;"	d	file:
_CASE_	./drivers/timer.c	316;"	d	file:
_CASE_SHF	./drivers/timer.c	283;"	d	file:
_DEF	./drivers/timer.c	320;"	d	file:
_DEF	./drivers/timer.c	346;"	d	file:
_DEVICE_STATE	./vcp/usb_pwr.h	/^typedef enum _DEVICE_STATE {$/;"	g
_RESUME_STATE	./vcp/usb_pwr.h	/^typedef enum _RESUME_STATE {$/;"	g
_TIM_IRQ_HANDLER	./drivers/timer.c	745;"	d	file:
_TIM_IRQ_HANDLER2	./drivers/timer.c	738;"	d	file:
__HW_CONFIG_H	./vcp/hw_config.h	30;"	d
__PLATFORM_CONFIG_H	./vcp/platform_config.h	30;"	d
__STM32_IT_H	./vcp/stm32_it.h	30;"	d
__SYSTEM_STM32F30X_H	./target/ALIENWIIF3/system_stm32f30x.h	40;"	d
__SYSTEM_STM32F30X_H	./target/CHEBUZZF3/system_stm32f30x.h	40;"	d
__SYSTEM_STM32F30X_H	./target/NAZE32PRO/system_stm32f30x.h	40;"	d
__SYSTEM_STM32F30X_H	./target/SPARKY/system_stm32f30x.h	40;"	d
__SYSTEM_STM32F30X_H	./target/SPRACINGF3/system_stm32f30x.h	40;"	d
__SYSTEM_STM32F30X_H	./target/STM32F3DISCOVERY/system_stm32f30x.h	40;"	d
__TFP_PRINTF__	./common/printf.h	106;"	d
__UNIQL	./common/atomic.h	96;"	d
__UNIQL_CONCAT	./common/atomic.h	95;"	d
__UNIQL_CONCAT2	./common/atomic.h	94;"	d
__USB_CONF_H	./vcp/usb_conf.h	30;"	d
__USB_DESC_H	./vcp/usb_desc.h	30;"	d
__USB_ISTR_H	./vcp/usb_istr.h	30;"	d
__USB_PWR_H	./vcp/usb_pwr.h	30;"	d
__USE_C99_MATH	./telemetry/smartport.c	135;"	d	file:
__basepriRestore	./common/atomic.h	/^static inline void __basepriRestore(uint8_t *val)$/;"	f
__basepriRestoreMem	./common/atomic.h	/^static inline void __basepriRestoreMem(uint8_t *val)$/;"	f
__basepriSetMemRetVal	./common/atomic.h	/^static inline uint8_t __basepriSetMemRetVal(uint8_t prio)$/;"	f
__basepriSetRetVal	./common/atomic.h	/^static inline uint8_t __basepriSetRetVal(uint8_t prio)$/;"	f
__set_BASEPRI_MAX	./common/atomic.h	/^__attribute__( ( always_inline ) ) static inline void __set_BASEPRI_MAX(uint32_t basePri)$/;"	f
__set_BASEPRI_MAX_nb	./common/atomic.h	/^__attribute__( ( always_inline ) ) static inline void __set_BASEPRI_MAX_nb(uint32_t basePri)$/;"	f
__set_BASEPRI_nb	./common/atomic.h	/^__attribute__( ( always_inline ) ) static inline void __set_BASEPRI_nb(uint32_t basePri)$/;"	f
__usb_prop_H	./vcp/usb_prop.h	30;"	d
_buffer	./io/gps.c	/^} _buffer;$/;"	v	typeref:union:__anon93	file:
_ck_a	./io/gps.c	/^static uint8_t _ck_a;$/;"	v	file:
_ck_b	./io/gps.c	/^static uint8_t _ck_b;$/;"	v	file:
_class	./io/gps.c	/^static uint8_t _class;$/;"	v	file:
_i2a	./common/typeconversion.c	/^static char *_i2a(unsigned i, char *a, unsigned base)$/;"	f	file:
_msg_id	./io/gps.c	/^static uint8_t _msg_id;$/;"	v	file:
_new_position	./io/gps.c	/^static bool _new_position;$/;"	v	file:
_new_speed	./io/gps.c	/^static bool _new_speed;$/;"	v	file:
_payload_counter	./io/gps.c	/^static uint16_t _payload_counter;$/;"	v	file:
_payload_length	./io/gps.c	/^static uint16_t _payload_length;$/;"	v	file:
_putc	./blackbox/blackbox_io.c	/^static void _putc(void *p, char c)$/;"	f	file:
_putc	./common/printf.c	/^static void _putc(void *p, char c)$/;"	f	file:
_skip_packet	./io/gps.c	/^static bool _skip_packet;$/;"	v	file:
_step	./io/gps.c	/^static uint8_t _step;$/;"	v	file:
_update_checksum	./io/gps.c	/^void _update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)$/;"	f
a	./flight/lowpass.h	/^    int64_t a[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
a2d	./common/typeconversion.c	/^int a2d(char ch)$/;"	f
a2i	./common/typeconversion.c	/^char a2i(char ch, const char **src, int base, int *nump)$/;"	f
ac1	./drivers/barometer_bmp085.c	/^    int16_t ac1;$/;"	m	struct:__anon43	file:
ac2	./drivers/barometer_bmp085.c	/^    int16_t ac2;$/;"	m	struct:__anon43	file:
ac3	./drivers/barometer_bmp085.c	/^    int16_t ac3;$/;"	m	struct:__anon43	file:
ac4	./drivers/barometer_bmp085.c	/^    uint16_t ac4;$/;"	m	struct:__anon43	file:
ac5	./drivers/barometer_bmp085.c	/^    uint16_t ac5;$/;"	m	struct:__anon43	file:
ac6	./drivers/barometer_bmp085.c	/^    uint16_t ac6;$/;"	m	struct:__anon43	file:
acc	./sensors/acceleration.c	/^acc_t acc;                       \/\/ acc access functions$/;"	v
accADC	./sensors/acceleration.c	/^int16_t accADC[XYZ_AXIS_COUNT];$/;"	v
accAlign	./sensors/acceleration.c	/^sensor_align_e accAlign = 0;$/;"	v
accDeadband	./config/config_profile.h	/^    accDeadband_t accDeadband;$/;"	m	struct:profile_s
accDeadband	./flight/imu.c	/^static accDeadband_t *accDeadband;$/;"	v	file:
accDeadband_s	./flight/imu.h	/^typedef struct accDeadband_s {$/;"	s
accDeadband_t	./flight/imu.h	/^} accDeadband_t;$/;"	t	typeref:struct:accDeadband_s
accSetCalibrationCycles	./sensors/acceleration.c	/^void accSetCalibrationCycles(uint16_t calibrationCyclesRequired)$/;"	f
accSmooth	./blackbox/blackbox.c	/^    int16_t accSmooth[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
accSmooth	./flight/imu.c	/^int16_t accSmooth[XYZ_AXIS_COUNT];$/;"	v
accSum	./flight/imu.c	/^int32_t accSum[XYZ_AXIS_COUNT];$/;"	v
accSumCount	./flight/imu.c	/^int accSumCount = 0;$/;"	v
accTimeSum	./flight/imu.c	/^uint32_t accTimeSum = 0;        \/\/ keep track for integration of acc$/;"	v
accVelScale	./flight/imu.c	/^float accVelScale;$/;"	v
accZero	./config/config_master.h	/^    flightDynamicsTrims_t accZero;$/;"	m	struct:master_t
acc_1G	./sensors/acceleration.c	/^uint16_t acc_1G = 256;          \/\/ this is the 1G measured acceleration.$/;"	v
acc_align	./sensors/sensors.h	/^    sensor_align_e acc_align;               \/\/ acc alignment$/;"	m	struct:sensorAlignmentConfig_s
acc_hardware	./config/config_master.h	/^    uint8_t acc_hardware;                   \/\/ Which acc hardware to use on boards with more than one device$/;"	m	struct:master_t
acc_lpf_factor	./config/config_profile.h	/^    uint8_t acc_lpf_factor;                 \/\/ Set the Low Pass Filter factor for ACC. Increasing this value would reduce ACC noise (visible in GUI), but would increase ACC lag time. Zero = no filter$/;"	m	struct:profile_s
acc_lpf_factor	./flight/imu.h	/^    uint8_t acc_lpf_factor;$/;"	m	struct:imuRuntimeConfig_s
acc_s	./drivers/accgyro.h	/^typedef struct acc_s {$/;"	s
acc_samples	./drivers/accgyro_adxl345.c	/^uint8_t acc_samples = 0;$/;"	v
acc_t	./drivers/accgyro.h	/^} acc_t;$/;"	t	typeref:struct:acc_s
acc_unarmedcal	./config/config_profile.h	/^    uint8_t acc_unarmedcal;                 \/\/ turn automatic acc compensation on\/off$/;"	m	struct:profile_s
acc_unarmedcal	./flight/imu.h	/^    uint8_t acc_unarmedcal;$/;"	m	struct:imuRuntimeConfig_s
accelCalibrating	./drivers/accgyro_lsm303dlhc.c	/^uint8_t accelCalibrating = false;$/;"	v
accelOneG	./drivers/accgyro_lsm303dlhc.c	/^float accelOneG = 9.8065;$/;"	v
accelSum100Hz	./drivers/accgyro_lsm303dlhc.c	/^int32_t accelSum100Hz[3] = { 0, 0, 0 };$/;"	v
accelSum500Hz	./drivers/accgyro_lsm303dlhc.c	/^int32_t accelSum500Hz[3] = { 0, 0, 0 };$/;"	v
accelSummedSamples100Hz	./drivers/accgyro_lsm303dlhc.c	/^int32_t accelSummedSamples100Hz[3];$/;"	v
accelSummedSamples500Hz	./drivers/accgyro_lsm303dlhc.c	/^int32_t accelSummedSamples500Hz[3];$/;"	v
accel_fsr_e	./drivers/accgyro_mpu6050.c	/^enum accel_fsr_e {$/;"	g	file:
accel_fsr_e	./drivers/accgyro_spi_mpu6500.c	/^enum accel_fsr_e {$/;"	g	file:
accelerationSensor_e	./sensors/acceleration.h	/^} accelerationSensor_e;$/;"	t	typeref:enum:__anon113
accelerationTrims	./sensors/acceleration.c	/^static flightDynamicsTrims_t *accelerationTrims;$/;"	v	file:
accelerometerTrims	./config/config_profile.h	/^    rollAndPitchTrims_t accelerometerTrims; \/\/ accelerometer trim$/;"	m	struct:profile_s
accz_lpf_cutoff	./config/config_profile.h	/^    float accz_lpf_cutoff;                  \/\/ cutoff frequency for the low pass filter used on the acc z-axis for althold in Hz$/;"	m	struct:profile_s
activateConfig	./config/config.c	/^void activateConfig(void)$/;"	f
activateControlRateConfig	./config/config.c	/^void activateControlRateConfig(void)$/;"	f
active	./flight/failsafe.h	/^    bool active;$/;"	m	struct:failsafeState_s
activeBoxIdCount	./io/serial_msp.c	/^static uint8_t activeBoxIdCount = 0;$/;"	v	file:
activeBoxIds	./io/serial_msp.c	/^static uint8_t activeBoxIds[CHECKBOX_ITEM_COUNT];$/;"	v	file:
activeFeaturesLatch	./config/config.c	/^static uint32_t activeFeaturesLatch = 0;$/;"	v	file:
actual_speed	./flight/navigation.c	/^static int16_t actual_speed[2] = { 0, 0 };$/;"	v	file:
adcChannel	./drivers/adc.h	/^    uint8_t adcChannel;         \/\/ ADC1_INxx channel number$/;"	m	struct:adc_config_t
adcConfig	./drivers/adc.c	/^adc_config_t adcConfig[ADC_CHANNEL_COUNT];$/;"	v
adcGetChannel	./drivers/adc.c	/^uint16_t adcGetChannel(uint8_t channel)$/;"	f
adcInit	./drivers/adc_stm32f10x.c	/^void adcInit(drv_adc_config_t *init)$/;"	f
adcInit	./drivers/adc_stm32f30x.c	/^void adcInit(drv_adc_config_t *init)$/;"	f
adcValues	./drivers/adc.c	/^volatile uint16_t adcValues[ADC_CHANNEL_COUNT];$/;"	v
adc_config_t	./drivers/adc.h	/^typedef struct adc_config_t {$/;"	s
adc_config_t	./drivers/adc.h	/^} adc_config_t;$/;"	t	typeref:struct:adc_config_t
addGPSCoordinates	./telemetry/hott.c	/^void addGPSCoordinates(HOTT_GPS_MSG_t *hottGPSMessage, int32_t latitude, int32_t longitude)$/;"	f
addr	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t addr;$/;"	v	file:
adjustmentConfig_s	./io/rc_controls.h	/^typedef struct adjustmentConfig_s {$/;"	s
adjustmentConfig_t	./io/rc_controls.h	/^} adjustmentConfig_t;$/;"	t	typeref:struct:adjustmentConfig_s
adjustmentConfig_u	./io/rc_controls.h	/^typedef union adjustmentConfig_u {$/;"	u
adjustmentData_t	./io/rc_controls.h	/^} adjustmentData_t;$/;"	t	typeref:union:adjustmentConfig_u
adjustmentFunction	./io/rc_controls.h	/^    uint8_t adjustmentFunction;$/;"	m	struct:adjustmentConfig_s
adjustmentFunction	./io/rc_controls.h	/^    uint8_t adjustmentFunction;$/;"	m	struct:adjustmentRange_s
adjustmentFunction_e	./io/rc_controls.h	/^} adjustmentFunction_e;$/;"	t	typeref:enum:__anon96
adjustmentIndex	./io/rc_controls.h	/^    uint8_t adjustmentIndex;$/;"	m	struct:adjustmentRange_s
adjustmentMode_e	./io/rc_controls.h	/^} adjustmentMode_e;$/;"	t	typeref:enum:__anon97
adjustmentRange_s	./io/rc_controls.h	/^typedef struct adjustmentRange_s {$/;"	s
adjustmentRange_t	./io/rc_controls.h	/^} adjustmentRange_t;$/;"	t	typeref:struct:adjustmentRange_s
adjustmentRanges	./config/config_profile.h	/^    adjustmentRange_t adjustmentRanges[MAX_ADJUSTMENT_RANGE_COUNT];$/;"	m	struct:profile_s
adjustmentSelectConfig_s	./io/rc_controls.h	/^typedef struct adjustmentSelectConfig_s {$/;"	s
adjustmentSelectConfig_t	./io/rc_controls.h	/^} adjustmentSelectConfig_t;$/;"	t	typeref:struct:adjustmentSelectConfig_s
adjustmentStateMask	./io/rc_controls.c	/^uint8_t adjustmentStateMask = 0;$/;"	v
adjustmentState_s	./io/rc_controls.h	/^typedef struct adjustmentState_s {$/;"	s
adjustmentState_t	./io/rc_controls.h	/^} adjustmentState_t;$/;"	t	typeref:struct:adjustmentState_s
adjustmentStates	./io/rc_controls.c	/^adjustmentState_t adjustmentStates[MAX_SIMULTANEOUS_ADJUSTMENT_COUNT];$/;"	v
adjustmentStepConfig_s	./io/rc_controls.h	/^typedef struct adjustmentStepConfig_s {$/;"	s
adjustmentStepConfig_t	./io/rc_controls.h	/^} adjustmentStepConfig_t;$/;"	t	typeref:struct:adjustmentStepConfig_s
adxl345Detect	./drivers/accgyro_adxl345.c	/^bool adxl345Detect(drv_adxl345_config_t *init, acc_t *acc)$/;"	f
adxl345Init	./drivers/accgyro_adxl345.c	/^static void adxl345Init(void)$/;"	f	file:
adxl345Read	./drivers/accgyro_adxl345.c	/^static void adxl345Read(int16_t *accelData)$/;"	f	file:
af	./flight/lowpass.h	/^    float af[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
airPPM	./drivers/pwm_mapping.c	/^static const uint16_t airPPM[] = {$/;"	v	file:
airPWM	./drivers/pwm_mapping.c	/^static const uint16_t airPWM[] = {$/;"	v	file:
airplane	./drivers/pwm_mapping.h	/^    bool airplane;       \/\/ fixed wing hardware config, lots of servos etc$/;"	m	struct:drv_pwm_config_t
airplaneConfig	./config/config_master.h	/^    airplaneConfig_t airplaneConfig;$/;"	m	struct:master_t
airplaneConfig	./flight/mixer.c	/^static airplaneConfig_t *airplaneConfig;$/;"	v	file:
airplaneConfig_t	./flight/mixer.h	/^typedef struct airplaneConfig_t {$/;"	s
airplaneConfig_t	./flight/mixer.h	/^} airplaneConfig_t;$/;"	t	typeref:struct:airplaneConfig_t
airplaneMixer	./flight/mixer.c	/^static void airplaneMixer(void)$/;"	f	file:
ak8975Init	./drivers/compass_ak8975.c	/^void ak8975Init()$/;"	f
ak8975Read	./drivers/compass_ak8975.c	/^void ak8975Read(int16_t *magData)$/;"	f
ak8975detect	./drivers/compass_ak8975.c	/^bool ak8975detect(mag_t *mag)$/;"	f
al_version	./drivers/barometer_bmp085.c	/^    uint8_t chip_id, ml_version, al_version;$/;"	m	struct:__anon44	file:
alarm_invers1	./telemetry/hott.h	/^    uint8_t alarm_invers1;       \/\/#05 Inverse display (alarm?) bitmask$/;"	m	struct:HOTT_VARIO_MSG_s
alarm_invers1	./telemetry/hott.h	/^    uint8_t alarm_invers1;       \/\/#05 alarm bitmask. Value is displayed inverted$/;"	m	struct:HOTT_EAM_MSG_s
alarm_invers1	./telemetry/hott.h	/^    uint8_t alarm_invers1;       \/\/#05 alarm bitmask. Value is displayed inverted$/;"	m	struct:HOTT_GAM_MSG_s
alarm_invers1	./telemetry/hott.h	/^    uint8_t alarm_invers1;  \/\/#05 TODO: more info$/;"	m	struct:HOTT_AIRESC_MSG_s
alarm_invers1	./telemetry/hott.h	/^  uint8_t alarm_invers1; \/\/#05$/;"	m	struct:HOTT_GPS_MSG_s
alarm_invers2	./telemetry/hott.h	/^    uint8_t alarm_invers2;       \/\/#06 alarm bitmask. Value is displayed inverted$/;"	m	struct:HOTT_EAM_MSG_s
alarm_invers2	./telemetry/hott.h	/^    uint8_t alarm_invers2;       \/\/#06 alarm bitmask. Value is displayed inverted$/;"	m	struct:HOTT_GAM_MSG_s
alarm_invers2	./telemetry/hott.h	/^    uint8_t alarm_invers2;  \/\/#06 TODO: more info$/;"	m	struct:HOTT_AIRESC_MSG_s
alarm_invers2	./telemetry/hott.h	/^  uint8_t alarm_invers2; \/\/#06  1 = No GPS signal$/;"	m	struct:HOTT_GPS_MSG_s
alignBoard	./sensors/boardalignment.c	/^static void alignBoard(int16_t *vec)$/;"	f	file:
alignSensors	./sensors/boardalignment.c	/^void alignSensors(int16_t *src, int16_t *dest, uint8_t rotation)$/;"	f
allocatedOutputPortCount	./drivers/pwm_output.c	/^static uint8_t allocatedOutputPortCount = 0;$/;"	v	file:
altHoldThrottleAdjustment	./flight/altitudehold.c	/^int32_t altHoldThrottleAdjustment = 0;$/;"	v
alt_hold_deadband	./io/rc_controls.h	/^    uint8_t alt_hold_deadband;              \/\/ defines the neutral zone of throttle stick during altitude hold, default setting is +\/-40$/;"	m	struct:rcControlsConfig_s
alt_hold_fast_change	./io/rc_controls.h	/^    uint8_t alt_hold_fast_change;           \/\/ when disabled, turn off the althold when throttle stick is out of deadband defined with alt_hold_deadband; when enabled, altitude changes slowly proportional to stick movement$/;"	m	struct:rcControlsConfig_s
alternateFunction	./drivers/timer.h	/^    uint8_t alternateFunction;$/;"	m	struct:__anon56
altitude	./io/gps.c	/^    uint16_t altitude;$/;"	m	struct:gpsDataNmea_s	file:
altitudeHoldGetEstimatedAltitude	./flight/altitudehold.c	/^int32_t altitudeHoldGetEstimatedAltitude(void)$/;"	f
altitude_H	./telemetry/hott.h	/^    uint8_t altitude_H;          \/\/#07 Altitude high uint8_t$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_H	./telemetry/hott.h	/^    uint8_t altitude_H;          \/\/#25$/;"	m	struct:HOTT_GAM_MSG_s
altitude_H	./telemetry/hott.h	/^    uint8_t altitude_H;          \/\/#28$/;"	m	struct:HOTT_EAM_MSG_s
altitude_H	./telemetry/hott.h	/^  uint8_t altitude_H;    \/\/#23$/;"	m	struct:HOTT_GPS_MSG_s
altitude_L	./telemetry/hott.h	/^    uint8_t altitude_L;          \/\/#06 Altitude low uint8_t. In meters. A value of 500 means 0m$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_L	./telemetry/hott.h	/^    uint8_t altitude_L;          \/\/#24 altitude in meters. offset of 500, 500 = 0m$/;"	m	struct:HOTT_GAM_MSG_s
altitude_L	./telemetry/hott.h	/^    uint8_t altitude_L;          \/\/#27 Attitude lower value. unit: meters. Value of 500 = 0m$/;"	m	struct:HOTT_EAM_MSG_s
altitude_L	./telemetry/hott.h	/^  uint8_t altitude_L;    \/\/#22 meters. Value of 500 = 0m$/;"	m	struct:HOTT_GPS_MSG_s
altitude_ellipsoid	./io/gps.c	/^    int32_t altitude_ellipsoid;$/;"	m	struct:__anon84	file:
altitude_max_H	./telemetry/hott.h	/^    uint8_t altitude_max_H;      \/\/#09 Max. measured altitude high uint8_t$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_max_L	./telemetry/hott.h	/^    uint8_t altitude_max_L;      \/\/#08 Max. measured altitude low uint8_t. In meters. A value of 500 means 0m$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_min_H	./telemetry/hott.h	/^    uint8_t altitude_min_H;      \/\/#11 Min. measured altitude high uint8_t$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_min_L	./telemetry/hott.h	/^    uint8_t altitude_min_L;      \/\/#10 Min. measured altitude low uint8_t. In meters. A value of 500 means 0m$/;"	m	struct:HOTT_VARIO_MSG_s
altitude_msl	./io/gps.c	/^    int32_t altitude_msl;$/;"	m	struct:__anon84	file:
amperage	./sensors/battery.c	/^int32_t amperage = 0;               \/\/ amperage read by current sensor in centiampere (1\/100th A)$/;"	v
amperageLatest	./blackbox/blackbox.c	/^    uint16_t amperageLatest;$/;"	m	struct:blackboxMainState_t	file:
amperageLatestADC	./sensors/battery.c	/^uint16_t amperageLatestADC = 0;     \/\/ most recent raw reading from current ADC$/;"	v
angleAtMax	./flight/mixer.h	/^    uint8_t angleAtMax;                       \/\/ range [0;180] the measured angle in degrees from the middle when the servo is at the 'max' value.$/;"	m	struct:servoParam_t
angleAtMin	./flight/mixer.h	/^    uint8_t angleAtMin;                       \/\/ range [0;180] the measured angle in degrees from the middle when the servo is at the 'min' value.$/;"	m	struct:servoParam_t
angleIndexToPidIndexMap	./flight/autotune.c	/^static const pidIndex_e angleIndexToPidIndexMap[] = {$/;"	v	file:
angleModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t angleModeColors = {$/;"	v	file:
angle_compass	./telemetry/hott.h	/^  uint8_t angle_compass; \/\/#32 angle in 2degree steps. 1 = 2�, 255 = - 2� (1 uint8_t) North = 0�$/;"	m	struct:HOTT_GPS_MSG_s
angle_index_t	./common/axis.h	/^} angle_index_t;$/;"	t	typeref:enum:__anon29
angle_nick	./telemetry/hott.h	/^  uint8_t angle_nick;    \/\/#31 angle in 2degree steps$/;"	m	struct:HOTT_GPS_MSG_s
angle_roll	./telemetry/hott.h	/^  uint8_t angle_roll;    \/\/#30 angle roll in 2 degree steps$/;"	m	struct:HOTT_GPS_MSG_s
anglerad	./flight/imu.c	/^float anglerad[2] = { 0.0f, 0.0f };    \/\/ absolute angle inclination in radians$/;"	v
angles	./common/maths.h	/^    fp_angles_def angles;$/;"	m	union:__anon26
annexCode	./mw.c	/^void annexCode(void)$/;"	f
ap_mode	./flight/navigation.h	/^    uint16_t ap_mode;                       \/\/ Temporarily Disables GPS_HOLD_MODE to be able to make it possible to adjust the Hold-position when moving the sticks, creating a deadspan for GPS$/;"	m	struct:gpsProfile_s
applyAccelerationTrims	./sensors/acceleration.c	/^void applyAccelerationTrims(flightDynamicsTrims_t *accelerationTrims)$/;"	f
applyAltHold	./flight/altitudehold.c	/^void applyAltHold(airplaneConfig_t *airplaneConfig)$/;"	f
applyAndSaveAccelerometerTrimsDelta	./mw.c	/^void applyAndSaveAccelerometerTrimsDelta(rollAndPitchTrims_t *rollAndPitchTrimsDelta)$/;"	f
applyBarometerMedianFilter	./sensors/barometer.c	/^static int32_t applyBarometerMedianFilter(int32_t newPressureReading)$/;"	f	file:
applyChangedBits	./drivers/serial_softserial.c	/^void applyChangedBits(softSerial_t *softSerial)$/;"	f
applyDeadband	./common/maths.c	/^int32_t applyDeadband(int32_t value, int32_t deadband)$/;"	f
applyDefaultColors	./io/ledstrip.c	/^void applyDefaultColors(hsvColor_t *colors, uint8_t colorCount)$/;"	f
applyDefaultLedStripConfig	./io/ledstrip.c	/^void applyDefaultLedStripConfig(ledConfig_t *ledConfigs)$/;"	f
applyDirectionalModeColor	./io/ledstrip.c	/^void applyDirectionalModeColor(const uint8_t ledIndex, const ledConfig_t *ledConfig, const modeColorIndexes_t *modeColors)$/;"	f
applyFixedWingAltHold	./flight/altitudehold.c	/^static void applyFixedWingAltHold(airplaneConfig_t *airplaneConfig)$/;"	f	file:
applyGyroZero	./sensors/gyro.c	/^static void applyGyroZero(void)$/;"	f	file:
applyLedAnimationLayer	./io/ledstrip.c	/^static void applyLedAnimationLayer(void)$/;"	f	file:
applyLedIndicatorLayer	./io/ledstrip.c	/^void applyLedIndicatorLayer(uint8_t indicatorFlashState)$/;"	f
applyLedModeLayer	./io/ledstrip.c	/^void applyLedModeLayer(void)$/;"	f
applyLedThrottleLayer	./io/ledstrip.c	/^void applyLedThrottleLayer()$/;"	f
applyLedThrustRingLayer	./io/ledstrip.c	/^void applyLedThrustRingLayer(void)$/;"	f
applyLedWarningLayer	./io/ledstrip.c	/^void applyLedWarningLayer(uint8_t updateNow)$/;"	f
applyMultirotorAltHold	./flight/altitudehold.c	/^static void applyMultirotorAltHold(void)$/;"	f	file:
applyQuadrantColor	./io/ledstrip.c	/^void applyQuadrantColor(const uint8_t ledIndex, const ledConfig_t *ledConfig, const quadrant_e quadrant, const hsvColor_t *color)$/;"	f
applySelectAdjustment	./io/rc_controls.c	/^void applySelectAdjustment(uint8_t adjustmentFunction, uint8_t position)$/;"	f
applyStepAdjustment	./io/rc_controls.c	/^void applyStepAdjustment(controlRateConfig_t *controlRateConfig, uint8_t adjustmentFunction, int delta) {$/;"	f
areSticksInApModePosition	./io/rc_controls.c	/^bool areSticksInApModePosition(uint16_t ap_mode)$/;"	f
armingBeepTimeMicros	./io/beeper.c	/^static uint32_t armingBeepTimeMicros = 0;$/;"	v	file:
armingFlag_e	./config/runtime_config.h	/^} armingFlag_e;$/;"	t	typeref:enum:__anon18
armingFlags	./config/runtime_config.c	/^uint8_t armingFlags = 0;$/;"	v
arr	./blackbox/blackbox.c	/^    uint8_t arr[1];$/;"	m	struct:blackboxFieldDefinition_t	file:
autoBaud	./io/gps.h	/^    gpsAutoBaud_e autoBaud;$/;"	m	struct:gpsConfig_s
autoConfig	./io/gps.h	/^    gpsAutoConfig_e autoConfig;$/;"	m	struct:gpsConfig_s
autoTuneAngleIndex	./flight/autotune.c	/^static angle_index_t autoTuneAngleIndex;$/;"	v	file:
auto_disarm_delay	./config/config_master.h	/^    uint8_t auto_disarm_delay;              \/\/ allow automatically disarming multicopters after auto_disarm_delay seconds of zero throttle. Disabled when 0$/;"	m	struct:master_t
autotune	./flight/autotune.c	/^float autotune(angle_index_t angleIndex, const rollAndPitchInclination_t *inclination, float errorAngle)$/;"	f
autotuneBeginNextPhase	./flight/autotune.c	/^void autotuneBeginNextPhase(pidProfile_t *pidProfileToTune)$/;"	f
autotuneCycleResult	./blackbox/blackbox_fielddefs.h	/^    flightLogEvent_autotuneCycleResult_t autotuneCycleResult;$/;"	m	union:flightLogEventData_t
autotuneCycleStart	./blackbox/blackbox_fielddefs.h	/^    flightLogEvent_autotuneCycleStart_t autotuneCycleStart;$/;"	m	union:flightLogEventData_t
autotuneCycle_e	./flight/autotune.c	/^} autotuneCycle_e;$/;"	t	typeref:enum:__anon11	file:
autotuneEndPhase	./flight/autotune.c	/^void autotuneEndPhase(void)$/;"	f
autotuneLogAngleTargets	./flight/autotune.c	/^static void autotuneLogAngleTargets(float currentAngle)$/;"	f	file:
autotuneLogCycleStart	./flight/autotune.c	/^static void autotuneLogCycleStart()$/;"	f	file:
autotunePhase_e	./flight/autotune.c	/^} autotunePhase_e;$/;"	t	typeref:enum:__anon10	file:
autotuneReset	./flight/autotune.c	/^void autotuneReset(void)$/;"	f
autotuneTargets	./blackbox/blackbox_fielddefs.h	/^    flightLogEvent_autotuneTargets_t autotuneTargets;$/;"	m	union:flightLogEventData_t
auxChannelCount	./rx/rx.h	/^    uint8_t auxChannelCount;$/;"	m	struct:rxRuntimeConfig_s
auxChannelIndex	./io/rc_controls.h	/^    uint8_t auxChannelIndex;$/;"	m	struct:adjustmentRange_s
auxChannelIndex	./io/rc_controls.h	/^    uint8_t auxChannelIndex;$/;"	m	struct:adjustmentState_s
auxChannelIndex	./io/rc_controls.h	/^    uint8_t auxChannelIndex;$/;"	m	struct:modeActivationCondition_s
auxSwitchChannelIndex	./io/rc_controls.h	/^    uint8_t auxSwitchChannelIndex;$/;"	m	struct:adjustmentRange_s
axisPID	./flight/pid.c	/^int16_t axisPID[3];$/;"	v
axisPID_D	./blackbox/blackbox.c	/^    int32_t axisPID_P[XYZ_AXIS_COUNT], axisPID_I[XYZ_AXIS_COUNT], axisPID_D[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
axisPID_D	./flight/pid.c	/^int32_t axisPID_P[3], axisPID_I[3], axisPID_D[3];$/;"	v
axisPID_I	./blackbox/blackbox.c	/^    int32_t axisPID_P[XYZ_AXIS_COUNT], axisPID_I[XYZ_AXIS_COUNT], axisPID_D[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
axisPID_I	./flight/pid.c	/^int32_t axisPID_P[3], axisPID_I[3], axisPID_D[3];$/;"	v
axisPID_P	./blackbox/blackbox.c	/^    int32_t axisPID_P[XYZ_AXIS_COUNT], axisPID_I[XYZ_AXIS_COUNT], axisPID_D[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
axisPID_P	./flight/pid.c	/^int32_t axisPID_P[3], axisPID_I[3], axisPID_D[3];$/;"	v
axis_e	./common/axis.h	/^} axis_e;$/;"	t	typeref:enum:__anon27
azim	./io/gps.c	/^    int16_t azim;               \/\/ Azimuth in integer degrees$/;"	m	struct:__anon88	file:
b	./common/color.h	/^    uint8_t b;$/;"	m	struct:rgbColor24bpp_s
b	./flight/lowpass.h	/^    int64_t b[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
b1	./drivers/barometer_bmp085.c	/^    int16_t b1;$/;"	m	struct:__anon43	file:
b2	./drivers/barometer_bmp085.c	/^    int16_t b2;$/;"	m	struct:__anon43	file:
bDeviceState	./vcp/usb_pwr.c	/^__IO uint32_t bDeviceState = UNCONNECTED; \/* USB device status *\/$/;"	v
bESOFcnt	./vcp/usb_pwr.c	/^    __IO uint8_t bESOFcnt;$/;"	m	struct:__anon15	file:
bIntPackSOF	./vcp/usb_istr.c	/^__IO uint8_t bIntPackSOF = 0; \/* SOFs received between 2 consecutive packets *\/$/;"	v
backupPids	./flight/autotune.c	/^void backupPids(pidProfile_t *pidProfileToTune)$/;"	f
baro	./sensors/barometer.c	/^baro_t baro;                        \/\/ barometer access functions$/;"	v
baroCalculateAltitude	./sensors/barometer.c	/^int32_t baroCalculateAltitude(void)$/;"	f
baroCalculateFuncPtr	./drivers/barometer.h	/^typedef void (*baroCalculateFuncPtr)(int32_t *pressure, int32_t *temperature); \/\/ baro calculation (filled params are pressure and temperature)$/;"	t
baroGroundAltitude	./sensors/barometer.c	/^static int32_t baroGroundAltitude = 0;$/;"	v	file:
baroGroundPressure	./sensors/barometer.c	/^static int32_t baroGroundPressure = 0;$/;"	v	file:
baroModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t baroModeColors = {$/;"	v	file:
baroOpFuncPtr	./drivers/barometer.h	/^typedef void (*baroOpFuncPtr)(void);                       \/\/ baro start operation$/;"	t
baroPressure	./sensors/barometer.c	/^int32_t baroPressure = 0;$/;"	v
baroPressureSum	./sensors/barometer.c	/^static uint32_t baroPressureSum = 0;$/;"	v	file:
baroReady	./sensors/barometer.c	/^static bool baroReady = false;$/;"	v	file:
baroSensor_e	./sensors/barometer.h	/^} baroSensor_e;$/;"	t	typeref:enum:__anon115
baroSetCalibrationCycles	./sensors/barometer.c	/^void baroSetCalibrationCycles(uint16_t calibrationCyclesRequired)$/;"	f
baroTemperature	./sensors/barometer.c	/^int32_t baroTemperature = 0;$/;"	v
baroUpdate	./sensors/barometer.c	/^void baroUpdate(uint32_t currentTime)$/;"	f
baro_cf_alt	./sensors/barometer.h	/^    float baro_cf_alt;                      \/\/ apply CF to use ACC for height estimation$/;"	m	struct:barometerConfig_s
baro_cf_vel	./sensors/barometer.h	/^    float baro_cf_vel;                      \/\/ apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity)$/;"	m	struct:barometerConfig_s
baro_noise_lpf	./sensors/barometer.h	/^    float baro_noise_lpf;                   \/\/ additional LPF to reduce baro noise$/;"	m	struct:barometerConfig_s
baro_sample_count	./sensors/barometer.h	/^    uint8_t baro_sample_count;              \/\/ size of baro filter array$/;"	m	struct:barometerConfig_s
baro_t	./drivers/barometer.h	/^typedef struct baro_t {$/;"	s
baro_t	./drivers/barometer.h	/^} baro_t;$/;"	t	typeref:struct:baro_t
barometerConfig	./config/config_profile.h	/^    barometerConfig_t barometerConfig;$/;"	m	struct:profile_s
barometerConfig	./flight/altitudehold.c	/^static barometerConfig_t *barometerConfig;$/;"	v	file:
barometerConfig	./sensors/barometer.c	/^static barometerConfig_t *barometerConfig;$/;"	v	file:
barometerConfig_s	./sensors/barometer.h	/^typedef struct barometerConfig_s {$/;"	s
barometerConfig_t	./sensors/barometer.h	/^} barometerConfig_t;$/;"	t	typeref:struct:barometerConfig_s
barometerState_e	./sensors/barometer.c	/^} barometerState_e;$/;"	t	typeref:enum:__anon123	file:
batt1_H	./telemetry/hott.h	/^    uint8_t batt1_H;             \/\/#14$/;"	m	struct:HOTT_GAM_MSG_s
batt1_L	./telemetry/hott.h	/^    uint8_t batt1_L;             \/\/#13 battery 1 voltage LSB value. 0.1V steps. 50 = 5.5V$/;"	m	struct:HOTT_GAM_MSG_s
batt1_voltage_H	./telemetry/hott.h	/^    uint8_t batt1_voltage_H;     \/\/#22$/;"	m	struct:HOTT_EAM_MSG_s
batt1_voltage_L	./telemetry/hott.h	/^    uint8_t batt1_voltage_L;     \/\/#21 battery 1 voltage lower value in 100mv steps, 50=5V. optionally cell8_L value 0.02V steps$/;"	m	struct:HOTT_EAM_MSG_s
batt2_H	./telemetry/hott.h	/^    uint8_t batt2_H;             \/\/#16$/;"	m	struct:HOTT_GAM_MSG_s
batt2_L	./telemetry/hott.h	/^    uint8_t batt2_L;             \/\/#15 battery 2 voltage LSB value. 0.1V steps. 50 = 5.5V$/;"	m	struct:HOTT_GAM_MSG_s
batt2_voltage_H	./telemetry/hott.h	/^    uint8_t batt2_voltage_H;     \/\/#24$/;"	m	struct:HOTT_EAM_MSG_s
batt2_voltage_L	./telemetry/hott.h	/^    uint8_t batt2_voltage_L;     \/\/#23 battery 2 voltage lower value in 100mv steps, 50=5V. optionally cell8_H value. 0.02V steps$/;"	m	struct:HOTT_EAM_MSG_s
batt_cap_H	./telemetry/hott.h	/^    uint8_t batt_cap_H;          \/\/#34$/;"	m	struct:HOTT_EAM_MSG_s
batt_cap_H	./telemetry/hott.h	/^    uint8_t batt_cap_H;          \/\/#34$/;"	m	struct:HOTT_GAM_MSG_s
batt_cap_H	./telemetry/hott.h	/^    uint8_t batt_cap_H;     \/\/#12$/;"	m	struct:HOTT_AIRESC_MSG_s
batt_cap_L	./telemetry/hott.h	/^    uint8_t batt_cap_L;          \/\/#33 used battery capacity in 10mAh steps$/;"	m	struct:HOTT_EAM_MSG_s
batt_cap_L	./telemetry/hott.h	/^    uint8_t batt_cap_L;          \/\/#33 used battery capacity in 10mAh steps$/;"	m	struct:HOTT_GAM_MSG_s
batt_cap_L	./telemetry/hott.h	/^    uint8_t batt_cap_L;     \/\/#11 battery capacity in 10mAh steps$/;"	m	struct:HOTT_AIRESC_MSG_s
batteryAdcToVoltage	./sensors/battery.c	/^uint16_t batteryAdcToVoltage(uint16_t src)$/;"	f
batteryCapacity	./sensors/battery.h	/^    uint16_t batteryCapacity;               \/\/ mAh$/;"	m	struct:batteryConfig_s
batteryCellCount	./sensors/battery.c	/^uint8_t batteryCellCount = 3;       \/\/ cell count$/;"	v
batteryConfig	./config/config_master.h	/^    batteryConfig_t batteryConfig;$/;"	m	struct:master_t
batteryConfig	./sensors/battery.c	/^batteryConfig_t *batteryConfig;$/;"	v
batteryConfig_s	./sensors/battery.h	/^typedef struct batteryConfig_s {$/;"	s
batteryConfig_t	./sensors/battery.h	/^} batteryConfig_t;$/;"	t	typeref:struct:batteryConfig_s
batteryCriticalVoltage	./sensors/battery.c	/^uint16_t batteryCriticalVoltage;$/;"	v
batteryInit	./sensors/battery.c	/^void batteryInit(batteryConfig_t *initialBatteryConfig)$/;"	f
batteryState_e	./sensors/battery.h	/^} batteryState_e;$/;"	t	typeref:enum:__anon117
batteryWarningVoltage	./sensors/battery.c	/^uint16_t batteryWarningVoltage;$/;"	v
baudRate	./drivers/serial.h	/^    uint32_t baudRate;$/;"	m	struct:serialPort
baudRate_e	./io/serial.h	/^} baudRate_e;$/;"	t	typeref:enum:__anon71
baudRates	./io/serial.c	/^const uint32_t baudRates[] = {0, 9600, 19200, 38400, 57600, 115200, 230400, 250000}; \/\/ see baudRate_e$/;"	v
baudrateIndex	./io/gps.c	/^    uint8_t baudrateIndex; \/\/ see baudRate_e$/;"	m	struct:gpsInitData_t	file:
baudrateIndex	./io/gps.h	/^    uint8_t baudrateIndex;          \/\/ index into auto-detecting or current baudrate$/;"	m	struct:gpsData_t
bec_current	./telemetry/hott.h	/^    uint8_t bec_current;    \/\/#30 BEC current$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_current_max_H	./telemetry/hott.h	/^    uint8_t bec_current_max_H;  \/\/#32 TODO: not really clear why 2 bytes...$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_current_max_L	./telemetry/hott.h	/^    uint8_t bec_current_max_L;  \/\/#31 BEC max. current$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_min_v	./telemetry/hott.h	/^    uint8_t bec_min_v;      \/\/#29 BEC min. voltage$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_temp	./telemetry/hott.h	/^    uint8_t bec_temp;       \/\/#34 BEC temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_temp_max	./telemetry/hott.h	/^    uint8_t bec_temp_max;   \/\/#35 BEC highest temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
bec_v	./telemetry/hott.h	/^    uint8_t bec_v;          \/\/#28 BEC voltage$/;"	m	struct:HOTT_AIRESC_MSG_s
beepInverted	./drivers/sound_beeper.c	/^static void beepInverted(bool onoff)$/;"	f	file:
beepNormal	./drivers/sound_beeper.c	/^static void beepNormal(bool onoff)$/;"	f	file:
beep_2longerBeeps	./io/beeper.c	/^static const uint8_t beep_2longerBeeps[] = {$/;"	v	file:
beep_2shortBeeps	./io/beeper.c	/^static const uint8_t beep_2shortBeeps[] = {$/;"	v	file:
beep_armedBeep	./io/beeper.c	/^static const uint8_t beep_armedBeep[] = {$/;"	v	file:
beep_armedGpsFix	./io/beeper.c	/^static const uint8_t beep_armedGpsFix[] = {$/;"	v	file:
beep_armingBeep	./io/beeper.c	/^static const uint8_t beep_armingBeep[] = {$/;"	v	file:
beep_critBatteryBeep	./io/beeper.c	/^static const uint8_t beep_critBatteryBeep[] = {$/;"	v	file:
beep_disarmBeep	./io/beeper.c	/^static const uint8_t beep_disarmBeep[] = {$/;"	v	file:
beep_disarmRepeatBeep	./io/beeper.c	/^static const uint8_t beep_disarmRepeatBeep[] = {$/;"	v	file:
beep_gyroCalibrated	./io/beeper.c	/^static const uint8_t beep_gyroCalibrated[] = {$/;"	v	file:
beep_lowBatteryBeep	./io/beeper.c	/^static const uint8_t beep_lowBatteryBeep[] = {$/;"	v	file:
beep_multiBeeps	./io/beeper.c	/^static uint8_t beep_multiBeeps[MAX_MULTI_BEEPS + 2];$/;"	v	file:
beep_readyBeep	./io/beeper.c	/^static const uint8_t beep_readyBeep[] = {$/;"	v	file:
beep_shortBeep	./io/beeper.c	/^static const uint8_t beep_shortBeep[] = {$/;"	v	file:
beep_sos	./io/beeper.c	/^static const uint8_t beep_sos[] = {$/;"	v	file:
beep_txLostBeep	./io/beeper.c	/^static const uint8_t beep_txLostBeep[] = {$/;"	v	file:
beeper	./io/beeper.c	/^void beeper(beeperMode_e mode)$/;"	f
beeperConfig_s	./drivers/sound_beeper.h	/^typedef struct beeperConfig_s {$/;"	s
beeperConfig_t	./drivers/sound_beeper.h	/^} beeperConfig_t;$/;"	t	typeref:struct:beeperConfig_s
beeperConfirmationBeeps	./io/beeper.c	/^void beeperConfirmationBeeps(uint8_t beepCount)$/;"	f
beeperGpsStatus	./io/beeper.c	/^void beeperGpsStatus(void)$/;"	f
beeperInit	./drivers/sound_beeper.c	/^void beeperInit(beeperConfig_t *config)$/;"	f
beeperIsOn	./io/beeper.c	/^static uint8_t beeperIsOn = 0;$/;"	v	file:
beeperModeForTableIndex	./io/beeper.c	/^beeperMode_e beeperModeForTableIndex(int idx)$/;"	f
beeperMode_e	./io/beeper.h	/^} beeperMode_e;$/;"	t	typeref:enum:__anon81
beeperNameForTableIndex	./io/beeper.c	/^const char *beeperNameForTableIndex(int idx)$/;"	f
beeperNextToggleTime	./io/beeper.c	/^static uint32_t beeperNextToggleTime = 0;$/;"	v	file:
beeperPos	./io/beeper.c	/^static uint16_t beeperPos = 0;$/;"	v	file:
beeperProcessCommand	./io/beeper.c	/^static void beeperProcessCommand(void)$/;"	f	file:
beeperSilence	./io/beeper.c	/^void beeperSilence(void)$/;"	f
beeperTable	./io/beeper.c	/^static const beeperTableEntry_t beeperTable[] = {$/;"	v	file:
beeperTableEntryCount	./io/beeper.c	/^int beeperTableEntryCount(void)$/;"	f
beeperTableEntry_s	./io/beeper.c	/^typedef struct beeperTableEntry_s {$/;"	s	file:
beeperTableEntry_t	./io/beeper.c	/^} beeperTableEntry_t;$/;"	t	typeref:struct:beeperTableEntry_s	file:
beeperUpdate	./io/beeper.c	/^void beeperUpdate(void)$/;"	f
bf	./flight/lowpass.h	/^    float bf[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
bitrate	./vcp/usb_prop.h	/^    uint32_t bitrate;$/;"	m	struct:__anon16
bitsLeftToTransmit	./drivers/serial_softserial.c	/^    int8_t           bitsLeftToTransmit;$/;"	m	struct:softSerial_s	file:
blackboxBuildConditionCache	./blackbox/blackbox.c	/^static void blackboxBuildConditionCache()$/;"	f	file:
blackboxCheckAndLogArmingBeep	./blackbox/blackbox.c	/^static void blackboxCheckAndLogArmingBeep()$/;"	f	file:
blackboxConditionCache	./blackbox/blackbox.c	/^static uint32_t blackboxConditionCache;$/;"	v	file:
blackboxConditionalFieldDefinition_t	./blackbox/blackbox.c	/^typedef struct blackboxConditionalFieldDefinition_t {$/;"	s	file:
blackboxConditionalFieldDefinition_t	./blackbox/blackbox.c	/^} blackboxConditionalFieldDefinition_t;$/;"	t	typeref:struct:blackboxConditionalFieldDefinition_t	file:
blackboxDeltaFieldDefinition_t	./blackbox/blackbox.c	/^typedef struct blackboxDeltaFieldDefinition_t {$/;"	s	file:
blackboxDeltaFieldDefinition_t	./blackbox/blackbox.c	/^} blackboxDeltaFieldDefinition_t;$/;"	t	typeref:struct:blackboxDeltaFieldDefinition_t	file:
blackboxDeviceClose	./blackbox/blackbox_io.c	/^void blackboxDeviceClose(void)$/;"	f
blackboxDeviceFlush	./blackbox/blackbox_io.c	/^bool blackboxDeviceFlush(void)$/;"	f
blackboxDeviceOpen	./blackbox/blackbox_io.c	/^bool blackboxDeviceOpen(void)$/;"	f
blackboxFieldDefinition_t	./blackbox/blackbox.c	/^typedef struct blackboxFieldDefinition_t {$/;"	s	file:
blackboxFieldDefinition_t	./blackbox/blackbox.c	/^} blackboxFieldDefinition_t;$/;"	t	typeref:struct:blackboxFieldDefinition_t	file:
blackboxFieldHeaderNames	./blackbox/blackbox.c	/^static const char* const blackboxFieldHeaderNames[] = {$/;"	v	file:
blackboxGpsGFields	./blackbox/blackbox.c	/^static const blackboxConditionalFieldDefinition_t blackboxGpsGFields[] = {$/;"	v	file:
blackboxGpsHFields	./blackbox/blackbox.c	/^static const blackboxSimpleFieldDefinition_t blackboxGpsHFields[] = {$/;"	v	file:
blackboxGpsState_t	./blackbox/blackbox.c	/^typedef struct blackboxGpsState_t {$/;"	s	file:
blackboxGpsState_t	./blackbox/blackbox.c	/^} blackboxGpsState_t;$/;"	t	typeref:struct:blackboxGpsState_t	file:
blackboxHeader	./blackbox/blackbox.c	/^static const char blackboxHeader[] =$/;"	v	file:
blackboxHistory	./blackbox/blackbox.c	/^static blackboxMainState_t* blackboxHistory[3];$/;"	v	file:
blackboxHistoryRing	./blackbox/blackbox.c	/^static blackboxMainState_t blackboxHistoryRing[3];$/;"	v	file:
blackboxIFrameIndex	./blackbox/blackbox.c	/^static uint16_t blackboxPFrameIndex, blackboxIFrameIndex;$/;"	v	file:
blackboxIteration	./blackbox/blackbox.c	/^static uint32_t blackboxIteration;$/;"	v	file:
blackboxLastArmingBeep	./blackbox/blackbox.c	/^static uint32_t blackboxLastArmingBeep = 0;$/;"	v	file:
blackboxLogEvent	./blackbox/blackbox.c	/^void blackboxLogEvent(FlightLogEvent event, flightLogEventData_t *data)$/;"	f
blackboxLogIteration	./blackbox/blackbox.c	/^static void blackboxLogIteration()$/;"	f	file:
blackboxMainFields	./blackbox/blackbox.c	/^static const blackboxDeltaFieldDefinition_t blackboxMainFields[] = {$/;"	v	file:
blackboxMainState_t	./blackbox/blackbox.c	/^typedef struct blackboxMainState_t {$/;"	s	file:
blackboxMainState_t	./blackbox/blackbox.c	/^} blackboxMainState_t;$/;"	t	typeref:struct:blackboxMainState_t	file:
blackboxPFrameIndex	./blackbox/blackbox.c	/^static uint16_t blackboxPFrameIndex, blackboxIFrameIndex;$/;"	v	file:
blackboxPort	./blackbox/blackbox_io.c	/^static serialPort_t *blackboxPort = NULL;$/;"	v	file:
blackboxPortSharing	./blackbox/blackbox_io.c	/^static portSharing_e blackboxPortSharing;$/;"	v	file:
blackboxPrint	./blackbox/blackbox_io.c	/^int blackboxPrint(const char *s)$/;"	f
blackboxPrintf	./blackbox/blackbox_io.c	/^int blackboxPrintf(const char *fmt, ...)$/;"	f
blackboxSetState	./blackbox/blackbox.c	/^static void blackboxSetState(BlackboxState newState)$/;"	f	file:
blackboxShouldLogPFrame	./blackbox/blackbox.c	/^static bool blackboxShouldLogPFrame(uint32_t pFrameIndex)$/;"	f	file:
blackboxSimpleFieldDefinition_t	./blackbox/blackbox.c	/^typedef struct blackboxSimpleFieldDefinition_t {$/;"	s	file:
blackboxSimpleFieldDefinition_t	./blackbox/blackbox.c	/^} blackboxSimpleFieldDefinition_t;$/;"	t	typeref:struct:blackboxSimpleFieldDefinition_t	file:
blackboxSlowFields	./blackbox/blackbox.c	/^static const blackboxSimpleFieldDefinition_t blackboxSlowFields[] = {$/;"	v	file:
blackboxSlowFrameIterationTimer	./blackbox/blackbox.c	/^static uint16_t blackboxSlowFrameIterationTimer;$/;"	v	file:
blackboxSlowState_t	./blackbox/blackbox.c	/^typedef struct blackboxSlowState_t {$/;"	s	file:
blackboxSlowState_t	./blackbox/blackbox.c	/^} __attribute__((__packed__)) blackboxSlowState_t; \/\/ We pack this struct so that padding doesn't interfere with memcmp()$/;"	t	typeref:struct:blackboxSlowState_t	file:
blackboxState	./blackbox/blackbox.c	/^static BlackboxState blackboxState = BLACKBOX_STATE_DISABLED;$/;"	v	file:
blackboxWrite	./blackbox/blackbox_io.c	/^void blackboxWrite(uint8_t value)$/;"	f
blackboxWriteChunkSize	./blackbox/blackbox_io.c	/^uint8_t blackboxWriteChunkSize = 16;$/;"	v
blackboxWriteS16	./blackbox/blackbox_io.c	/^void blackboxWriteS16(int16_t value)$/;"	f
blackboxWriteSignedVB	./blackbox/blackbox_io.c	/^void blackboxWriteSignedVB(int32_t value)$/;"	f
blackboxWriteSysinfo	./blackbox/blackbox.c	/^static bool blackboxWriteSysinfo()$/;"	f	file:
blackboxWriteTag2_3S32	./blackbox/blackbox_io.c	/^void blackboxWriteTag2_3S32(int32_t *values) {$/;"	f
blackboxWriteTag8_4S16	./blackbox/blackbox_io.c	/^void blackboxWriteTag8_4S16(int32_t *values) {$/;"	f
blackboxWriteTag8_8SVB	./blackbox/blackbox_io.c	/^void blackboxWriteTag8_8SVB(int32_t *values, int valueCount)$/;"	f
blackboxWriteUnsignedVB	./blackbox/blackbox_io.c	/^void blackboxWriteUnsignedVB(uint32_t value)$/;"	f
blackbox_baudrateIndex	./io/serial.h	/^    uint8_t blackbox_baudrateIndex;$/;"	m	struct:serialPortConfig_s
blackbox_device	./config/config_master.h	/^    uint8_t blackbox_device;$/;"	m	struct:master_t
blackbox_rate_denom	./config/config_master.h	/^    uint8_t blackbox_rate_denom;$/;"	m	struct:master_t
blackbox_rate_num	./config/config_master.h	/^    uint8_t blackbox_rate_num;$/;"	m	struct:master_t
bma280Detect	./drivers/accgyro_bma280.c	/^bool bma280Detect(acc_t *acc)$/;"	f
bma280Init	./drivers/accgyro_bma280.c	/^static void bma280Init(void)$/;"	f	file:
bma280Read	./drivers/accgyro_bma280.c	/^static void bma280Read(int16_t *accelData)$/;"	f	file:
bmp085	./drivers/barometer_bmp085.c	/^static bmp085_t bmp085;$/;"	v	file:
bmp085Config_s	./drivers/barometer_bmp085.h	/^typedef struct bmp085Config_s {$/;"	s
bmp085Config_t	./drivers/barometer_bmp085.h	/^} bmp085Config_t;$/;"	t	typeref:struct:bmp085Config_s
bmp085ConversionOverrun	./drivers/barometer_bmp085.c	/^static uint16_t bmp085ConversionOverrun = 0;$/;"	v	file:
bmp085Detect	./drivers/barometer_bmp085.c	/^bool bmp085Detect(const bmp085Config_t *config, baro_t *baro)$/;"	f
bmp085Disable	./drivers/barometer_bmp085.c	/^void bmp085Disable(const bmp085Config_t *config)$/;"	f
bmp085InitDone	./drivers/barometer_bmp085.c	/^static bool bmp085InitDone = false;$/;"	v	file:
bmp085InitXCLRGpio	./drivers/barometer_bmp085.c	/^void bmp085InitXCLRGpio(const bmp085Config_t *config) {$/;"	f
bmp085_calculate	./drivers/barometer_bmp085.c	/^static void bmp085_calculate(int32_t *pressure, int32_t *temperature)$/;"	f	file:
bmp085_get_cal_param	./drivers/barometer_bmp085.c	/^static void bmp085_get_cal_param(void)$/;"	f	file:
bmp085_get_pressure	./drivers/barometer_bmp085.c	/^static int32_t bmp085_get_pressure(uint32_t up)$/;"	f	file:
bmp085_get_temperature	./drivers/barometer_bmp085.c	/^static int32_t bmp085_get_temperature(uint32_t ut)$/;"	f	file:
bmp085_get_up	./drivers/barometer_bmp085.c	/^static void bmp085_get_up(void)$/;"	f	file:
bmp085_get_ut	./drivers/barometer_bmp085.c	/^static void bmp085_get_ut(void)$/;"	f	file:
bmp085_smd500_calibration_param_t	./drivers/barometer_bmp085.c	/^} bmp085_smd500_calibration_param_t;$/;"	t	typeref:struct:__anon43	file:
bmp085_start_up	./drivers/barometer_bmp085.c	/^static void bmp085_start_up(void)$/;"	f	file:
bmp085_start_ut	./drivers/barometer_bmp085.c	/^static void bmp085_start_ut(void)$/;"	f	file:
bmp085_t	./drivers/barometer_bmp085.c	/^} bmp085_t;$/;"	t	typeref:struct:__anon44	file:
bmp085_up	./drivers/barometer_bmp085.c	/^static uint32_t bmp085_up;  \/\/ static result of pressure measurement$/;"	v	file:
bmp085_ut	./drivers/barometer_bmp085.c	/^static uint16_t bmp085_ut;  \/\/ static result of temperature measurement$/;"	v	file:
boardAlignment	./config/config_master.h	/^    boardAlignment_t boardAlignment;$/;"	m	struct:master_t
boardAlignment_s	./sensors/boardalignment.h	/^typedef struct boardAlignment_s {$/;"	s
boardAlignment_t	./sensors/boardalignment.h	/^} boardAlignment_t;$/;"	t	typeref:struct:boardAlignment_s
boardIdentifier	./io/serial_msp.c	/^static const char * const boardIdentifier = TARGET_BOARD_IDENTIFIER;$/;"	v	file:
boardRotation	./sensors/boardalignment.c	/^static float boardRotation[3][3];              \/\/ matrix$/;"	v	file:
boxId	./io/serial_msp.c	/^    const uint8_t boxId;         \/\/ see boxId_e$/;"	m	struct:box_e	file:
boxId_e	./io/rc_controls.h	/^} boxId_e;$/;"	t	typeref:enum:__anon94
boxName	./io/serial_msp.c	/^    const char *boxName;            \/\/ GUI-readable box name$/;"	m	struct:box_e	file:
box_e	./io/serial_msp.c	/^typedef struct box_e {$/;"	s	file:
box_t	./io/serial_msp.c	/^} box_t;$/;"	t	typeref:struct:box_e	file:
boxes	./io/serial_msp.c	/^static const box_t boxes[CHECKBOX_ITEM_COUNT + 1] = {$/;"	v	file:
bufferHead	./io/flashfs.c	/^static uint8_t bufferHead = 0, bufferTail = 0;$/;"	v	file:
bufferIndex	./io/serial_cli.c	/^static uint32_t bufferIndex = 0;$/;"	v	file:
bufferTail	./io/flashfs.c	/^static uint8_t bufferHead = 0, bufferTail = 0;$/;"	v	file:
buildDate	./version.c	/^const char * const buildDate = __DATE__;$/;"	v
buildRotationMatrix	./common/maths.c	/^void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3])$/;"	f
buildTime	./version.c	/^const char * const buildTime = __TIME__;$/;"	v
busy	./drivers/bus_i2c_stm32f10x.c	/^static volatile bool busy;$/;"	v	file:
bytes	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t bytes;$/;"	v	file:
bytes	./io/gps.c	/^    uint8_t bytes[UBLOX_PAYLOAD_SIZE];$/;"	m	union:__anon93	file:
bytes	./rx/sbus.c	/^    uint8_t bytes[SBUS_FRAME_SIZE];$/;"	m	union:__anon1	file:
c_state	./io/serial_msp.c	/^    mspState_e c_state;$/;"	m	struct:mspPort_s	file:
cachedRccCsrValue	./drivers/system.c	/^uint32_t cachedRccCsrValue;$/;"	v
cal_param	./drivers/barometer_bmp085.c	/^    bmp085_smd500_calibration_param_t cal_param;$/;"	m	struct:__anon44	file:
calculate	./drivers/barometer.h	/^    baroCalculateFuncPtr calculate;$/;"	m	struct:baro_t
calculateAccZLowPassFilterRCTimeConstant	./flight/imu.c	/^float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)$/;"	f
calculateAltHoldThrottleAdjustment	./flight/altitudehold.c	/^int32_t calculateAltHoldThrottleAdjustment(int32_t vel_tmp, float accZ_tmp, float accZ_old)$/;"	f
calculateBatteryCapacityRemainingPercentage	./sensors/battery.c	/^uint8_t calculateBatteryCapacityRemainingPercentage(void)$/;"	f
calculateBatteryPercentage	./sensors/battery.c	/^uint8_t calculateBatteryPercentage(void)$/;"	f
calculateBatteryState	./sensors/battery.c	/^batteryState_e calculateBatteryState(void)$/;"	f
calculateChannelRemapping	./rx/rx.c	/^uint8_t calculateChannelRemapping(uint8_t *channelMap, uint8_t channelMapEntryCount, uint8_t channelToRemap)$/;"	f
calculateChecksum	./config/config.c	/^static uint8_t calculateChecksum(const uint8_t *data, uint32_t length)$/;"	f	file:
calculateEstimatedAltitude	./flight/altitudehold.c	/^void calculateEstimatedAltitude(uint32_t currentTime)$/;"	f
calculateNonDataDrivenChannel	./rx/rx.c	/^static uint16_t calculateNonDataDrivenChannel(uint8_t chan, uint16_t sample)$/;"	f	file:
calculateRxChannelsAndUpdateFailsafe	./rx/rx.c	/^void calculateRxChannelsAndUpdateFailsafe(uint32_t currentTime)$/;"	f
calculateThrottleAngleCorrection	./flight/imu.c	/^int16_t calculateThrottleAngleCorrection(uint8_t throttle_correction_value)$/;"	f
calculateThrottleAngleScale	./flight/imu.c	/^float calculateThrottleAngleScale(uint16_t throttle_correction_angle)$/;"	f
calculateThrottleStatus	./io/rc_controls.c	/^throttleStatus_e calculateThrottleStatus(rxConfig_t *rxConfig, uint16_t deadband3d_throttle)$/;"	f
calculateTiltAngle	./flight/altitudehold.c	/^int16_t calculateTiltAngle(rollAndPitchInclination_t *inclination)$/;"	f
calculatedAltitude	./sensors/sonar.c	/^static int32_t calculatedAltitude;$/;"	v	file:
calibratingA	./sensors/acceleration.c	/^uint16_t calibratingA = 0;      \/\/ the calibration is done is the main loop. Calibrating decreases at each cycle down to 0, then we enter in a normal mode.$/;"	v
calibratingB	./sensors/barometer.c	/^uint16_t calibratingB = 0;      \/\/ baro calibration = get new ground pressure value$/;"	v
calibratingG	./sensors/gyro.c	/^uint16_t calibratingG = 0;$/;"	v
callback	./drivers/serial.h	/^    serialReceiveCallbackPtr callback;$/;"	m	struct:serialPort
canSendSmartPortTelemetry	./telemetry/smartport.c	/^bool canSendSmartPortTelemetry(void)$/;"	f
canUseBlackboxWithCurrentConfiguration	./blackbox/blackbox.c	/^static bool canUseBlackboxWithCurrentConfiguration(void)$/;"	f	file:
capture	./drivers/pwm_rx.c	/^    captureCompare_t capture;$/;"	m	struct:__anon59	file:
captureCompare_t	./drivers/timer.h	/^typedef uint16_t captureCompare_t;        \/\/ 16 bit on both 103 and 303, just register access must be 32bit sometimes (use timCCR_t)$/;"	t
captures	./drivers/pwm_rx.c	/^    uint32_t captures[PWM_PORTS_OR_PPM_CAPTURE_COUNT];$/;"	m	struct:ppmDevice	file:
captures	./drivers/pwm_rx.c	/^static uint16_t captures[PWM_PORTS_OR_PPM_CAPTURE_COUNT];$/;"	v	file:
castFloatBytesToInt	./common/encoding.c	/^uint32_t castFloatBytesToInt(float f)$/;"	f
ccr	./drivers/pwm_output.c	/^    volatile timCCR_t *ccr;$/;"	m	struct:__anon39	file:
cell1	./telemetry/hott.h	/^    uint8_t cell1;               \/\/#07 cell 1 voltage lower value. 0.02V steps, 124=2.48V$/;"	m	struct:HOTT_GAM_MSG_s
cell1_H	./telemetry/hott.h	/^    uint8_t cell1_H;             \/\/#14 cell 1 voltage high value. 0.02V steps, 124=2.48V$/;"	m	struct:HOTT_EAM_MSG_s
cell1_L	./telemetry/hott.h	/^    uint8_t cell1_L;             \/\/#07 cell 1 voltage lower value. 0.02V steps, 124=2.48V$/;"	m	struct:HOTT_EAM_MSG_s
cell2	./telemetry/hott.h	/^    uint8_t cell2;               \/\/#08$/;"	m	struct:HOTT_GAM_MSG_s
cell2_H	./telemetry/hott.h	/^    uint8_t cell2_H;             \/\/#15$/;"	m	struct:HOTT_EAM_MSG_s
cell2_L	./telemetry/hott.h	/^    uint8_t cell2_L;             \/\/#08$/;"	m	struct:HOTT_EAM_MSG_s
cell3	./telemetry/hott.h	/^    uint8_t cell3;               \/\/#09$/;"	m	struct:HOTT_GAM_MSG_s
cell3_H	./telemetry/hott.h	/^    uint8_t cell3_H;             \/\/#16$/;"	m	struct:HOTT_EAM_MSG_s
cell3_L	./telemetry/hott.h	/^    uint8_t cell3_L;             \/\/#09$/;"	m	struct:HOTT_EAM_MSG_s
cell4	./telemetry/hott.h	/^    uint8_t cell4;               \/\/#10$/;"	m	struct:HOTT_GAM_MSG_s
cell4_H	./telemetry/hott.h	/^    uint8_t cell4_H;             \/\/#17$/;"	m	struct:HOTT_EAM_MSG_s
cell4_L	./telemetry/hott.h	/^    uint8_t cell4_L;             \/\/#10$/;"	m	struct:HOTT_EAM_MSG_s
cell5	./telemetry/hott.h	/^    uint8_t cell5;               \/\/#11$/;"	m	struct:HOTT_GAM_MSG_s
cell5_H	./telemetry/hott.h	/^    uint8_t cell5_H;             \/\/#18$/;"	m	struct:HOTT_EAM_MSG_s
cell5_L	./telemetry/hott.h	/^    uint8_t cell5_L;             \/\/#11$/;"	m	struct:HOTT_EAM_MSG_s
cell6	./telemetry/hott.h	/^    uint8_t cell6;               \/\/#12$/;"	m	struct:HOTT_GAM_MSG_s
cell6_H	./telemetry/hott.h	/^    uint8_t cell6_H;             \/\/#19$/;"	m	struct:HOTT_EAM_MSG_s
cell6_L	./telemetry/hott.h	/^    uint8_t cell6_L;             \/\/#12$/;"	m	struct:HOTT_EAM_MSG_s
cell7_H	./telemetry/hott.h	/^    uint8_t cell7_H;             \/\/#20$/;"	m	struct:HOTT_EAM_MSG_s
cell7_L	./telemetry/hott.h	/^    uint8_t cell7_L;             \/\/#13$/;"	m	struct:HOTT_EAM_MSG_s
chan0	./rx/sbus.c	/^    unsigned int chan0 : 11;$/;"	m	struct:sbusFrame_s	file:
chan1	./rx/sbus.c	/^    unsigned int chan1 : 11;$/;"	m	struct:sbusFrame_s	file:
chan10	./rx/sbus.c	/^    unsigned int chan10 : 11;$/;"	m	struct:sbusFrame_s	file:
chan11	./rx/sbus.c	/^    unsigned int chan11 : 11;$/;"	m	struct:sbusFrame_s	file:
chan12	./rx/sbus.c	/^    unsigned int chan12 : 11;$/;"	m	struct:sbusFrame_s	file:
chan13	./rx/sbus.c	/^    unsigned int chan13 : 11;$/;"	m	struct:sbusFrame_s	file:
chan14	./rx/sbus.c	/^    unsigned int chan14 : 11;$/;"	m	struct:sbusFrame_s	file:
chan15	./rx/sbus.c	/^    unsigned int chan15 : 11;$/;"	m	struct:sbusFrame_s	file:
chan2	./rx/sbus.c	/^    unsigned int chan2 : 11;$/;"	m	struct:sbusFrame_s	file:
chan3	./rx/sbus.c	/^    unsigned int chan3 : 11;$/;"	m	struct:sbusFrame_s	file:
chan4	./rx/sbus.c	/^    unsigned int chan4 : 11;$/;"	m	struct:sbusFrame_s	file:
chan5	./rx/sbus.c	/^    unsigned int chan5 : 11;$/;"	m	struct:sbusFrame_s	file:
chan6	./rx/sbus.c	/^    unsigned int chan6 : 11;$/;"	m	struct:sbusFrame_s	file:
chan7	./rx/sbus.c	/^    unsigned int chan7 : 11;$/;"	m	struct:sbusFrame_s	file:
chan8	./rx/sbus.c	/^    unsigned int chan8 : 11;$/;"	m	struct:sbusFrame_s	file:
chan9	./rx/sbus.c	/^    unsigned int chan9 : 11;$/;"	m	struct:sbusFrame_s	file:
changeControlRateProfile	./config/config.c	/^void changeControlRateProfile(uint8_t profileIndex)$/;"	f
changeProfile	./config/config.c	/^void changeProfile(uint8_t profileIndex)$/;"	f
channel	./drivers/pwm_rx.c	/^    uint8_t channel; \/\/ only used for pwm, ignored by ppm$/;"	m	struct:__anon59	file:
channel	./drivers/timer.h	/^    uint8_t channel;$/;"	m	struct:__anon56
channel	./io/gps.c	/^    ubx_nav_svinfo_channel channel[16];         \/\/ 16 satellites * 12 byte$/;"	m	struct:__anon89	file:
channelCount	./rx/rx.h	/^    uint8_t channelCount;                  \/\/ number of rc channels as reported by current input driver$/;"	m	struct:rxRuntimeConfig_s
channelRange_s	./io/rc_controls.h	/^typedef struct channelRange_s {$/;"	s
channelRange_t	./io/rc_controls.h	/^} channelRange_t;$/;"	t	typeref:struct:channelRange_s
channelType_t	./drivers/timer.h	/^} channelType_t;$/;"	t	typeref:enum:__anon57
checkFrSkyTelemetryState	./telemetry/frsky.c	/^void checkFrSkyTelemetryState(void)$/;"	f
checkHoTTTelemetryState	./telemetry/hott.c	/^void checkHoTTTelemetryState(void)$/;"	f
checkMSPTelemetryState	./telemetry/msp.c	/^void checkMSPTelemetryState(void)$/;"	f
checkSmartPortTelemetryState	./telemetry/smartport.c	/^void checkSmartPortTelemetryState(void)$/;"	f
check_missed_wp	./flight/navigation.c	/^static bool check_missed_wp(void)$/;"	f	file:
checksum	./io/serial_msp.c	/^    uint8_t checksum;$/;"	m	struct:mspPort_s	file:
chip_id	./drivers/barometer_bmp085.c	/^    uint8_t chip_id, ml_version, al_version;$/;"	m	struct:__anon44	file:
chk	./config/config_master.h	/^    uint8_t chk;                            \/\/ XOR checksum$/;"	m	struct:master_t
chn	./io/gps.c	/^    uint8_t chn;                \/\/ Channel number, 255 for SVx not assigned to channel$/;"	m	struct:__anon88	file:
chunkSeparators	./io/ledstrip.c	/^static const char chunkSeparators[PARSE_STATE_COUNT] = {',', ':', ':',':', '\\0' };$/;"	v	file:
cjmcuHardwareRevision_e	./target/CJMCU/hardware_revision.h	/^} cjmcuHardwareRevision_e;$/;"	t	typeref:enum:cjmcuHardwareRevision_t
cjmcuHardwareRevision_t	./target/CJMCU/hardware_revision.h	/^typedef enum cjmcuHardwareRevision_t {$/;"	g
clearMocapAltReadyFlag	./sensors/mocap.c	/^void clearMocapAltReadyFlag(void) {$/;"	f
cliAdjustmentRange	./io/serial_cli.c	/^static void cliAdjustmentRange(char *cmdline)$/;"	f	file:
cliAux	./io/serial_cli.c	/^static void cliAux(char *cmdline)$/;"	f	file:
cliBuffer	./io/serial_cli.c	/^static char cliBuffer[48];$/;"	v	file:
cliCMix	./io/serial_cli.c	/^static void cliCMix(char *cmdline)$/;"	f	file:
cliColor	./io/serial_cli.c	/^static void cliColor(char *cmdline)$/;"	f	file:
cliCompare	./io/serial_cli.c	/^static int cliCompare(const void *a, const void *b)$/;"	f	file:
cliDefaults	./io/serial_cli.c	/^static void cliDefaults(char *cmdline)$/;"	f	file:
cliDump	./io/serial_cli.c	/^static void cliDump(char *cmdline)$/;"	f	file:
cliEnter	./io/serial_cli.c	/^void cliEnter(serialPort_t *serialPort)$/;"	f
cliExit	./io/serial_cli.c	/^static void cliExit(char *cmdline)$/;"	f	file:
cliFeature	./io/serial_cli.c	/^static void cliFeature(char *cmdline)$/;"	f	file:
cliFlashErase	./io/serial_cli.c	/^static void cliFlashErase(char *cmdline)$/;"	f	file:
cliFlashInfo	./io/serial_cli.c	/^static void cliFlashInfo(char *cmdline)$/;"	f	file:
cliFlashRead	./io/serial_cli.c	/^static void cliFlashRead(char *cmdline)$/;"	f	file:
cliFlashWrite	./io/serial_cli.c	/^static void cliFlashWrite(char *cmdline)$/;"	f	file:
cliGet	./io/serial_cli.c	/^static void cliGet(char *cmdline)$/;"	f	file:
cliGpsPassthrough	./io/serial_cli.c	/^static void cliGpsPassthrough(char *cmdline)$/;"	f	file:
cliHelp	./io/serial_cli.c	/^static void cliHelp(char *cmdline)$/;"	f	file:
cliInit	./io/serial_cli.c	/^void cliInit(serialConfig_t *serialConfig)$/;"	f
cliLed	./io/serial_cli.c	/^static void cliLed(char *cmdline)$/;"	f	file:
cliMap	./io/serial_cli.c	/^static void cliMap(char *cmdline)$/;"	f	file:
cliMixer	./io/serial_cli.c	/^static void cliMixer(char *cmdline)$/;"	f	file:
cliMode	./io/serial_cli.c	/^uint8_t cliMode = 0;$/;"	v
cliMotor	./io/serial_cli.c	/^static void cliMotor(char *cmdline)$/;"	f	file:
cliPlaySound	./io/serial_cli.c	/^static void cliPlaySound(char *cmdline)$/;"	f	file:
cliPort	./io/serial_cli.c	/^static serialPort_t *cliPort;$/;"	v	file:
cliPrint	./io/serial_cli.c	/^static void cliPrint(const char *str)$/;"	f	file:
cliPrintVar	./io/serial_cli.c	/^static void cliPrintVar(const clivalue_t *var, uint32_t full)$/;"	f	file:
cliProcess	./io/serial_cli.c	/^void cliProcess(void)$/;"	f
cliProfile	./io/serial_cli.c	/^static void cliProfile(char *cmdline)$/;"	f	file:
cliPrompt	./io/serial_cli.c	/^static void cliPrompt(void)$/;"	f	file:
cliRateProfile	./io/serial_cli.c	/^static void cliRateProfile(char *cmdline)$/;"	f	file:
cliReboot	./io/serial_cli.c	/^static void cliReboot(void) {$/;"	f	file:
cliSave	./io/serial_cli.c	/^static void cliSave(char *cmdline)$/;"	f	file:
cliSerial	./io/serial_cli.c	/^static void cliSerial(char *cmdline)$/;"	f	file:
cliServo	./io/serial_cli.c	/^static void cliServo(char *cmdline)$/;"	f	file:
cliSet	./io/serial_cli.c	/^static void cliSet(char *cmdline)$/;"	f	file:
cliSetVar	./io/serial_cli.c	/^static void cliSetVar(const clivalue_t *var, const int_float_value_t value)$/;"	f	file:
cliStatus	./io/serial_cli.c	/^static void cliStatus(char *cmdline)$/;"	f	file:
cliValueFlag_e	./io/serial_cli.c	/^} cliValueFlag_e;$/;"	t	typeref:enum:__anon99	file:
cliVersion	./io/serial_cli.c	/^static void cliVersion(char *cmdline)$/;"	f	file:
cliWrite	./io/serial_cli.c	/^static void cliWrite(uint8_t ch)$/;"	f	file:
clicmd_t	./io/serial_cli.c	/^} clicmd_t;$/;"	t	typeref:struct:__anon98	file:
climbrate10s_H	./telemetry/hott.h	/^    uint8_t climbrate10s_H;      \/\/#17 Climb rate m\/10s low uint8_t$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate10s_L	./telemetry/hott.h	/^    uint8_t climbrate10s_L;      \/\/#16 Climb rate m\/10s. Steps of 0.01m\/10s. Value of 30000 = 0.00 m\/10s$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate3s	./telemetry/hott.h	/^    uint8_t climbrate3s;         \/\/#28 climb rate in m\/3sec. Value of 120 = 0m\/3sec$/;"	m	struct:HOTT_GAM_MSG_s
climbrate3s	./telemetry/hott.h	/^    uint8_t climbrate3s;         \/\/#37 climbrate in m\/3sec. Value of 120 = 0m\/3sec$/;"	m	struct:HOTT_EAM_MSG_s
climbrate3s	./telemetry/hott.h	/^  uint8_t climbrate3s;   \/\/#26 climbrate in m\/3s resolution, value of 120 = 0 m\/3s$/;"	m	struct:HOTT_GPS_MSG_s
climbrate3s_H	./telemetry/hott.h	/^    uint8_t climbrate3s_H;       \/\/#15 Climb rate m\/3s low uint8_t$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate3s_L	./telemetry/hott.h	/^    uint8_t climbrate3s_L;       \/\/#14 Climb rate in m\/3s. Steps of 0.01m\/3s. Value of 30000 = 0.00 m\/3s$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate_H	./telemetry/hott.h	/^    uint8_t climbrate_H;         \/\/#13 Climb rate in m\/s$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate_H	./telemetry/hott.h	/^    uint8_t climbrate_H;         \/\/#27$/;"	m	struct:HOTT_GAM_MSG_s
climbrate_H	./telemetry/hott.h	/^    uint8_t climbrate_H;         \/\/#36$/;"	m	struct:HOTT_EAM_MSG_s
climbrate_H	./telemetry/hott.h	/^  uint8_t climbrate_H;    \/\/#25$/;"	m	struct:HOTT_GPS_MSG_s
climbrate_L	./telemetry/hott.h	/^    uint8_t climbrate_L;         \/\/#12 Climb rate in m\/s. Steps of 0.01m\/s. Value of 30000 = 0.00 m\/s$/;"	m	struct:HOTT_VARIO_MSG_s
climbrate_L	./telemetry/hott.h	/^    uint8_t climbrate_L;         \/\/#26 climb rate in 0.01m\/s. Value of 30000 = 0.00 m\/s$/;"	m	struct:HOTT_GAM_MSG_s
climbrate_L	./telemetry/hott.h	/^    uint8_t climbrate_L;         \/\/#35 climb rate in 0.01m\/s. Value of 30000 = 0.00 m\/s$/;"	m	struct:HOTT_EAM_MSG_s
climbrate_L	./telemetry/hott.h	/^  uint8_t climbrate_L;   \/\/#24 m\/s 0.01m\/s resolution. Value of 30000 = 0.00 m\/s$/;"	m	struct:HOTT_GPS_MSG_s
clivalue_t	./io/serial_cli.c	/^} clivalue_t;$/;"	t	typeref:struct:__anon100	file:
clock_sel_e	./drivers/accgyro_mpu6050.c	/^enum clock_sel_e {$/;"	g	file:
clock_sel_e	./drivers/accgyro_spi_mpu6500.c	/^enum clock_sel_e {$/;"	g	file:
closeSerialPort	./io/serial.c	/^void closeSerialPort(serialPort_t *serialPort) {$/;"	f
cmdMSP	./io/serial_msp.c	/^    uint8_t cmdMSP;$/;"	m	struct:mspPort_s	file:
cmdTable	./io/serial_cli.c	/^const clicmd_t cmdTable[] = {$/;"	v
cno	./io/gps.c	/^    uint8_t cno;                \/\/ Carrier to Noise Ratio (Signal Strength) \/\/ dbHz, 0-55.$/;"	m	struct:__anon88	file:
coeff_shift	./flight/lowpass.h	/^    int16_t coeff_shift;$/;"	m	struct:lowpass_t
color	./io/ledstrip.h	/^    uint8_t color;  \/\/ see colors (config_master)$/;"	m	struct:ledConfig_s
colorComponent_e	./common/color.h	/^} colorComponent_e;$/;"	t	typeref:enum:__anon30
colorIds	./io/ledstrip.c	/^} colorIds;$/;"	t	typeref:enum:__anon75	file:
colors	./config/config_master.h	/^    hsvColor_t colors[CONFIGURABLE_COLOR_COUNT];$/;"	m	struct:master_t
colors	./io/ledstrip.c	/^hsvColor_t *colors;$/;"	v
compassInit	./sensors/compass.c	/^void compassInit(void)$/;"	f
compass_direction	./telemetry/hott.h	/^    uint8_t compass_direction;   \/\/#42 Compass heading in 2� steps. 1 = 2�$/;"	m	struct:HOTT_VARIO_MSG_s
condition	./blackbox/blackbox.c	/^    uint8_t condition; \/\/ Decide whether this field should appear in the log$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
condition	./blackbox/blackbox.c	/^    uint8_t condition; \/\/ Decide whether this field should appear in the log$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
config	./io/rc_controls.h	/^    const adjustmentConfig_t *config;$/;"	m	struct:adjustmentState_s
configTimeBase	./drivers/timer.c	/^void configTimeBase(TIM_TypeDef *tim, uint16_t period, uint8_t mhz)$/;"	f
configureAdjustment	./io/rc_controls.c	/^void configureAdjustment(uint8_t index, uint8_t auxSwitchChannelIndex, const adjustmentConfig_t *adjustmentConfig) {$/;"	f
configureAltitudeHold	./flight/altitudehold.c	/^void configureAltitudeHold($/;"	f
configureFrSkyTelemetryPort	./telemetry/frsky.c	/^void configureFrSkyTelemetryPort(void)$/;"	f
configureHoTTTelemetryPort	./telemetry/hott.c	/^void configureHoTTTelemetryPort(void)$/;"	f
configureMPUDataReadyInterruptHandling	./drivers/accgyro_mpu6050.c	/^void configureMPUDataReadyInterruptHandling(void)$/;"	f
configureMSPTelemetryPort	./telemetry/msp.c	/^void configureMSPTelemetryPort(void)$/;"	f
configureSmartPortTelemetryPort	./telemetry/smartport.c	/^void configureSmartPortTelemetryPort(void)$/;"	f
constrain	./common/maths.c	/^int constrain(int amt, int low, int high)$/;"	f
constrainf	./common/maths.c	/^float constrainf(float amt, float low, float high)$/;"	f
container_of	./common/utils.h	45;"	d
controlRateConfig_s	./io/rc_controls.h	/^typedef struct controlRateConfig_s {$/;"	s
controlRateConfig_t	./io/rc_controls.h	/^} controlRateConfig_t;$/;"	t	typeref:struct:controlRateConfig_s
controlRateProfiles	./config/config_master.h	/^    controlRateConfig_t controlRateProfiles[MAX_CONTROL_RATE_PROFILE_COUNT];$/;"	m	struct:master_t
couldBeBusy	./drivers/flash_m25p16.c	/^static bool couldBeBusy = false;$/;"	v	file:
counter	./flight/failsafe.h	/^    int16_t counter;$/;"	m	struct:failsafeState_s
crosstrack_error	./flight/navigation.c	/^static int16_t crosstrack_error;$/;"	v	file:
currentAngle	./blackbox/blackbox_fielddefs.h	/^    uint16_t currentAngle;$/;"	m	struct:flightLogEvent_autotuneTargets_t
currentBeeperEntry	./io/beeper.c	/^static const beeperTableEntry_t *currentBeeperEntry = NULL;$/;"	v	file:
currentControlRateProfile	./config/config.c	/^controlRateConfig_t *currentControlRateProfile;$/;"	v
currentControlRateProfileIndex	./config/config.c	/^static uint8_t currentControlRateProfileIndex = 0;$/;"	v	file:
currentMeterOffset	./sensors/battery.h	/^    uint16_t currentMeterOffset;            \/\/ offset of the current sensor in millivolt steps$/;"	m	struct:batteryConfig_s
currentMeterScale	./sensors/battery.h	/^    int16_t currentMeterScale;             \/\/ scale the current sensor output voltage to milliamps. Value in 1\/10th mV\/A$/;"	m	struct:batteryConfig_s
currentMeterType	./sensors/battery.h	/^    currentSensor_e  currentMeterType;      \/\/ type of current meter used, either ADC or virtual$/;"	m	struct:batteryConfig_s
currentMixer	./flight/mixer.c	/^static motorMixer_t currentMixer[MAX_SUPPORTED_MOTORS];$/;"	v	file:
currentMixerMode	./flight/mixer.c	/^static mixerMode_e currentMixerMode;$/;"	v	file:
currentPort	./io/serial_msp.c	/^static mspPort_t *currentPort;$/;"	v	file:
currentProfile	./config/config.c	/^profile_t *currentProfile;$/;"	v
currentSensorToCentiamps	./sensors/battery.c	/^int32_t currentSensorToCentiamps(uint16_t src)$/;"	f
currentSensor_e	./sensors/battery.h	/^} currentSensor_e;$/;"	t	typeref:enum:__anon116
currentTime	./drivers/pwm_rx.c	/^    uint32_t currentTime;$/;"	m	struct:ppmDevice	file:
currentTime	./mw.c	/^uint32_t currentTime = 0;$/;"	v
current_H	./telemetry/hott.h	/^    uint8_t current_H;           \/\/#30$/;"	m	struct:HOTT_EAM_MSG_s
current_H	./telemetry/hott.h	/^    uint8_t current_H;           \/\/#30$/;"	m	struct:HOTT_GAM_MSG_s
current_H	./telemetry/hott.h	/^    uint8_t current_H;      \/\/#16$/;"	m	struct:HOTT_AIRESC_MSG_s
current_L	./telemetry/hott.h	/^    uint8_t current_L;           \/\/#29 Current in 0.1 steps$/;"	m	struct:HOTT_EAM_MSG_s
current_L	./telemetry/hott.h	/^    uint8_t current_L;           \/\/#29 current in 0.1A steps$/;"	m	struct:HOTT_GAM_MSG_s
current_L	./telemetry/hott.h	/^    uint8_t current_L;      \/\/#15 Current in 0.1 steps$/;"	m	struct:HOTT_AIRESC_MSG_s
current_max_H	./telemetry/hott.h	/^    uint8_t current_max_H;  \/\/#18$/;"	m	struct:HOTT_AIRESC_MSG_s
current_max_L	./telemetry/hott.h	/^    uint8_t current_max_L;  \/\/#17 Current max. in 0.1 steps$/;"	m	struct:HOTT_AIRESC_MSG_s
current_profile_index	./config/config_master.h	/^    uint8_t current_profile_index;$/;"	m	struct:master_t
customMixer	./config/config_master.h	/^    motorMixer_t customMixer[MAX_SUPPORTED_MOTORS]; \/\/ custom mixtable$/;"	m	struct:master_t
customMixers	./flight/mixer.c	/^static motorMixer_t *customMixers;$/;"	v	file:
cycle	./blackbox/blackbox_fielddefs.h	/^    uint8_t cycle;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
cycle	./flight/autotune.c	/^static autotuneCycle_e cycle;$/;"	v	file:
cycleCounterInit	./drivers/system.c	/^static void cycleCounterInit(void)$/;"	f	file:
cycleIndex	./io/display.c	/^    uint8_t cycleIndex;$/;"	m	struct:pageState_s	file:
cycleNum	./telemetry/frsky.c	/^static uint8_t cycleNum = 0;$/;"	v	file:
cyclePageIds	./io/display.c	/^const pageId_e cyclePageIds[] = {$/;"	v
cycleTime	./mw.c	/^uint16_t cycleTime = 0;         \/\/ this is the number in micro second to achieve a full loop, it can differ a little and is taken into account in the PID loop$/;"	v
d	./blackbox/blackbox_fielddefs.h	/^    uint8_t d;$/;"	m	struct:flightLogEvent_autotuneCycleResult_t
d	./blackbox/blackbox_fielddefs.h	/^    uint8_t d;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
d	./flight/autotune.c	/^    float d;$/;"	m	struct:fp_pid	file:
dTnav	./flight/navigation.c	/^static float dTnav;             \/\/ Delta Time in milliseconds for navigation computations, updated with every good GPS read$/;"	v	file:
data	./blackbox/blackbox_fielddefs.h	/^    flightLogEventData_t data;$/;"	m	struct:flightLogEvent_t
data	./io/rc_controls.h	/^    adjustmentData_t data;$/;"	m	struct:adjustmentConfig_s
dataRate	./drivers/accgyro_adxl345.h	/^    uint16_t dataRate;$/;"	m	struct:drv_adxl345_config_t
dataSize	./io/serial_msp.c	/^    uint8_t dataSize;$/;"	m	struct:mspPort_s	file:
datatype	./vcp/usb_prop.h	/^    uint8_t datatype;$/;"	m	struct:__anon16
dddmm	./io/gps.h	/^    int16_t dddmm;$/;"	m	struct:gpsCoordinateDDDMMmmmm_s
deadband	./io/rc_controls.h	/^    uint8_t deadband;                       \/\/ introduce a deadband around the stick center for pitch and roll axis. Must be greater than zero.$/;"	m	struct:rcControlsConfig_s
deadband3d_high	./flight/mixer.h	/^    uint16_t deadband3d_high;               \/\/ max 3d value$/;"	m	struct:flight3DConfig_s
deadband3d_low	./flight/mixer.h	/^    uint16_t deadband3d_low;                \/\/ min 3d value$/;"	m	struct:flight3DConfig_s
deadband3d_throttle	./flight/mixer.h	/^    uint16_t deadband3d_throttle;           \/\/ default throttle deadband from MIDRC$/;"	m	struct:flight3DConfig_s
debug	./debug.c	/^int16_t debug[DEBUG16_VALUE_COUNT];$/;"	v
defaultAdjustmentConfigs	./io/rc_controls.c	/^static const adjustmentConfig_t defaultAdjustmentConfigs[ADJUSTMENT_FUNCTION_COUNT - 1] = {$/;"	v	file:
defaultColors	./io/ledstrip.c	/^const hsvColor_t * const defaultColors[] = {$/;"	v
defaultLedStripConfig	./io/ledstrip.c	/^const ledConfig_t defaultLedStripConfig[] = {$/;"	v
defaultRateProfileIndex	./config/config_profile.h	/^    uint8_t defaultRateProfileIndex;$/;"	m	struct:profile_s
degreesToRadians	./common/maths.c	/^float degreesToRadians(int16_t degrees)$/;"	f
delay	./drivers/system.c	/^void delay(uint32_t ms)$/;"	f
delayMicroseconds	./drivers/system.c	/^void delayMicroseconds(uint32_t us)$/;"	f
deltaTime	./drivers/pwm_rx.c	/^    uint32_t deltaTime;$/;"	m	struct:ppmDevice	file:
derivative	./flight/navigation.c	/^    float derivative;$/;"	m	struct:__anon6	file:
detectAcc	./sensors/initialisation.c	/^static void detectAcc(accelerationSensor_e accHardwareToUse)$/;"	f	file:
detectBaro	./sensors/initialisation.c	/^static void detectBaro()$/;"	f	file:
detectGyro	./sensors/initialisation.c	/^bool detectGyro(uint16_t gyroLpf)$/;"	f
detectHardwareRevision	./target/CJMCU/hardware_revision.c	/^void detectHardwareRevision(void)$/;"	f
detectHardwareRevision	./target/NAZE/hardware_revision.c	/^void detectHardwareRevision(void)$/;"	f
detectHardwareRevision	./target/SUPERBEE/hardware_revision.c	/^void detectHardwareRevision(void)$/;"	f
detectMag	./sensors/initialisation.c	/^static void detectMag(magSensor_e magHardwareToUse)$/;"	f	file:
detectSpiDevice	./target/NAZE/hardware_revision.c	/^uint8_t detectSpiDevice(void)$/;"	f
detectSpiDevice	./target/SUPERBEE/hardware_revision.c	/^uint8_t detectSpiDevice(void)$/;"	f
detectedSensors	./sensors/initialisation.c	/^uint8_t detectedSensors[MAX_SENSORS_TO_DETECT] = { GYRO_NONE, ACC_NONE, BARO_NONE, MAG_NONE };$/;"	v
determineLedStripDimensions	./io/ledstrip.c	/^void determineLedStripDimensions(void)$/;"	f
determineOrientationLimits	./io/ledstrip.c	/^void determineOrientationLimits(void)$/;"	f
determinePortSharing	./io/serial.c	/^portSharing_e determinePortSharing(serialPortConfig_t *portConfig, serialPortFunction_e function)$/;"	f
determineServoMiddleOrForwardFromChannel	./flight/mixer.c	/^int16_t determineServoMiddleOrForwardFromChannel(servoIndex_e servoIndex)$/;"	f
dev	./drivers/bus_i2c_stm32f10x.c	/^    I2C_TypeDef *dev;$/;"	m	struct:i2cDevice_t	file:
devClear	./common/maths.c	/^void devClear(stdev_t *dev)$/;"	f
devPush	./common/maths.c	/^void devPush(stdev_t *dev, float x)$/;"	f
devStandardDeviation	./common/maths.c	/^float devStandardDeviation(stdev_t *dev)$/;"	f
devVariance	./common/maths.c	/^float devVariance(stdev_t *dev)$/;"	f
dev_addr	./drivers/barometer_bmp085.c	/^    uint8_t dev_addr;$/;"	m	struct:__anon44	file:
device_id	./drivers/accgyro_mma845x.c	/^static uint8_t device_id;$/;"	v	file:
differential_status	./io/gps.c	/^    uint8_t differential_status;$/;"	m	struct:__anon85	file:
digitalHi	./drivers/gpio.h	/^static inline void digitalHi(GPIO_TypeDef *p, uint16_t i) { p->BSRR = i; }$/;"	f
digitalIn	./drivers/gpio.h	/^static inline uint16_t digitalIn(GPIO_TypeDef *p, uint16_t i) {return p->IDR & i; }$/;"	f
digitalLo	./drivers/gpio.h	/^static inline void digitalLo(GPIO_TypeDef *p, uint16_t i)     { p->BRR = i; }$/;"	f
digitalToggle	./drivers/gpio.h	/^static inline void digitalToggle(GPIO_TypeDef *p, uint16_t i) { p->ODR ^= i; }$/;"	f
directionCodes	./io/ledstrip.c	/^static const char directionCodes[] = { 'N', 'E', 'S', 'W', 'U', 'D' };$/;"	v	file:
directionId_e	./io/ledstrip.c	/^} directionId_e;$/;"	t	typeref:enum:__anon76	file:
directionMappings	./io/ledstrip.c	/^static const uint8_t directionMappings[DIRECTION_COUNT] = {$/;"	v	file:
disableFlightMode	./config/runtime_config.c	/^uint16_t disableFlightMode(flightModeFlags_e mask)$/;"	f
disarmAt	./mw.c	/^static uint32_t disarmAt;     \/\/ Time of automatic disarm when "Don't spin the motors when armed" is enabled and auto_disarm_delay is nonzero$/;"	v	file:
disarm_kill_switch	./config/config_master.h	/^    uint8_t disarm_kill_switch;             \/\/ allow disarm via AUX switch regardless of throttle value$/;"	m	struct:master_t
displayDisablePageCycling	./io/display.c	/^void displayDisablePageCycling(void)$/;"	f
displayEnablePageCycling	./io/display.c	/^void displayEnablePageCycling(void)$/;"	f
displayInit	./io/display.c	/^void displayInit(rxConfig_t *rxConfigToUse)$/;"	f
displayPresent	./io/display.c	/^static bool displayPresent = false;$/;"	v	file:
displayResetPageCycling	./io/display.c	/^void displayResetPageCycling(void)$/;"	f
displaySetNextPageChangeAt	./io/display.c	/^void displaySetNextPageChangeAt(uint32_t futureMicros)$/;"	f
displaySetPage	./io/display.c	/^void displaySetPage(pageId_e pageId)$/;"	f
displayShowFixedPage	./io/display.c	/^void displayShowFixedPage(pageId_e pageId)$/;"	f
dmaBufferOffset	./drivers/light_ws2811strip.c	/^STATIC_UNIT_TESTED uint16_t dmaBufferOffset;$/;"	v
dmaIndex	./drivers/adc.h	/^    uint8_t dmaIndex;           \/\/ index into DMA buffer in case of sparse channels$/;"	m	struct:adc_config_t
doesConfigurationUsePort	./io/serial.c	/^bool doesConfigurationUsePort(serialPortIdentifier_e identifier)$/;"	f
down	./io/ledstrip.c	/^    uint8_t down;$/;"	m	struct:modeColorIndexes_s	file:
drawHorizonalPercentageBar	./io/display.c	/^void drawHorizonalPercentageBar(uint8_t width,uint8_t percent) {$/;"	f
drawRxChannel	./io/display.c	/^void drawRxChannel(uint8_t channelIndex, uint8_t width)$/;"	f
drv_adc_config_t	./drivers/adc.h	/^typedef struct drv_adc_config_t {$/;"	s
drv_adc_config_t	./drivers/adc.h	/^} drv_adc_config_t;$/;"	t	typeref:struct:drv_adc_config_t
drv_adxl345_config_t	./drivers/accgyro_adxl345.h	/^typedef struct drv_adxl345_config_t {$/;"	s
drv_adxl345_config_t	./drivers/accgyro_adxl345.h	/^} drv_adxl345_config_t;$/;"	t	typeref:struct:drv_adxl345_config_t
drv_pwm_config_t	./drivers/pwm_mapping.h	/^typedef struct drv_pwm_config_t {$/;"	s
drv_pwm_config_t	./drivers/pwm_mapping.h	/^} drv_pwm_config_t;$/;"	t	typeref:struct:drv_pwm_config_t
dterm_cut_hz	./flight/pid.h	/^    uint8_t dterm_cut_hz;                   \/\/ (default 17Hz, Range 1-50Hz) Used for PT1 element in PID1, PID2 and PID5$/;"	m	struct:pidProfile_s
dumpFlags_e	./io/serial_cli.c	/^} dumpFlags_e;$/;"	t	typeref:enum:__anon102	file:
dumpValues	./io/serial_cli.c	/^static void dumpValues(uint16_t mask)$/;"	f	file:
dynD8	./flight/pid.c	/^uint8_t dynP8[3], dynI8[3], dynD8[3], PIDweight[3];$/;"	v
dynI8	./flight/pid.c	/^uint8_t dynP8[3], dynI8[3], dynD8[3], PIDweight[3];$/;"	v
dynP8	./flight/pid.c	/^uint8_t dynP8[3], dynI8[3], dynD8[3], PIDweight[3];$/;"	v
dynThrPID	./io/rc_controls.h	/^    uint8_t dynThrPID;$/;"	m	struct:controlRateConfig_s
eState	./vcp/usb_pwr.c	/^    __IO RESUME_STATE eState;$/;"	m	struct:__anon15	file:
eam_sensor_id	./telemetry/hott.h	/^    uint8_t eam_sensor_id;       \/\/#02 EAM sensort id. constat value 0x8e$/;"	m	struct:HOTT_EAM_MSG_s
east	./io/ledstrip.c	/^    uint8_t east;$/;"	m	struct:modeColorIndexes_s	file:
east	./sensors/mocap.h	/^    int32_t east;$/;"	m	struct:mocap_enu_t
ecef_x	./io/gps.c	/^    int32_t ecef_x;$/;"	m	struct:__anon86	file:
ecef_x_velocity	./io/gps.c	/^    int32_t ecef_x_velocity;$/;"	m	struct:__anon86	file:
ecef_y	./io/gps.c	/^    int32_t ecef_y;$/;"	m	struct:__anon86	file:
ecef_y_velocity	./io/gps.c	/^    int32_t ecef_y_velocity;$/;"	m	struct:__anon86	file:
ecef_z	./io/gps.c	/^    int32_t ecef_z;$/;"	m	struct:__anon86	file:
ecef_z_velocity	./io/gps.c	/^    int32_t ecef_z_velocity;$/;"	m	struct:__anon86	file:
echoPin	./drivers/pwm_mapping.h	/^    uint16_t echoPin;$/;"	m	struct:sonarGPIOConfig_s
echo_pin	./drivers/sonar_hcsr04.h	/^    uint16_t echo_pin;$/;"	m	struct:sonarHardware_s
edgeCallback	./drivers/timer.c	/^    timerCCHandlerRec_t *edgeCallback[CC_CHANNELS_PER_TIMER];$/;"	m	struct:timerConfig_s	file:
edgeCb	./drivers/pwm_rx.c	/^    timerCCHandlerRec_t edgeCb;$/;"	m	struct:__anon59	file:
edgeCb	./drivers/serial_softserial.c	/^    timerCCHandlerRec_t edgeCb;$/;"	m	struct:softSerial_s	file:
electric_min	./telemetry/hott.h	/^    uint8_t electric_min;        \/\/#40 Electric minutes. Time does start, when motor current is > 3 A$/;"	m	struct:HOTT_EAM_MSG_s
electric_sec	./telemetry/hott.h	/^    uint8_t electric_sec;        \/\/#41$/;"	m	struct:HOTT_EAM_MSG_s
elev	./io/gps.c	/^    uint8_t elev;               \/\/ Elevation in integer degrees$/;"	m	struct:__anon88	file:
emf_avoidance	./config/config_master.h	/^    uint8_t emf_avoidance;                   \/\/ change pll settings to avoid noise in the uhf band$/;"	m	struct:master_t
enableCurrentMeter	./drivers/adc.h	/^    bool enableCurrentMeter;$/;"	m	struct:drv_adc_config_t
enableExternal1	./drivers/adc.h	/^    bool enableExternal1;$/;"	m	struct:drv_adc_config_t
enableFlightMode	./config/runtime_config.c	/^uint16_t enableFlightMode(flightModeFlags_e mask)$/;"	f
enableGPIOPowerUsageAndNoiseReductions	./drivers/system_stm32f10x.c	/^void enableGPIOPowerUsageAndNoiseReductions(void)$/;"	f
enableGPIOPowerUsageAndNoiseReductions	./drivers/system_stm32f30x.c	/^void enableGPIOPowerUsageAndNoiseReductions(void)$/;"	f
enableRSSI	./drivers/adc.h	/^    bool enableRSSI;$/;"	m	struct:drv_adc_config_t
enableVBat	./drivers/adc.h	/^    bool enableVBat;$/;"	m	struct:drv_adc_config_t
enabled	./drivers/adc.h	/^    bool enabled;$/;"	m	struct:adc_config_t
enabledFeatures	./config/config_master.h	/^    uint32_t enabledFeatures;$/;"	m	struct:master_t
enabledSensors	./config/runtime_config.c	/^static uint32_t enabledSensors = 0;$/;"	v	file:
encode	./blackbox/blackbox.c	/^    uint8_t encode;$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
encode	./blackbox/blackbox.c	/^    uint8_t encode;$/;"	m	struct:blackboxSimpleFieldDefinition_t	file:
endByte	./rx/sbus.c	/^    uint8_t endByte;$/;"	m	struct:sbusFrame_s	file:
endStep	./io/rc_controls.h	/^    uint8_t endStep;$/;"	m	struct:channelRange_s
ensureEEPROMContainsValidData	./config/config.c	/^void ensureEEPROMContainsValidData(void)$/;"	f
eocGpioPin	./drivers/barometer_bmp085.h	/^    uint16_t eocGpioPin;$/;"	m	struct:bmp085Config_s
eocGpioPort	./drivers/barometer_bmp085.h	/^    GPIO_TypeDef *eocGpioPort;$/;"	m	struct:bmp085Config_s
er_irq	./drivers/bus_i2c_stm32f10x.c	/^    uint8_t er_irq;$/;"	m	struct:i2cDevice_t	file:
error	./drivers/bus_i2c_stm32f10x.c	/^static volatile bool error = false;$/;"	v	file:
error	./flight/navigation.c	/^static int32_t error[2];$/;"	v	file:
errorAngleI	./flight/pid.c	/^static int32_t errorAngleI[2] = { 0, 0 };$/;"	v	file:
errorAngleIf	./flight/pid.c	/^static float errorAngleIf[2] = { 0.0f, 0.0f };$/;"	v	file:
errorGyroI	./flight/pid.c	/^static int32_t errorGyroI[3] = { 0, 0, 0 };$/;"	v	file:
errorGyroIf	./flight/pid.c	/^static float errorGyroIf[3] = { 0.0f, 0.0f, 0.0f };$/;"	v	file:
errorVelocityI	./flight/altitudehold.c	/^int32_t errorVelocityI = 0;$/;"	v
errors	./io/gps.h	/^    uint32_t errors;                \/\/ gps error counter - crc error\/lost of data\/sync etc..$/;"	m	struct:gpsData_t
escAndServoConfig	./config/config_master.h	/^    escAndServoConfig_t escAndServoConfig;$/;"	m	struct:master_t
escAndServoConfig	./flight/altitudehold.c	/^static escAndServoConfig_t *escAndServoConfig;$/;"	v	file:
escAndServoConfig	./flight/mixer.c	/^static escAndServoConfig_t *escAndServoConfig;$/;"	v	file:
escAndServoConfig	./io/rc_controls.c	/^static escAndServoConfig_t *escAndServoConfig;$/;"	v	file:
escAndServoConfig_s	./io/escservo.h	/^typedef struct escAndServoConfig_s {$/;"	s
escAndServoConfig_t	./io/escservo.h	/^} escAndServoConfig_t;$/;"	t	typeref:struct:escAndServoConfig_s
esc_max_temp	./telemetry/hott.h	/^    uint8_t esc_max_temp;   \/\/#14 ESC max. temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
esc_temp	./telemetry/hott.h	/^    uint8_t esc_temp;       \/\/#13 ESC temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
esof_counter	./vcp/usb_istr.c	/^__IO uint32_t esof_counter = 0; \/* expected SOF counter *\/$/;"	v
ev_irq	./drivers/bus_i2c_stm32f10x.c	/^    uint8_t ev_irq;$/;"	m	struct:i2cDevice_t	file:
evaluateOtherData	./io/serial.c	/^void evaluateOtherData(serialPort_t *serialPort, uint8_t receivedChar)$/;"	f
event	./blackbox/blackbox_fielddefs.h	/^    FlightLogEvent event;$/;"	m	struct:flightLogEvent_t
events	./flight/failsafe.h	/^    int16_t events;$/;"	m	struct:failsafeState_s
executePeriodicTasks	./mw.c	/^void executePeriodicTasks(void)$/;"	f
exti15_10_handlers	./drivers/system.c	/^static extiCallbackHandler* exti15_10_handlers[EXTI15_10_CALLBACK_HANDLER_COUNT];$/;"	v	file:
extiCallbackHandler	./drivers/system.h	/^typedef void extiCallbackHandler(void);$/;"	t
exti_irqn	./drivers/accgyro_mpu6050.h	/^    IRQn_Type exti_irqn;$/;"	m	struct:mpu6050Config_s
exti_irqn	./drivers/compass_hmc5883l.h	/^    IRQn_Type exti_irqn;$/;"	m	struct:hmc5883Config_s
exti_irqn	./drivers/sonar_hcsr04.h	/^    IRQn_Type exti_irqn;$/;"	m	struct:sonarHardware_s
exti_line	./drivers/accgyro_mpu6050.h	/^    uint32_t exti_line;$/;"	m	struct:mpu6050Config_s
exti_line	./drivers/compass_hmc5883l.h	/^    uint32_t exti_line;$/;"	m	struct:hmc5883Config_s
exti_line	./drivers/sonar_hcsr04.h	/^    uint32_t exti_line;$/;"	m	struct:sonarHardware_s
exti_pin_source	./drivers/accgyro_mpu6050.h	/^    uint8_t exti_pin_source;$/;"	m	struct:mpu6050Config_s
exti_pin_source	./drivers/compass_hmc5883l.h	/^    uint8_t exti_pin_source;$/;"	m	struct:hmc5883Config_s
exti_pin_source	./drivers/sonar_hcsr04.h	/^    uint8_t exti_pin_source;$/;"	m	struct:sonarHardware_s
exti_port_source	./drivers/accgyro_mpu6050.h	/^    uint8_t exti_port_source;$/;"	m	struct:mpu6050Config_s
exti_port_source	./drivers/compass_hmc5883l.h	/^    uint8_t exti_port_source;$/;"	m	struct:hmc5883Config_s
extraServos	./drivers/pwm_mapping.h	/^    bool extraServos;    \/\/ configure additional 4 channels in PPM mode as servos, not motors$/;"	m	struct:drv_pwm_config_t
extractAndStoreRxByte	./drivers/serial_softserial.c	/^void extractAndStoreRxByte(softSerial_t *softSerial)$/;"	f
fSuspendEnabled	./vcp/usb_pwr.c	/^__IO boolean fSuspendEnabled = TRUE; \/* true when suspend is possible *\/  \/\/ HJI$/;"	v
failsafeActivate	./flight/failsafe.c	/^static void failsafeActivate(void)$/;"	f	file:
failsafeApplyControlInput	./flight/failsafe.c	/^static void failsafeApplyControlInput(void)$/;"	f	file:
failsafeConfig	./config/config_master.h	/^    failsafeConfig_t failsafeConfig;$/;"	m	struct:master_t
failsafeConfig	./flight/failsafe.c	/^static failsafeConfig_t *failsafeConfig;$/;"	v	file:
failsafeConfig_s	./flight/failsafe.h	/^typedef struct failsafeConfig_s {$/;"	s
failsafeConfig_t	./flight/failsafe.h	/^} failsafeConfig_t;$/;"	t	typeref:struct:failsafeConfig_s
failsafeHasTimerElapsed	./flight/failsafe.c	/^static bool failsafeHasTimerElapsed(void)$/;"	f	file:
failsafeInit	./flight/failsafe.c	/^void failsafeInit(rxConfig_t *intialRxConfig)$/;"	f
failsafeIsActive	./flight/failsafe.c	/^bool failsafeIsActive(void)$/;"	f
failsafeIsMonitoring	./flight/failsafe.c	/^bool failsafeIsMonitoring(void)$/;"	f
failsafeIsReceivingRxData	./flight/failsafe.c	/^bool failsafeIsReceivingRxData(void)$/;"	f
failsafeOnRxCycleStarted	./flight/failsafe.c	/^void failsafeOnRxCycleStarted(void)$/;"	f
failsafeOnValidDataReceived	./flight/failsafe.c	/^void failsafeOnValidDataReceived(void)$/;"	f
failsafePhase	./blackbox/blackbox.c	/^    uint8_t failsafePhase;$/;"	m	struct:blackboxSlowState_t	file:
failsafePhase	./flight/failsafe.c	/^failsafePhase_e failsafePhase()$/;"	f
failsafePhase_e	./flight/failsafe.h	/^} failsafePhase_e;$/;"	t	typeref:enum:__anon14
failsafeReset	./flight/failsafe.c	/^static void failsafeReset(void)$/;"	f	file:
failsafeShouldForceLanding	./flight/failsafe.c	/^static bool failsafeShouldForceLanding(bool armed)$/;"	f	file:
failsafeShouldHaveCausedLandingByNow	./flight/failsafe.c	/^static bool failsafeShouldHaveCausedLandingByNow(void)$/;"	f	file:
failsafeStartMonitoring	./flight/failsafe.c	/^void failsafeStartMonitoring(void)$/;"	f
failsafeState	./flight/failsafe.c	/^static failsafeState_t failsafeState;$/;"	v	file:
failsafeState_s	./flight/failsafe.h	/^typedef struct failsafeState_s {$/;"	s
failsafeState_t	./flight/failsafe.h	/^} failsafeState_t;$/;"	t	typeref:struct:failsafeState_s
failsafeUpdateState	./flight/failsafe.c	/^void failsafeUpdateState(void)$/;"	f
failsafe_delay	./flight/failsafe.h	/^    uint8_t failsafe_delay;                 \/\/ Guard time for failsafe activation after signal lost. 1 step = 0.1sec - 1sec in example (10)$/;"	m	struct:failsafeConfig_s
failsafe_off_delay	./flight/failsafe.h	/^    uint8_t failsafe_off_delay;             \/\/ Time for Landing before motors stop in 0.1sec. 1 step = 0.1sec - 20sec in example (200)$/;"	m	struct:failsafeConfig_s
failsafe_throttle	./flight/failsafe.h	/^    uint16_t failsafe_throttle;             \/\/ Throttle level used for landing - specify value between 1000..2000 (pwm pulse width for slightly below hover). center throttle = 1500.$/;"	m	struct:failsafeConfig_s
failureMode	./drivers/system.c	/^void failureMode(uint8_t mode)$/;"	f
fakeAccDetect	./sensors/initialisation.c	/^bool fakeAccDetect(acc_t *acc)$/;"	f
fakeAccInit	./sensors/initialisation.c	/^static void fakeAccInit(void) {}$/;"	f	file:
fakeAccRead	./sensors/initialisation.c	/^static void fakeAccRead(int16_t *accData) {$/;"	f	file:
fakeGyroDetect	./sensors/initialisation.c	/^bool fakeGyroDetect(gyro_t *gyro, uint16_t lpf)$/;"	f
fakeGyroInit	./sensors/initialisation.c	/^static void fakeGyroInit(void) {}$/;"	f	file:
fakeGyroRead	./sensors/initialisation.c	/^static void fakeGyroRead(int16_t *gyroADC) {$/;"	f	file:
fakeGyroReadTemp	./sensors/initialisation.c	/^static void fakeGyroReadTemp(int16_t *tempData) {$/;"	f	file:
fall	./drivers/pwm_rx.c	/^    captureCompare_t fall;$/;"	m	struct:__anon59	file:
fastA2F	./common/typeconversion.c	/^float fastA2F(const char *p)$/;"	f
fastUpdateLEDDMABuffer	./drivers/light_ws2811strip.c	/^STATIC_UNIT_TESTED void fastUpdateLEDDMABuffer(rgbColor24bpp_t *color)$/;"	f
fc_acc	./flight/imu.c	/^float fc_acc;$/;"	v
feature	./config/config.c	/^bool feature(uint32_t mask)$/;"	f
featureClear	./config/config.c	/^void featureClear(uint32_t mask)$/;"	f
featureClearAll	./config/config.c	/^void featureClearAll()$/;"	f
featureConfigured	./config/config.c	/^bool featureConfigured(uint32_t mask)$/;"	f
featureMask	./config/config.c	/^uint32_t featureMask(void)$/;"	f
featureNames	./io/serial_cli.c	/^static const char * const featureNames[] = {$/;"	v	file:
featureSet	./config/config.c	/^void featureSet(uint32_t mask)$/;"	f
features_e	./config/config.h	/^} features_e;$/;"	t	typeref:enum:__anon17
fieldIndex	./blackbox/blackbox.c	/^        int fieldIndex;$/;"	m	union:__anon33::__anon34	file:
fieldNameIndex	./blackbox/blackbox.c	/^    int8_t fieldNameIndex;$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
fieldNameIndex	./blackbox/blackbox.c	/^    int8_t fieldNameIndex;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
fieldNameIndex	./blackbox/blackbox.c	/^    int8_t fieldNameIndex;$/;"	m	struct:blackboxFieldDefinition_t	file:
fieldNameIndex	./blackbox/blackbox.c	/^    int8_t fieldNameIndex;$/;"	m	struct:blackboxSimpleFieldDefinition_t	file:
fill1	./telemetry/hott.h	/^    uint8_t fill1;       \/\/#02 constant value 0x00$/;"	m	struct:HOTT_TEXTMODE_MSG
filterApplyPt1	./flight/filter.c	/^float filterApplyPt1(float input, filterStatePt1_t* state, uint8_t f_cut) {$/;"	f
filterServos	./flight/mixer.c	/^void filterServos(void)$/;"	f
filterStatePt1_t	./flight/filter.h	/^typedef float filterStatePt1_t;$/;"	t
findBoxByActiveBoxId	./io/serial_msp.c	/^static const box_t *findBoxByActiveBoxId(uint8_t activeBoxId)$/;"	f	file:
findBoxByPermenantId	./io/serial_msp.c	/^static const box_t *findBoxByPermenantId(uint8_t permenantId)$/;"	f	file:
findNextSerialPortConfig	./io/serial.c	/^serialPortConfig_t *findNextSerialPortConfig(serialPortFunction_e function)$/;"	f
findNextSharedSerialPort	./io/serial.c	/^serialPort_t *findNextSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction)$/;"	f
findSerialPortConfig	./io/serial.c	/^serialPortConfig_t *findSerialPortConfig(serialPortFunction_e function)$/;"	f
findSerialPortConfigState	./io/serial.c	/^static findSerialPortConfigState_t findSerialPortConfigState;$/;"	v	file:
findSerialPortConfigState_s	./io/serial.c	/^typedef struct findSerialPortConfigState_s {$/;"	s	file:
findSerialPortConfigState_t	./io/serial.c	/^} findSerialPortConfigState_t;$/;"	t	typeref:struct:findSerialPortConfigState_s	file:
findSerialPortUsageByIdentifier	./io/serial.c	/^static serialPortUsage_t *findSerialPortUsageByIdentifier(serialPortIdentifier_e identifier)$/;"	f	file:
findSerialPortUsageByPort	./io/serial.c	/^serialPortUsage_t *findSerialPortUsageByPort(serialPort_t *serialPort) {$/;"	f
findSharedSerialPort	./io/serial.c	/^serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction)$/;"	f
findSharedSerialPortState	./io/serial.c	/^static findSharedSerialPortState_t findSharedSerialPortState;$/;"	v	file:
findSharedSerialPortState_s	./io/serial.c	/^typedef struct findSharedSerialPortState_s {$/;"	s	file:
findSharedSerialPortState_t	./io/serial.c	/^} findSharedSerialPortState_t;$/;"	t	typeref:struct:findSharedSerialPortState_s	file:
finishBlackbox	./blackbox/blackbox.c	/^void finishBlackbox(void)$/;"	f
firstPeakAngle	./blackbox/blackbox_fielddefs.h	/^    uint16_t firstPeakAngle, secondPeakAngle;$/;"	m	struct:flightLogEvent_autotuneTargets_t
firstPeakAngle	./flight/autotune.c	/^static float firstPeakAngle, secondPeakAngle; \/\/ in degrees$/;"	v	file:
fix_status	./io/gps.c	/^    uint8_t fix_status;$/;"	m	struct:__anon85	file:
fix_status	./io/gps.c	/^    uint8_t fix_status;$/;"	m	struct:__anon86	file:
fix_type	./io/gps.c	/^    uint8_t fix_type;$/;"	m	struct:__anon85	file:
fix_type	./io/gps.c	/^    uint8_t fix_type;$/;"	m	struct:__anon86	file:
fixedwing_althold_dir	./flight/mixer.h	/^    int8_t fixedwing_althold_dir;           \/\/ +1 or -1 for pitch\/althold gain. later check if need more than just sign$/;"	m	struct:airplaneConfig_t
flags	./blackbox/blackbox_fielddefs.h	/^    uint8_t flags;$/;"	m	struct:flightLogEvent_autotuneCycleResult_t
flags	./io/gps.c	/^    uint8_t flags;              \/\/ Bitmask$/;"	m	struct:__anon88	file:
flags	./io/ledstrip.h	/^    uint16_t flags; \/\/ see ledFlag_e$/;"	m	struct:ledConfig_s
flags	./rx/sbus.c	/^    uint8_t flags;$/;"	m	struct:sbusFrame_s	file:
flaps_speed	./flight/mixer.h	/^    uint8_t flaps_speed;                    \/\/ airplane mode flaps, 0 = no flaps, > 0 = flap speed, larger = faster$/;"	m	struct:airplaneConfig_t
flashGeometry_t	./drivers/flash.h	/^typedef struct flashGeometry_t {$/;"	s
flashGeometry_t	./drivers/flash.h	/^} flashGeometry_t;$/;"	t	typeref:struct:flashGeometry_t
flashWriteBuffer	./io/flashfs.c	/^static uint8_t flashWriteBuffer[FLASHFS_WRITE_BUFFER_SIZE];$/;"	v	file:
flashfsAdvanceTailInBuffer	./io/flashfs.c	/^static void flashfsAdvanceTailInBuffer(uint32_t delta)$/;"	f	file:
flashfsBufferIsEmpty	./io/flashfs.c	/^static bool flashfsBufferIsEmpty()$/;"	f	file:
flashfsClearBuffer	./io/flashfs.c	/^static void flashfsClearBuffer()$/;"	f	file:
flashfsEraseCompletely	./io/flashfs.c	/^void flashfsEraseCompletely()$/;"	f
flashfsEraseRange	./io/flashfs.c	/^void flashfsEraseRange(uint32_t start, uint32_t end)$/;"	f
flashfsFlushAsync	./io/flashfs.c	/^bool flashfsFlushAsync()$/;"	f
flashfsFlushSync	./io/flashfs.c	/^void flashfsFlushSync()$/;"	f
flashfsGetDirtyDataBuffers	./io/flashfs.c	/^static void flashfsGetDirtyDataBuffers(uint8_t const *buffers[], uint32_t bufferSizes[])$/;"	f	file:
flashfsGetGeometry	./io/flashfs.c	/^const flashGeometry_t* flashfsGetGeometry()$/;"	f
flashfsGetOffset	./io/flashfs.c	/^uint32_t flashfsGetOffset()$/;"	f
flashfsGetSize	./io/flashfs.c	/^uint32_t flashfsGetSize()$/;"	f
flashfsIdentifyStartOfFreeSpace	./io/flashfs.c	/^int flashfsIdentifyStartOfFreeSpace()$/;"	f
flashfsInit	./io/flashfs.c	/^void flashfsInit()$/;"	f
flashfsIsEOF	./io/flashfs.c	/^bool flashfsIsEOF() {$/;"	f
flashfsIsReady	./io/flashfs.c	/^bool flashfsIsReady()$/;"	f
flashfsReadAbs	./io/flashfs.c	/^int flashfsReadAbs(uint32_t address, uint8_t *buffer, unsigned int len)$/;"	f
flashfsSeekAbs	./io/flashfs.c	/^void flashfsSeekAbs(uint32_t offset)$/;"	f
flashfsSeekRel	./io/flashfs.c	/^void flashfsSeekRel(int32_t offset)$/;"	f
flashfsSetTailAddress	./io/flashfs.c	/^static void flashfsSetTailAddress(uint32_t address)$/;"	f	file:
flashfsTransmitBufferUsed	./io/flashfs.c	/^static uint32_t flashfsTransmitBufferUsed()$/;"	f	file:
flashfsWrite	./io/flashfs.c	/^void flashfsWrite(const uint8_t *data, unsigned int len, bool sync)$/;"	f
flashfsWriteBuffers	./io/flashfs.c	/^static uint32_t flashfsWriteBuffers(uint8_t const **buffers, uint32_t *bufferSizes, int bufferCount, bool sync)$/;"	f	file:
flashfsWriteByte	./io/flashfs.c	/^void flashfsWriteByte(uint8_t byte)$/;"	f
flight3DConfig	./config/config_master.h	/^    flight3DConfig_t flight3DConfig;$/;"	m	struct:master_t
flight3DConfig	./flight/mixer.c	/^static flight3DConfig_t *flight3DConfig;$/;"	v	file:
flight3DConfig_s	./flight/mixer.h	/^typedef struct flight3DConfig_s {$/;"	s
flight3DConfig_t	./flight/mixer.h	/^} flight3DConfig_t;$/;"	t	typeref:struct:flight3DConfig_s
flightControllerIdentifier	./io/serial_msp.c	/^static const char * const flightControllerIdentifier = CLEANFLIGHT_IDENTIFIER; \/\/ 4 UPPER CASE alpha numeric characters that identify the flight controller.$/;"	v	file:
flightDynamicsTrims_def_t	./sensors/sensors.h	/^} flightDynamicsTrims_def_t;$/;"	t	typeref:struct:int16_flightDynamicsTrims_s
flightDynamicsTrims_t	./sensors/sensors.h	/^} flightDynamicsTrims_t;$/;"	t	typeref:union:__anon120
flightLogEventData_t	./blackbox/blackbox_fielddefs.h	/^typedef union flightLogEventData_t$/;"	u
flightLogEventData_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEventData_t;$/;"	t	typeref:union:flightLogEventData_t
flightLogEvent_autotuneCycleResult_t	./blackbox/blackbox_fielddefs.h	/^typedef struct flightLogEvent_autotuneCycleResult_t {$/;"	s
flightLogEvent_autotuneCycleResult_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEvent_autotuneCycleResult_t;$/;"	t	typeref:struct:flightLogEvent_autotuneCycleResult_t
flightLogEvent_autotuneCycleStart_t	./blackbox/blackbox_fielddefs.h	/^typedef struct flightLogEvent_autotuneCycleStart_t {$/;"	s
flightLogEvent_autotuneCycleStart_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEvent_autotuneCycleStart_t;$/;"	t	typeref:struct:flightLogEvent_autotuneCycleStart_t
flightLogEvent_autotuneTargets_t	./blackbox/blackbox_fielddefs.h	/^typedef struct flightLogEvent_autotuneTargets_t {$/;"	s
flightLogEvent_autotuneTargets_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEvent_autotuneTargets_t;$/;"	t	typeref:struct:flightLogEvent_autotuneTargets_t
flightLogEvent_syncBeep_t	./blackbox/blackbox_fielddefs.h	/^typedef struct flightLogEvent_syncBeep_t {$/;"	s
flightLogEvent_syncBeep_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEvent_syncBeep_t;$/;"	t	typeref:struct:flightLogEvent_syncBeep_t
flightLogEvent_t	./blackbox/blackbox_fielddefs.h	/^typedef struct flightLogEvent_t$/;"	s
flightLogEvent_t	./blackbox/blackbox_fielddefs.h	/^} flightLogEvent_t;$/;"	t	typeref:struct:flightLogEvent_t
flightModeFlags	./blackbox/blackbox.c	/^    uint16_t flightModeFlags;$/;"	m	struct:blackboxSlowState_t	file:
flightModeFlags	./config/runtime_config.c	/^uint16_t flightModeFlags = 0;$/;"	v
flightModeFlags_e	./config/runtime_config.h	/^} flightModeFlags_e;$/;"	t	typeref:enum:__anon19
flight_direction	./telemetry/hott.h	/^  uint8_t flight_direction; \/\/#07 flight direction in 2 degreees\/step (1 = 2degrees);$/;"	m	struct:HOTT_GPS_MSG_s
flight_dynamics_index_t	./common/axis.h	/^} flight_dynamics_index_t;$/;"	t	typeref:enum:__anon28
float_value	./io/serial_cli.c	/^    float float_value;$/;"	m	union:__anon101	file:
flushHottRxBuffer	./telemetry/hott.c	/^static void flushHottRxBuffer(void)$/;"	f	file:
fn	./drivers/timer.h	/^    timerCCHandlerCallback* fn;$/;"	m	struct:timerCCHandlerRec_s
fn	./drivers/timer.h	/^    timerOvrHandlerCallback* fn;$/;"	m	struct:timerOvrHandlerRec_s
forcedOverflowTimerValue	./drivers/timer.c	/^	uint32_t forcedOverflowTimerValue;$/;"	m	struct:timerConfig_s	file:
format	./vcp/usb_prop.h	/^    uint8_t format;$/;"	m	struct:__anon16
forwardAuxChannelsToServos	./flight/mixer.c	/^STATIC_UNIT_TESTED void forwardAuxChannelsToServos(uint8_t firstServoIndex)$/;"	f
forwardFromChannel	./flight/mixer.h	/^    int8_t forwardFromChannel;              \/\/ RX channel index, 0 based.  See CHANNEL_FORWARDING_DISABLED$/;"	m	struct:servoParam_t
fp_angles	./common/maths.h	/^typedef struct fp_angles {$/;"	s
fp_angles_def	./common/maths.h	/^} fp_angles_def;$/;"	t	typeref:struct:fp_angles
fp_angles_t	./common/maths.h	/^} fp_angles_t;$/;"	t	typeref:union:__anon26
fp_pid	./flight/autotune.c	/^typedef struct fp_pid {$/;"	s	file:
fp_pid_t	./flight/autotune.c	/^} fp_pid_t;$/;"	t	typeref:struct:fp_pid	file:
fp_vector	./common/maths.h	/^typedef struct fp_vector {$/;"	s
fputc	./common/printf.c	/^int fputc(int c, FILE *f)$/;"	f
frSkyDataIdTable	./telemetry/smartport.c	/^const uint16_t frSkyDataIdTable[] = {$/;"	v
fraction3	./flight/navigation.c	/^static uint16_t fraction3[2];$/;"	v	file:
frame	./rx/sbus.c	/^    struct sbusFrame_s frame;$/;"	m	union:__anon1	typeref:struct:__anon1::sbusFrame_s	file:
freeFrSkyTelemetryPort	./telemetry/frsky.c	/^void freeFrSkyTelemetryPort(void)$/;"	f
freeHoTTTelemetryPort	./telemetry/hott.c	/^void freeHoTTTelemetryPort(void)$/;"	f
freeMSPTelemetryPort	./telemetry/msp.c	/^void freeMSPTelemetryPort(void)$/;"	f
freeSmartPortTelemetryPort	./telemetry/smartport.c	/^void freeSmartPortTelemetryPort(void)$/;"	f
free_char1	./telemetry/hott.h	/^    uint8_t free_char1;          \/\/#39 Free ASCII character.  appears right to home distance$/;"	m	struct:HOTT_VARIO_MSG_s
free_char1	./telemetry/hott.h	/^  uint8_t free_char1;    \/\/#40 appears right to home distance$/;"	m	struct:HOTT_GPS_MSG_s
free_char2	./telemetry/hott.h	/^    uint8_t free_char2;          \/\/#40 Free ASCII character.  appears right to home direction$/;"	m	struct:HOTT_VARIO_MSG_s
free_char2	./telemetry/hott.h	/^  uint8_t free_char2;    \/\/#41 appears right to home direction$/;"	m	struct:HOTT_GPS_MSG_s
free_char3	./telemetry/hott.h	/^    uint8_t free_char3;          \/\/#41 Free ASCII character.  appears? TODO: Check where this char appears$/;"	m	struct:HOTT_VARIO_MSG_s
free_char3	./telemetry/hott.h	/^  uint8_t free_char3;    \/\/#42 GPS ASCII D=DGPS 2=2D 3=3D -=No Fix$/;"	m	struct:HOTT_GPS_MSG_s
freq	./flight/lowpass.h	/^    int16_t freq;                           \/\/ Normalized freq in 1\/1000ths$/;"	m	struct:lowpass_t
fresh	./sensors/mocap.h	/^    bool fresh; \/\/ when this data is new, fresh == true$/;"	m	struct:mocap_enu_t
frskyGpsCoordFormat_e	./telemetry/telemetry.h	/^} frskyGpsCoordFormat_e;$/;"	t	typeref:enum:__anon105
frskyPort	./telemetry/frsky.c	/^static serialPort_t *frskyPort = NULL;$/;"	v	file:
frskyPortSharing	./telemetry/frsky.c	/^static portSharing_e frskyPortSharing;$/;"	v	file:
frskyTelemetryEnabled	./telemetry/frsky.c	/^static bool frskyTelemetryEnabled =  false;$/;"	v	file:
frskyUnit_e	./telemetry/telemetry.h	/^} frskyUnit_e;$/;"	t	typeref:enum:__anon106
frskyVFasPrecision_e	./telemetry/frsky.h	/^} frskyVFasPrecision_e;$/;"	t	typeref:enum:__anon109
frsky_coordinate_format	./telemetry/telemetry.h	/^    frskyGpsCoordFormat_e frsky_coordinate_format;   $/;"	m	struct:telemetryConfig_s
frsky_unit	./telemetry/telemetry.h	/^    frskyUnit_e frsky_unit;$/;"	m	struct:telemetryConfig_s
frsky_vfas_precision	./telemetry/telemetry.h	/^    uint8_t frsky_vfas_precision;$/;"	m	struct:telemetryConfig_s
ftoa	./common/typeconversion.c	/^char *ftoa(float x, char *floatString)$/;"	f
fuel_ml_H	./telemetry/hott.h	/^    uint8_t fuel_ml_H;           \/\/#21$/;"	m	struct:HOTT_GAM_MSG_s
fuel_ml_L	./telemetry/hott.h	/^    uint8_t fuel_ml_L;           \/\/#20 Fuel in ml scale. Full = 65535!$/;"	m	struct:HOTT_GAM_MSG_s
fuel_procent	./telemetry/hott.h	/^    uint8_t fuel_procent;        \/\/#19 Fuel capacity in %. Values 0--100$/;"	m	struct:HOTT_GAM_MSG_s
func	./io/serial_cli.c	/^    void (*func)(char *cmdline);$/;"	m	struct:__anon98	file:
function	./io/serial.h	/^    serialPortFunction_e function;$/;"	m	struct:serialPortUsage_s
functionCodes	./io/ledstrip.c	/^static const char functionCodes[] = { 'I', 'W', 'F', 'A', 'T', 'R', 'C' };$/;"	v	file:
functionMappings	./io/ledstrip.c	/^static const uint16_t functionMappings[FUNCTION_COUNT] = {$/;"	v	file:
functionMask	./io/serial.h	/^    uint16_t functionMask;$/;"	m	struct:serialPortConfig_s
g	./common/color.h	/^    uint8_t g;$/;"	m	struct:rgbColor24bpp_s
g_pfnVectors	./startup/startup_stm32f10x_hd_gcc.S	/^g_pfnVectors:$/;"	l
g_pfnVectors	./startup/startup_stm32f10x_md_gcc.S	/^g_pfnVectors:$/;"	l
g_pfnVectors	./startup/startup_stm32f30x_md_gcc.S	/^g_pfnVectors:$/;"	l
gam_sensor_id	./telemetry/hott.h	/^    uint8_t gam_sensor_id;       \/\/#02 EAM sensort id. constat value 0x8d$/;"	m	struct:HOTT_GAM_MSG_s
gcd	./blackbox/blackbox.c	/^static int gcd(int num, int denom)$/;"	f	file:
general_error_number	./telemetry/hott.h	/^    uint8_t general_error_number;\/\/#41 Voice error == 12. TODO: more docu$/;"	m	struct:HOTT_GAM_MSG_s
generateLedConfig	./io/ledstrip.c	/^void generateLedConfig(uint8_t ledIndex, char *ledConfigBuffer, size_t bufferSize)$/;"	f
generateLowpassCoeffs2	./flight/lowpass.c	/^void generateLowpassCoeffs2(int16_t freq, lowpass_t *filter)$/;"	f
generatePitchRollCurve	./io/rc_curves.c	/^void generatePitchRollCurve(controlRateConfig_t *controlRateConfig)$/;"	f
generateThrottleCurve	./io/rc_curves.c	/^void generateThrottleCurve(controlRateConfig_t *controlRateConfig, escAndServoConfig_t *escAndServoConfig)$/;"	f
generateYawCurve	./io/rc_curves.c	/^void generateYawCurve(controlRateConfig_t *controlRateConfig)$/;"	f
geometry	./drivers/flash_m25p16.c	/^static flashGeometry_t geometry;$/;"	v	file:
getArmingBeepTimeMicros	./io/beeper.c	/^uint32_t getArmingBeepTimeMicros(void)$/;"	f
getControlRateConfig	./config/config.c	/^controlRateConfig_t *getControlRateConfig(uint8_t profileIndex) {$/;"	f
getCurrentControlRateProfile	./config/config.c	/^uint8_t getCurrentControlRateProfile(void)$/;"	f
getCurrentProfile	./config/config.c	/^uint8_t getCurrentProfile(void)$/;"	f
getFilter	./drivers/timer.c	/^static unsigned getFilter(unsigned ticks)$/;"	f	file:
getLedHsv	./drivers/light_ws2811strip.c	/^void getLedHsv(uint16_t index, hsvColor_t *color)$/;"	f
getRcStickDeflection	./io/rc_controls.c	/^int32_t getRcStickDeflection(int32_t axis, uint16_t midrc) {$/;"	f
get_D	./flight/navigation.c	/^static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)$/;"	f	file:
get_I	./flight/navigation.c	/^static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)$/;"	f	file:
get_P	./flight/navigation.c	/^static int32_t get_P(int32_t error, PID_PARAM *pid)$/;"	f	file:
get_up	./drivers/barometer.h	/^    baroOpFuncPtr get_up;$/;"	m	struct:baro_t
get_ut	./drivers/barometer.h	/^    baroOpFuncPtr get_ut;$/;"	m	struct:baro_t
gimbalConfig	./config/config_profile.h	/^    gimbalConfig_t gimbalConfig;$/;"	m	struct:profile_s
gimbalConfig	./flight/mixer.c	/^static gimbalConfig_t *gimbalConfig;$/;"	v	file:
gimbalConfig_s	./io/gimbal.h	/^typedef struct gimbalConfig_s {$/;"	s
gimbalConfig_t	./io/gimbal.h	/^} gimbalConfig_t;$/;"	t	typeref:struct:gimbalConfig_s
gimbal_flags	./io/gimbal.h	/^    uint8_t gimbal_flags;                   \/\/ in servotilt mode, various things that affect stuff$/;"	m	struct:gimbalConfig_s
globalFlags	./io/gps.c	/^    uint8_t globalFlags;        \/\/ Bitmask, Chip hardware generation 0:Antaris, 1:u-blox 5, 2:u-blox 6$/;"	m	struct:__anon89	file:
gpio	./drivers/bus_i2c_stm32f10x.c	/^    GPIO_TypeDef *gpio;$/;"	m	struct:i2cDevice_t	file:
gpio	./drivers/pwm_mapping.h	/^    GPIO_TypeDef *gpio;$/;"	m	struct:sonarGPIOConfig_s
gpio	./drivers/timer.h	/^    GPIO_TypeDef *gpio;$/;"	m	struct:__anon56
gpioAHBPeripherals	./drivers/accgyro_mpu6050.h	/^    uint32_t gpioAHBPeripherals;$/;"	m	struct:mpu6050Config_s
gpioAHBPeripherals	./drivers/compass_hmc5883l.h	/^    uint32_t gpioAHBPeripherals;$/;"	m	struct:hmc5883Config_s
gpioAPB2Peripherals	./drivers/accgyro_mpu6050.h	/^    uint32_t gpioAPB2Peripherals;$/;"	m	struct:mpu6050Config_s
gpioAPB2Peripherals	./drivers/barometer_bmp085.h	/^    uint32_t gpioAPB2Peripherals;$/;"	m	struct:bmp085Config_s
gpioAPB2Peripherals	./drivers/compass_hmc5883l.h	/^    uint32_t gpioAPB2Peripherals;$/;"	m	struct:hmc5883Config_s
gpioExtiLineConfig	./drivers/gpio_stm32f10x.c	/^void gpioExtiLineConfig(uint8_t portsrc, uint8_t pinsrc)$/;"	f
gpioExtiLineConfig	./drivers/gpio_stm32f30x.c	/^void gpioExtiLineConfig(uint8_t portsrc, uint8_t pinsrc)$/;"	f
gpioInit	./drivers/gpio_stm32f10x.c	/^void gpioInit(GPIO_TypeDef *gpio, gpio_config_t *config)$/;"	f
gpioInit	./drivers/gpio_stm32f30x.c	/^void gpioInit(GPIO_TypeDef *gpio, gpio_config_t *config)$/;"	f
gpioInputMode	./drivers/timer.h	/^    GPIO_Mode gpioInputMode;$/;"	m	struct:__anon56
gpioMode	./drivers/sound_beeper.h	/^    GPIO_Mode gpioMode;$/;"	m	struct:beeperConfig_s
gpioPeripheral	./drivers/sound_beeper.h	/^    uint32_t gpioPeripheral;$/;"	m	struct:beeperConfig_s
gpioPin	./drivers/accgyro_mpu6050.h	/^    uint16_t gpioPin;$/;"	m	struct:mpu6050Config_s
gpioPin	./drivers/compass_hmc5883l.h	/^    uint16_t gpioPin;$/;"	m	struct:hmc5883Config_s
gpioPin	./drivers/sound_beeper.h	/^    uint16_t gpioPin;$/;"	m	struct:beeperConfig_s
gpioPinRemapConfig	./drivers/gpio_stm32f10x.c	/^void gpioPinRemapConfig(uint32_t remap, bool enable)$/;"	f
gpioPinSource	./drivers/timer.h	/^    uint8_t gpioPinSource;             \/\/ TODO - this can be removed and pinSource calculated from pin$/;"	m	struct:__anon56
gpioPort	./drivers/accgyro_mpu6050.h	/^    GPIO_TypeDef *gpioPort;$/;"	m	struct:mpu6050Config_s
gpioPort	./drivers/compass_hmc5883l.h	/^    GPIO_TypeDef *gpioPort;$/;"	m	struct:hmc5883Config_s
gpioPort	./drivers/sound_beeper.h	/^    GPIO_TypeDef *gpioPort;$/;"	m	struct:beeperConfig_s
gpio_config_t	./drivers/gpio.h	/^} gpio_config_t;$/;"	t	typeref:struct:__anon49
gpsAutoBaud_e	./io/gps.h	/^} gpsAutoBaud_e;$/;"	t	typeref:enum:__anon65
gpsAutoConfig_e	./io/gps.h	/^} gpsAutoConfig_e;$/;"	t	typeref:enum:__anon64
gpsBaudRate_e	./io/gps.h	/^} gpsBaudRate_e;$/;"	t	typeref:enum:__anon63
gpsConfig	./config/config_master.h	/^    gpsConfig_t gpsConfig;$/;"	m	struct:master_t
gpsConfig	./io/gps.c	/^static gpsConfig_t *gpsConfig;$/;"	v	file:
gpsConfig_s	./io/gps.h	/^typedef struct gpsConfig_s {$/;"	s
gpsConfig_t	./io/gps.h	/^} gpsConfig_t;$/;"	t	typeref:struct:gpsConfig_s
gpsCoordinateDDDMMmmmm_s	./io/gps.h	/^typedef struct gpsCoordinateDDDMMmmmm_s {$/;"	s
gpsCoordinateDDDMMmmmm_t	./io/gps.h	/^} gpsCoordinateDDDMMmmmm_t;$/;"	t	typeref:struct:gpsCoordinateDDDMMmmmm_s
gpsData	./io/gps.c	/^gpsData_t gpsData;$/;"	v
gpsDataNmea_s	./io/gps.c	/^typedef struct gpsDataNmea_s {$/;"	s	file:
gpsDataNmea_t	./io/gps.c	/^} gpsDataNmea_t;$/;"	t	typeref:struct:gpsDataNmea_s	file:
gpsData_t	./io/gps.h	/^typedef struct gpsData_t {$/;"	s
gpsData_t	./io/gps.h	/^} gpsData_t;$/;"	t	typeref:struct:gpsData_t
gpsEnablePassthrough	./io/gps.c	/^void gpsEnablePassthrough(serialPort_t *gpsPassthroughPort)$/;"	f
gpsFixChar_e	./telemetry/hott.c	/^} gpsFixChar_e;$/;"	t	typeref:enum:__anon104	file:
gpsHistory	./blackbox/blackbox.c	/^static blackboxGpsState_t gpsHistory;$/;"	v	file:
gpsInit	./io/gps.c	/^void gpsInit(serialConfig_t *initialSerialConfig, gpsConfig_t *initialGpsConfig)$/;"	f
gpsInitData	./io/gps.c	/^static const gpsInitData_t gpsInitData[] = {$/;"	v	file:
gpsInitData_t	./io/gps.c	/^typedef struct gpsInitData_t {$/;"	s	file:
gpsInitData_t	./io/gps.c	/^} gpsInitData_t;$/;"	t	typeref:struct:gpsInitData_t	file:
gpsInitHardware	./io/gps.c	/^void gpsInitHardware(void)$/;"	f
gpsInitNmea	./io/gps.c	/^void gpsInitNmea(void)$/;"	f
gpsInitUblox	./io/gps.c	/^void gpsInitUblox(void)$/;"	f
gpsMessageState_e	./io/gps.h	/^} gpsMessageState_e;$/;"	t	typeref:enum:__anon66
gpsNewData	./io/gps.c	/^static void gpsNewData(uint16_t c)$/;"	f	file:
gpsNewFrame	./io/gps.c	/^bool gpsNewFrame(uint8_t c)$/;"	f
gpsNewFrameNMEA	./io/gps.c	/^static bool gpsNewFrameNMEA(char c)$/;"	f	file:
gpsNewFrameUBLOX	./io/gps.c	/^static bool gpsNewFrameUBLOX(uint8_t data)$/;"	f	file:
gpsNoFixLatitude	./telemetry/telemetry.h	/^    float gpsNoFixLatitude;   $/;"	m	struct:telemetryConfig_s
gpsNoFixLongitude	./telemetry/telemetry.h	/^    float gpsNoFixLongitude;  $/;"	m	struct:telemetryConfig_s
gpsPacketLog	./io/gps.c	/^char gpsPacketLog[GPS_PACKET_LOG_ENTRY_COUNT];$/;"	v
gpsPacketLogChar	./io/gps.c	/^static char *gpsPacketLogChar = gpsPacketLog;$/;"	v	file:
gpsPort	./io/gps.c	/^static serialPort_t *gpsPort;$/;"	v	file:
gpsProfile	./config/config_profile.h	/^    gpsProfile_t gpsProfile;$/;"	m	struct:profile_s
gpsProfile	./flight/navigation.c	/^static gpsProfile_t *gpsProfile;$/;"	v	file:
gpsProfile_s	./flight/navigation.h	/^typedef struct gpsProfile_s {$/;"	s
gpsProfile_t	./flight/navigation.h	/^} gpsProfile_t;$/;"	t	typeref:struct:gpsProfile_s
gpsProvider_e	./io/gps.h	/^} gpsProvider_e;$/;"	t	typeref:enum:__anon61
gpsSetState	./io/gps.c	/^static void gpsSetState(gpsState_e state)$/;"	f	file:
gpsState_e	./io/gps.c	/^} gpsState_e;$/;"	t	typeref:enum:__anon82	file:
gpsThread	./io/gps.c	/^void gpsThread(void)$/;"	f
gpsUsePIDs	./flight/navigation.c	/^void gpsUsePIDs(pidProfile_t *pidProfile)$/;"	f
gpsUseProfile	./flight/navigation.c	/^void gpsUseProfile(gpsProfile_t *gpsProfileToUse)$/;"	f
gps_baudrateIndex	./io/serial.h	/^    uint8_t gps_baudrateIndex;$/;"	m	struct:serialPortConfig_s
gps_fix_char	./telemetry/hott.h	/^  uint8_t gps_fix_char; \/\/#28 GPS fix character. display, 'D' = DGPS, '2' = 2D, '3' = 3D, '-' = no fix. Where appears this char???$/;"	m	struct:HOTT_GPS_MSG_s
gps_lpf	./flight/navigation.h	/^    uint8_t gps_lpf;                        \/\/ Low pass filter cut frequency for derivative calculation (default 20Hz)$/;"	m	struct:gpsProfile_s
gps_satelites	./telemetry/hott.h	/^  uint8_t gps_satelites;\/\/#27 sat count$/;"	m	struct:HOTT_GPS_MSG_s
gps_sensor_id	./telemetry/hott.h	/^    uint8_t gps_sensor_id;   \/\/#02 constant value 0x8c$/;"	m	struct:HOTT_AIRESC_MSG_s
gps_sensor_id	./telemetry/hott.h	/^  uint8_t gps_sensor_id; \/\/#02 constant value 0x8a$/;"	m	struct:HOTT_GPS_MSG_s
gps_speed_H	./telemetry/hott.h	/^  uint8_t gps_speed_H;   \/\/#09$/;"	m	struct:HOTT_GPS_MSG_s
gps_speed_L	./telemetry/hott.h	/^  uint8_t gps_speed_L;   \/\/08 km\/h$/;"	m	struct:HOTT_GPS_MSG_s
gps_time_h	./telemetry/hott.h	/^  uint8_t gps_time_h;    \/\/#33 UTC time hours$/;"	m	struct:HOTT_GPS_MSG_s
gps_time_m	./telemetry/hott.h	/^  uint8_t gps_time_m;    \/\/#34 UTC time minutes$/;"	m	struct:HOTT_GPS_MSG_s
gps_time_s	./telemetry/hott.h	/^  uint8_t gps_time_s;    \/\/#35 UTC time seconds$/;"	m	struct:HOTT_GPS_MSG_s
gps_time_sss	./telemetry/hott.h	/^  uint8_t gps_time_sss;  \/\/#36 UTC time milliseconds$/;"	m	struct:HOTT_GPS_MSG_s
gps_wp_radius	./flight/navigation.h	/^    uint16_t gps_wp_radius;                 \/\/ if we are within this distance to a waypoint then we consider it reached (distance is in cm)$/;"	m	struct:gpsProfile_s
grab_fields	./io/gps.c	/^static uint32_t grab_fields(char *src, uint8_t mult)$/;"	f	file:
ground_course	./io/gps.c	/^    uint16_t ground_course;$/;"	m	struct:gpsDataNmea_s	file:
gyro	./sensors/gyro.c	/^gyro_t gyro;                      \/\/ gyro access functions$/;"	v
gyroADC	./blackbox/blackbox.c	/^    int16_t gyroADC[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
gyroADC	./sensors/gyro.c	/^int16_t gyroADC[XYZ_AXIS_COUNT];$/;"	v
gyroAlign	./sensors/gyro.c	/^sensor_align_e gyroAlign = 0;$/;"	v
gyroConfig	./config/config_master.h	/^    gyroConfig_t gyroConfig;$/;"	m	struct:master_t
gyroConfig	./sensors/gyro.c	/^static gyroConfig_t *gyroConfig;$/;"	v	file:
gyroConfig_s	./sensors/gyro.h	/^typedef struct gyroConfig_s {$/;"	s
gyroConfig_t	./sensors/gyro.h	/^} gyroConfig_t;$/;"	t	typeref:struct:gyroConfig_s
gyroMovementCalibrationThreshold	./sensors/gyro.h	/^    uint8_t gyroMovementCalibrationThreshold; \/\/ people keep forgetting that moving model while init results in wrong gyro offsets. and then they never reset gyro. so this is now on by default.$/;"	m	struct:gyroConfig_s
gyroScaleRad	./flight/imu.c	/^float gyroScaleRad;$/;"	v
gyroSensor_e	./sensors/gyro.h	/^} gyroSensor_e;$/;"	t	typeref:enum:__anon124
gyroSetCalibrationCycles	./sensors/gyro.c	/^void gyroSetCalibrationCycles(uint16_t calibrationCyclesRequired)$/;"	f
gyroUpdate	./sensors/gyro.c	/^void gyroUpdate(void)$/;"	f
gyroZero	./sensors/gyro.c	/^int16_t gyroZero[FLIGHT_DYNAMICS_INDEX_COUNT] = { 0, 0, 0 };$/;"	v
gyro_align	./sensors/sensors.h	/^    sensor_align_e gyro_align;              \/\/ gyro alignment$/;"	m	struct:sensorAlignmentConfig_s
gyro_cmpf_factor	./config/config_master.h	/^    uint16_t gyro_cmpf_factor;              \/\/ Set the Gyro Weight for Gyro\/Acc complementary filter. Increasing this value would reduce and delay Acc influence on the output of the filter.$/;"	m	struct:master_t
gyro_cmpf_factor	./flight/imu.h	/^    float gyro_cmpf_factor;$/;"	m	struct:imuRuntimeConfig_s
gyro_cmpfm_factor	./config/config_master.h	/^    uint16_t gyro_cmpfm_factor;             \/\/ Set the Gyro Weight for Gyro\/Magnetometer complementary filter. Increasing this value would reduce and delay Magnetometer influence on the output of the filter$/;"	m	struct:master_t
gyro_cmpfm_factor	./flight/imu.h	/^    float gyro_cmpfm_factor;$/;"	m	struct:imuRuntimeConfig_s
gyro_cut_hz	./flight/pid.h	/^    uint8_t gyro_cut_hz;                    \/\/ Used for soft gyro filtering$/;"	m	struct:pidProfile_s
gyro_fsr_e	./drivers/accgyro_mpu6050.c	/^enum gyro_fsr_e {$/;"	g	file:
gyro_fsr_e	./drivers/accgyro_spi_mpu6500.c	/^enum gyro_fsr_e {$/;"	g	file:
gyro_lpf	./config/config_master.h	/^    uint16_t gyro_lpf;                      \/\/ gyro LPF setting - values are driver specific, in case of invalid number, a reasonable default ~30-40HZ is chosen.$/;"	m	struct:master_t
gyro_s	./drivers/accgyro.h	/^typedef struct gyro_s {$/;"	s
gyro_t	./drivers/accgyro.h	/^} gyro_t;$/;"	t	typeref:struct:gyro_s
h	./common/color.h	/^    uint16_t h; \/\/ 0 - 359$/;"	m	struct:hsvColor_s
handleBlackbox	./blackbox/blackbox.c	/^void handleBlackbox(void)$/;"	f
handleFrSkyTelemetry	./telemetry/frsky.c	/^void handleFrSkyTelemetry(rxConfig_t *rxConfig, uint16_t deadband3d_throttle)$/;"	f
handleHoTTTelemetry	./telemetry/hott.c	/^void handleHoTTTelemetry(void)$/;"	f
handleInflightCalibrationStickPosition	./mw.c	/^void handleInflightCalibrationStickPosition(void)$/;"	f
handleMSPTelemetry	./telemetry/msp.c	/^void handleMSPTelemetry(void)$/;"	f
handleOneshotFeatureChangeOnRestart	./config/config.c	/^void handleOneshotFeatureChangeOnRestart(void)$/;"	f
handlePageChange	./io/display.c	/^void handlePageChange(void)$/;"	f
handleSerial	./io/serial.c	/^void handleSerial(void)$/;"	f
handleSmartPortTelemetry	./telemetry/smartport.c	/^void handleSmartPortTelemetry(void)$/;"	f
handleUsartTxDma	./drivers/serial_uart_stm32f30x.c	/^static void handleUsartTxDma(uartPort_t *s)$/;"	f	file:
hardwareMaps	./drivers/pwm_mapping.c	/^static const uint16_t * const hardwareMaps[] = {$/;"	v	file:
hardwareRevision	./target/CJMCU/hardware_revision.c	/^uint8_t hardwareRevision = UNKNOWN;$/;"	v
hardwareRevision	./target/NAZE/hardware_revision.c	/^uint8_t hardwareRevision = UNKNOWN;$/;"	v
hardwareRevision	./target/SUPERBEE/hardware_revision.c	/^uint8_t hardwareRevision = UNKNOWN;$/;"	v
hardwareRevisionNames	./target/CJMCU/hardware_revision.c	/^static const char * const hardwareRevisionNames[] = {$/;"	v	file:
hardwareRevisionNames	./target/NAZE/hardware_revision.c	/^static const char * const hardwareRevisionNames[] = {$/;"	v	file:
hardwareRevisionNames	./target/SUPERBEE/hardware_revision.c	/^static const char * const hardwareRevisionNames[] = {$/;"	v	file:
hasEnoughTimeLapsedSinceLastTelemetryTransmission	./telemetry/frsky.c	/^bool hasEnoughTimeLapsedSinceLastTelemetryTransmission(uint32_t currentMillis)$/;"	f
havePidsBeenUpdatedByAutotune	./flight/autotune.c	/^bool havePidsBeenUpdatedByAutotune(void)$/;"	f
hcsr04_get_distance	./drivers/sonar_hcsr04.c	/^int32_t hcsr04_get_distance(void)$/;"	f
hcsr04_init	./drivers/sonar_hcsr04.c	/^void hcsr04_init(const sonarHardware_t *initialSonarHardware)$/;"	f
hcsr04_start_reading	./drivers/sonar_hcsr04.c	/^void hcsr04_start_reading(void)$/;"	f
headFreeModeHold	./mw.c	/^int16_t headFreeModeHold;$/;"	v
headSerialError	./io/serial_msp.c	/^static void headSerialError(uint8_t responseBodySize)$/;"	f	file:
headSerialReply	./io/serial_msp.c	/^static void headSerialReply(uint8_t responseBodySize)$/;"	f	file:
headSerialResponse	./io/serial_msp.c	/^static void headSerialResponse(uint8_t err, uint8_t responseBodySize)$/;"	f	file:
headerIndex	./blackbox/blackbox.c	/^    uint32_t headerIndex;$/;"	m	struct:__anon33	file:
headfreeModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t headfreeModeColors = {$/;"	v	file:
heading	./flight/pid.c	/^int16_t heading;$/;"	v
heading_2d	./io/gps.c	/^    int32_t heading_2d;$/;"	m	struct:__anon87	file:
heading_accuracy	./io/gps.c	/^    uint32_t heading_accuracy;$/;"	m	struct:__anon87	file:
highestXValueForWest	./io/ledstrip.c	/^uint8_t highestXValueForWest;$/;"	v
highestYValueForNorth	./io/ledstrip.c	/^uint8_t highestYValueForNorth;$/;"	v
hmc5883Config	./drivers/compass_hmc5883l.c	/^static const hmc5883Config_t *hmc5883Config = NULL;$/;"	v	file:
hmc5883Config_s	./drivers/compass_hmc5883l.h	/^typedef struct hmc5883Config_s {$/;"	s
hmc5883Config_t	./drivers/compass_hmc5883l.h	/^} hmc5883Config_t;$/;"	t	typeref:struct:hmc5883Config_s
hmc5883lConfigureDataReadyInterruptHandling	./drivers/compass_hmc5883l.c	/^static void hmc5883lConfigureDataReadyInterruptHandling(void)$/;"	f	file:
hmc5883lDetect	./drivers/compass_hmc5883l.c	/^bool hmc5883lDetect(mag_t* mag, const hmc5883Config_t *hmc5883ConfigToUse)$/;"	f
hmc5883lInit	./drivers/compass_hmc5883l.c	/^void hmc5883lInit(void)$/;"	f
hmc5883lRead	./drivers/compass_hmc5883l.c	/^void hmc5883lRead(int16_t *magData)$/;"	f
home_direction	./telemetry/hott.h	/^  uint8_t home_direction;\/\/#29 direction from starting point to Model position (2 degree steps)$/;"	m	struct:HOTT_GPS_MSG_s
home_distance_H	./telemetry/hott.h	/^  uint8_t home_distance_H;  \/\/#21$/;"	m	struct:HOTT_GPS_MSG_s
home_distance_L	./telemetry/hott.h	/^  uint8_t home_distance_L;  \/\/#20 meters$/;"	m	struct:HOTT_GPS_MSG_s
horizonModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t horizonModeColors = {$/;"	v	file:
horizontal_accuracy	./io/gps.c	/^    uint32_t horizontal_accuracy;$/;"	m	struct:__anon84	file:
hottAlarmSoundInterval	./telemetry/telemetry.h	/^    uint8_t hottAlarmSoundInterval;$/;"	m	struct:telemetryConfig_s
hottCheckSerialData	./telemetry/hott.c	/^static void hottCheckSerialData(uint32_t currentMicros)$/;"	f	file:
hottEAMMessage	./telemetry/hott.c	/^static HOTT_EAM_MSG_t hottEAMMessage;$/;"	v	file:
hottEAMUpdateBattery	./telemetry/hott.c	/^static inline void hottEAMUpdateBattery(HOTT_EAM_MSG_t *hottEAMMessage)$/;"	f	file:
hottEAMUpdateBatteryDrawnCapacity	./telemetry/hott.c	/^static inline void hottEAMUpdateBatteryDrawnCapacity(HOTT_EAM_MSG_t *hottEAMMessage)$/;"	f	file:
hottEAMUpdateCurrentMeter	./telemetry/hott.c	/^static inline void hottEAMUpdateCurrentMeter(HOTT_EAM_MSG_t *hottEAMMessage)$/;"	f	file:
hottEamAlarm1Flag_e	./telemetry/hott.h	/^} hottEamAlarm1Flag_e;$/;"	t	typeref:enum:__anon107
hottEamAlarm2Flag_e	./telemetry/hott.h	/^} hottEamAlarm2Flag_e;$/;"	t	typeref:enum:__anon108
hottGPSMessage	./telemetry/hott.c	/^static HOTT_GPS_MSG_t hottGPSMessage;$/;"	v	file:
hottIsSending	./telemetry/hott.c	/^static bool hottIsSending = false;$/;"	v	file:
hottMsg	./telemetry/hott.c	/^static uint8_t *hottMsg = NULL;$/;"	v	file:
hottMsgCrc	./telemetry/hott.c	/^static uint8_t hottMsgCrc;$/;"	v	file:
hottMsgRemainingBytesToSendCount	./telemetry/hott.c	/^static uint8_t hottMsgRemainingBytesToSendCount;$/;"	v	file:
hottPort	./telemetry/hott.c	/^static serialPort_t *hottPort = NULL;$/;"	v	file:
hottPortSharing	./telemetry/hott.c	/^static portSharing_e hottPortSharing;$/;"	v	file:
hottPrepareEAMResponse	./telemetry/hott.c	/^void hottPrepareEAMResponse(HOTT_EAM_MSG_t *hottEAMMessage)$/;"	f
hottPrepareGPSResponse	./telemetry/hott.c	/^void hottPrepareGPSResponse(HOTT_GPS_MSG_t *hottGPSMessage)$/;"	f
hottPrepareMessages	./telemetry/hott.c	/^static void hottPrepareMessages(void) {$/;"	f	file:
hottSendEAMResponse	./telemetry/hott.c	/^static inline void hottSendEAMResponse(void)$/;"	f	file:
hottSendGPSResponse	./telemetry/hott.c	/^static inline void hottSendGPSResponse(void)$/;"	f	file:
hottSendResponse	./telemetry/hott.c	/^static void hottSendResponse(uint8_t *buffer, int length)$/;"	f	file:
hottSendTelemetryData	./telemetry/hott.c	/^static void hottSendTelemetryData(void) {$/;"	f	file:
hottSerialWrite	./telemetry/hott.c	/^static void hottSerialWrite(uint8_t c)$/;"	f	file:
hottTelemetryEnabled	./telemetry/hott.c	/^static bool hottTelemetryEnabled =  false;$/;"	v	file:
hse_value	./target/ALIENWIIF3/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hse_value	./target/CHEBUZZF3/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hse_value	./target/NAZE32PRO/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hse_value	./target/SPARKY/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hse_value	./target/SPRACINGF3/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hse_value	./target/STM32F3DISCOVERY/system_stm32f30x.c	/^uint32_t hse_value = HSE_VALUE;$/;"	v
hsvColorComponent_e	./common/color.h	/^} hsvColorComponent_e;$/;"	t	typeref:enum:__anon32
hsvColor_s	./common/color.h	/^typedef struct hsvColor_s {$/;"	s
hsvColor_t	./common/color.h	/^} hsvColor_t;$/;"	t	typeref:struct:hsvColor_s
hsvToRgb24	./common/colorconversion.c	/^rgbColor24bpp_t* hsvToRgb24(const hsvColor_t* c)$/;"	f
hsv_black	./io/ledstrip.c	/^const hsvColor_t hsv_black       = LED_BLACK;$/;"	v
hsv_blue	./io/ledstrip.c	/^const hsvColor_t hsv_blue        = LED_BLUE;$/;"	v
hsv_cyan	./io/ledstrip.c	/^const hsvColor_t hsv_cyan        = LED_CYAN;$/;"	v
hsv_darkViolet	./io/ledstrip.c	/^const hsvColor_t hsv_darkViolet  = LED_DARK_VIOLET;$/;"	v
hsv_deepPink	./io/ledstrip.c	/^const hsvColor_t hsv_deepPink    = LED_DEEP_PINK;$/;"	v
hsv_green	./io/ledstrip.c	/^const hsvColor_t hsv_green       = LED_GREEN;$/;"	v
hsv_lightBlue	./io/ledstrip.c	/^const hsvColor_t hsv_lightBlue   = LED_LIGHT_BLUE;$/;"	v
hsv_limeGreen	./io/ledstrip.c	/^const hsvColor_t hsv_limeGreen   = LED_LIME_GREEN;$/;"	v
hsv_magenta	./io/ledstrip.c	/^const hsvColor_t hsv_magenta     = LED_MAGENTA;$/;"	v
hsv_mintGreen	./io/ledstrip.c	/^const hsvColor_t hsv_mintGreen   = LED_MINT_GREEN;$/;"	v
hsv_orange	./io/ledstrip.c	/^const hsvColor_t hsv_orange      = LED_ORANGE;$/;"	v
hsv_red	./io/ledstrip.c	/^const hsvColor_t hsv_red         = LED_RED;$/;"	v
hsv_white	./io/ledstrip.c	/^const hsvColor_t hsv_white       = LED_WHITE;$/;"	v
hsv_yellow	./io/ledstrip.c	/^const hsvColor_t hsv_yellow      = LED_YELLOW;$/;"	v
i	./blackbox/blackbox_fielddefs.h	/^    uint8_t i;$/;"	m	struct:flightLogEvent_autotuneCycleResult_t
i	./blackbox/blackbox_fielddefs.h	/^    uint8_t i;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
i	./flight/autotune.c	/^    float i;$/;"	m	struct:fp_pid	file:
i2a	./common/typeconversion.c	/^void i2a(int num, char *bf)$/;"	f
i2c1ErrorCount	./drivers/bus_i2c_stm32f30x.c	/^static volatile uint16_t i2c1ErrorCount = 0;$/;"	v	file:
i2c2ErrorCount	./drivers/bus_i2c_stm32f30x.c	/^static volatile uint16_t i2c2ErrorCount = 0;$/;"	v	file:
i2cDevice_t	./drivers/bus_i2c_stm32f10x.c	/^typedef struct i2cDevice_t {$/;"	s	file:
i2cDevice_t	./drivers/bus_i2c_stm32f10x.c	/^} i2cDevice_t;$/;"	t	typeref:struct:i2cDevice_t	file:
i2cErrorCount	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint16_t i2cErrorCount = 0;$/;"	v	file:
i2cGetErrorCounter	./drivers/bus_i2c_soft.c	/^uint16_t i2cGetErrorCounter(void)$/;"	f
i2cGetErrorCounter	./drivers/bus_i2c_stm32f10x.c	/^uint16_t i2cGetErrorCounter(void)$/;"	f
i2cGetErrorCounter	./drivers/bus_i2c_stm32f30x.c	/^uint16_t i2cGetErrorCounter(void)$/;"	f
i2cHandleHardwareFailure	./drivers/bus_i2c_stm32f10x.c	/^static bool i2cHandleHardwareFailure(void)$/;"	f	file:
i2cHardwareMap	./drivers/bus_i2c_stm32f10x.c	/^static const i2cDevice_t i2cHardwareMap[] = {$/;"	v	file:
i2cInit	./drivers/bus_i2c_soft.c	/^void i2cInit(I2C_TypeDef * I2C)$/;"	f
i2cInit	./drivers/bus_i2c_stm32f10x.c	/^void i2cInit(I2CDevice index)$/;"	f
i2cInit	./drivers/bus_i2c_stm32f30x.c	/^void i2cInit(I2CDevice index)$/;"	f
i2cInitPort	./drivers/bus_i2c_stm32f30x.c	/^void i2cInitPort(I2C_TypeDef *I2Cx)$/;"	f
i2cRead	./drivers/bus_i2c_soft.c	/^bool i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)$/;"	f
i2cRead	./drivers/bus_i2c_stm32f10x.c	/^bool i2cRead(uint8_t addr_, uint8_t reg_, uint8_t len, uint8_t* buf)$/;"	f
i2cRead	./drivers/bus_i2c_stm32f30x.c	/^bool i2cRead(uint8_t addr_, uint8_t reg, uint8_t len, uint8_t* buf)$/;"	f
i2cTimeout	./drivers/bus_i2c_stm32f30x.c	/^static uint32_t i2cTimeout;$/;"	v	file:
i2cTimeoutUserCallback	./drivers/bus_i2c_stm32f30x.c	/^uint32_t i2cTimeoutUserCallback(I2C_TypeDef *I2Cx)$/;"	f
i2cUnstick	./drivers/bus_i2c_stm32f10x.c	/^static void i2cUnstick(void)$/;"	f	file:
i2cWrite	./drivers/bus_i2c_soft.c	/^bool i2cWrite(uint8_t addr, uint8_t reg, uint8_t data)$/;"	f
i2cWrite	./drivers/bus_i2c_stm32f10x.c	/^bool i2cWrite(uint8_t addr_, uint8_t reg_, uint8_t data)$/;"	f
i2cWrite	./drivers/bus_i2c_stm32f30x.c	/^bool i2cWrite(uint8_t addr_, uint8_t reg, uint8_t data)$/;"	f
i2cWriteBuffer	./drivers/bus_i2c_soft.c	/^bool i2cWriteBuffer(uint8_t addr, uint8_t reg, uint8_t len, uint8_t * data)$/;"	f
i2cWriteBuffer	./drivers/bus_i2c_stm32f10x.c	/^bool i2cWriteBuffer(uint8_t addr_, uint8_t reg_, uint8_t len_, uint8_t *data)$/;"	f
i2c_OLED_clear_display	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_clear_display(void)$/;"	f
i2c_OLED_clear_display_quick	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_clear_display_quick(void)$/;"	f
i2c_OLED_send_byte	./drivers/display_ug2864hsweg01.c	/^static bool i2c_OLED_send_byte(uint8_t val)$/;"	f	file:
i2c_OLED_send_char	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_send_char(unsigned char ascii)$/;"	f
i2c_OLED_send_cmd	./drivers/display_ug2864hsweg01.c	/^static bool i2c_OLED_send_cmd(uint8_t command)$/;"	f	file:
i2c_OLED_send_string	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_send_string(const char *string)$/;"	f
i2c_OLED_set_line	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_set_line(uint8_t row)$/;"	f
i2c_OLED_set_xy	./drivers/display_ug2864hsweg01.c	/^void i2c_OLED_set_xy(uint8_t col, uint8_t row)$/;"	f
i2c_er_handler	./drivers/bus_i2c_stm32f10x.c	/^static void i2c_er_handler(void)$/;"	f	file:
i2c_ev_handler	./drivers/bus_i2c_stm32f10x.c	/^void i2c_ev_handler(void)$/;"	f
identifier	./drivers/serial.h	/^    uint8_t identifier;$/;"	m	struct:serialPort
identifier	./io/serial.h	/^    serialPortIdentifier_e identifier;$/;"	m	struct:serialPortConfig_s
identifier	./io/serial.h	/^    serialPortIdentifier_e identifier;$/;"	m	struct:serialPortUsage_s
idlePulse	./drivers/pwm_mapping.h	/^    uint16_t idlePulse;  \/\/ PWM value to use when initializing the driver. set this to either PULSE_1MS (regular pwm),$/;"	m	struct:drv_pwm_config_t
imuCalculateAcceleration	./flight/imu.c	/^void imuCalculateAcceleration(uint32_t deltaT)$/;"	f
imuCalculateEstimatedAttitude	./flight/imu.c	/^static void imuCalculateEstimatedAttitude(void)$/;"	f	file:
imuCalculateHeading	./flight/imu.c	/^int16_t imuCalculateHeading(t_fp_vector *vec)$/;"	f
imuConfigure	./flight/imu.c	/^void imuConfigure($/;"	f
imuInit	./flight/imu.c	/^void imuInit()$/;"	f
imuResetAccelerationSum	./flight/imu.c	/^void imuResetAccelerationSum(void)$/;"	f
imuRuntimeConfig	./flight/imu.c	/^static imuRuntimeConfig_t *imuRuntimeConfig;$/;"	v	file:
imuRuntimeConfig_s	./flight/imu.h	/^typedef struct imuRuntimeConfig_s {$/;"	s
imuRuntimeConfig_t	./flight/imu.h	/^} imuRuntimeConfig_t;$/;"	t	typeref:struct:imuRuntimeConfig_s
imuUpdate	./flight/imu.c	/^void imuUpdate(rollAndPitchTrims_t *accelerometerTrims)$/;"	f
inBuf	./io/serial_msp.c	/^    uint8_t inBuf[INBUF_SIZE];$/;"	m	struct:mspPort_s	file:
inclination	./flight/imu.c	/^rollAndPitchInclination_t inclination = { { 0, 0 } };     \/\/ absolute angle inclination in multiple of 0.1 degree    180 deg = 1800$/;"	v
indRX	./io/serial_msp.c	/^    uint8_t indRX;$/;"	m	struct:mspPort_s	file:
index	./io/gps.c	/^    uint8_t index;$/;"	m	struct:gpsInitData_t	file:
init	./drivers/accgyro.h	/^    sensorInitFuncPtr init;                                 \/\/ initialize function$/;"	m	struct:acc_s
init	./drivers/accgyro.h	/^    sensorInitFuncPtr init;                                 \/\/ initialize function$/;"	m	struct:gyro_s
init	./drivers/compass.h	/^    sensorInitFuncPtr init;                                 \/\/ initialize function$/;"	m	struct:mag_s
init	./flight/lowpass.h	/^    bool init;$/;"	m	struct:lowpass_t
init	./main.c	/^void init(void)$/;"	f
initBeeperHardware	./drivers/sound_beeper_stm32f10x.c	/^void initBeeperHardware(beeperConfig_t *config)$/;"	f
initBeeperHardware	./drivers/sound_beeper_stm32f30x.c	/^void initBeeperHardware(beeperConfig_t *config)$/;"	f
initBlackbox	./blackbox/blackbox.c	/^void initBlackbox(void)$/;"	f
initBoardAlignment	./sensors/boardalignment.c	/^void initBoardAlignment(boardAlignment_t *boardAlignment)$/;"	f
initEEPROM	./config/config.c	/^void initEEPROM(void)$/;"	f
initFrSkyTelemetry	./telemetry/frsky.c	/^void initFrSkyTelemetry(telemetryConfig_t *initialTelemetryConfig)$/;"	f
initHoTTTelemetry	./telemetry/hott.c	/^void initHoTTTelemetry(telemetryConfig_t *initialTelemetryConfig)$/;"	f
initInverter	./drivers/inverter.c	/^void initInverter(void)$/;"	f
initLeds	./drivers/light_led.c	/^initLeds(void)$/;"	f
initMSPTelemetry	./telemetry/msp.c	/^void initMSPTelemetry(telemetryConfig_t *initialTelemetryConfig)$/;"	f
initSmartPortTelemetry	./telemetry/smartport.c	/^void initSmartPortTelemetry(telemetryConfig_t *initialTelemetryConfig)$/;"	f
initSpi1	./drivers/bus_spi.c	/^void initSpi1(void)$/;"	f
initSpi2	./drivers/bus_spi.c	/^void initSpi2(void)$/;"	f
init_printf	./common/printf.c	/^void init_printf(void *putp, void (*putf) (void *, char))$/;"	f
initialThrottleHold	./flight/altitudehold.c	/^static int16_t initialThrottleHold;$/;"	v	file:
initialiseEAMMessage	./telemetry/hott.c	/^static void initialiseEAMMessage(HOTT_EAM_MSG_t *msg, size_t size)$/;"	f	file:
initialiseGPSMessage	./telemetry/hott.c	/^static void initialiseGPSMessage(HOTT_GPS_MSG_t *msg, size_t size)$/;"	f	file:
initialiseMessages	./telemetry/hott.c	/^static void initialiseMessages(void)$/;"	f	file:
inputFilteringMode	./config/config_master.h	/^    inputFilteringMode_e inputFilteringMode;  \/\/ Use hardware input filtering, e.g. for OrangeRX PPM\/PWM receivers.$/;"	m	struct:master_t
inputFilteringMode	./drivers/pwm_rx.c	/^static inputFilteringMode_e inputFilteringMode;$/;"	v	file:
inputFilteringMode_e	./drivers/pwm_rx.h	/^} inputFilteringMode_e;$/;"	t	typeref:enum:__anon41
input_bias	./flight/lowpass.h	/^    int32_t input_bias;$/;"	m	struct:lowpass_t
input_shift	./flight/lowpass.h	/^    int16_t input_shift;$/;"	m	struct:lowpass_t
input_v_H	./telemetry/hott.h	/^    uint8_t input_v_H;      \/\/#08$/;"	m	struct:HOTT_AIRESC_MSG_s
input_v_L	./telemetry/hott.h	/^    uint8_t input_v_L;      \/\/#07 Input voltage low byte$/;"	m	struct:HOTT_AIRESC_MSG_s
input_v_min_H	./telemetry/hott.h	/^    uint8_t input_v_min_H;  \/\/#10$/;"	m	struct:HOTT_AIRESC_MSG_s
input_v_min_L	./telemetry/hott.h	/^    uint8_t input_v_min_L;  \/\/#09 Input min. voltage low byte$/;"	m	struct:HOTT_AIRESC_MSG_s
int16_flightDynamicsTrims_s	./sensors/sensors.h	/^typedef struct int16_flightDynamicsTrims_s {$/;"	s
int_float_value_t	./io/serial_cli.c	/^} int_float_value_t;$/;"	t	typeref:union:__anon101	file:
int_value	./io/serial_cli.c	/^    int32_t int_value;$/;"	m	union:__anon101	file:
integrator	./flight/navigation.c	/^    float integrator;          \/\/ integrator value$/;"	m	struct:__anon6	file:
internalRxBuffer	./drivers/serial_softserial.c	/^    uint16_t         internalRxBuffer;  \/\/ includes start and stop bits$/;"	m	struct:softSerial_s	file:
internalTxBuffer	./drivers/serial_softserial.c	/^    uint16_t         internalTxBuffer;  \/\/ includes start and stop bits$/;"	m	struct:softSerial_s	file:
irq	./drivers/timer.h	/^    uint8_t irq;$/;"	m	struct:__anon56
isAccelerationCalibrationComplete	./sensors/acceleration.c	/^bool isAccelerationCalibrationComplete(void)$/;"	f
isAutotuneIdle	./flight/autotune.c	/^bool isAutotuneIdle(void)$/;"	f
isBaroCalibrationComplete	./sensors/barometer.c	/^bool isBaroCalibrationComplete(void)$/;"	f
isBaroReady	./sensors/barometer.c	/^bool isBaroReady(void) {$/;"	f
isBlackboxDeviceFull	./blackbox/blackbox_io.c	/^bool isBlackboxDeviceFull(void)$/;"	f
isBoardAlignmentStandard	./sensors/boardalignment.c	/^static bool isBoardAlignmentStandard(boardAlignment_t *boardAlignment)$/;"	f	file:
isCalibrating	./mw.c	/^bool isCalibrating()$/;"	f
isConversionComplete	./drivers/barometer_bmp085.c	/^static bool isConversionComplete = false;$/;"	v	file:
isEEPROMContentValid	./config/config.c	/^static bool isEEPROMContentValid(void)$/;"	f	file:
isEmpty	./io/serial_cli.c	/^static bool isEmpty(const char *string)$/;"	f	file:
isGyroCalibrationComplete	./sensors/gyro.c	/^bool isGyroCalibrationComplete(void)$/;"	f
isInverted	./drivers/sound_beeper.h	/^    bool isInverted;$/;"	m	struct:beeperConfig_s
isMPUSoftReset	./drivers/system_stm32f10x.c	/^bool isMPUSoftReset(void)$/;"	f
isMPUSoftReset	./drivers/system_stm32f30x.c	/^bool isMPUSoftReset(void)$/;"	f
isMixerUsingServos	./flight/mixer.c	/^bool isMixerUsingServos(void)$/;"	f
isMocapAltReady	./sensors/mocap.c	/^bool isMocapAltReady(void) {$/;"	f
isOnFinalAccelerationCalibrationCycle	./sensors/acceleration.c	/^bool isOnFinalAccelerationCalibrationCycle(void)$/;"	f
isOnFinalGyroCalibrationCycle	./sensors/gyro.c	/^bool isOnFinalGyroCalibrationCycle(void)$/;"	f
isOnFirstAccelerationCalibrationCycle	./sensors/acceleration.c	/^bool isOnFirstAccelerationCalibrationCycle(void)$/;"	f
isOnFirstGyroCalibrationCycle	./sensors/gyro.c	/^bool isOnFirstGyroCalibrationCycle(void)$/;"	f
isPPMDataBeingReceived	./drivers/pwm_rx.c	/^bool isPPMDataBeingReceived(void)$/;"	f
isRangeActive	./io/rc_controls.c	/^bool isRangeActive(uint8_t auxChannelIndex, channelRange_t *range) {$/;"	f
isRebootScheduled	./io/serial_msp.c	/^static bool isRebootScheduled = false;$/;"	v	file:
isRxDataDriven	./rx/rx.c	/^static bool isRxDataDriven(void) {$/;"	f	file:
isSearchingForStartBit	./drivers/serial_softserial.c	/^    uint8_t          isSearchingForStartBit;$/;"	m	struct:softSerial_s	file:
isSerialConfigValid	./io/serial.c	/^bool isSerialConfigValid(serialConfig_t *serialConfigToCheck)$/;"	f
isSerialPortShared	./io/serial.c	/^bool isSerialPortShared(serialPortConfig_t *portConfig, uint16_t functionMask, serialPortFunction_e sharedWithFunction)$/;"	f
isSerialTransmitBufferEmpty	./drivers/serial.c	/^bool isSerialTransmitBufferEmpty(serialPort_t *instance)$/;"	f
isSerialTransmitBufferEmpty	./drivers/serial.h	/^    bool (*isSerialTransmitBufferEmpty)(serialPort_t *instance);$/;"	m	struct:serialPortVTable
isSigned	./blackbox/blackbox.c	/^    uint8_t isSigned;$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
isSigned	./blackbox/blackbox.c	/^    uint8_t isSigned;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
isSigned	./blackbox/blackbox.c	/^    uint8_t isSigned;$/;"	m	struct:blackboxSimpleFieldDefinition_t	file:
isSmartPortTimedOut	./telemetry/smartport.c	/^bool isSmartPortTimedOut(void)$/;"	f
isSoftSerialTransmitBufferEmpty	./drivers/serial_softserial.c	/^bool isSoftSerialTransmitBufferEmpty(serialPort_t *instance)$/;"	f
isThrustFacingDownwards	./flight/altitudehold.c	/^bool isThrustFacingDownwards(rollAndPitchInclination_t *inclination)$/;"	f
isTimerPeriodTooLarge	./drivers/serial_softserial.c	/^static bool isTimerPeriodTooLarge(uint32_t timerPeriod)$/;"	f	file:
isTransmittingData	./drivers/serial_softserial.c	/^    uint8_t          isTransmittingData;$/;"	m	struct:softSerial_s	file:
isUartTransmitBufferEmpty	./drivers/serial_uart.c	/^bool isUartTransmitBufferEmpty(serialPort_t *instance)$/;"	f
isUsbVcpTransmitBufferEmpty	./drivers/serial_usb_vcp.c	/^bool isUsbVcpTransmitBufferEmpty(serialPort_t *instance)$/;"	f
isUsingSticksForArming	./io/rc_controls.c	/^bool isUsingSticksForArming(void)$/;"	f
isUsingSticksToArm	./io/rc_controls.c	/^static bool isUsingSticksToArm = true;$/;"	v	file:
isWS2811LedStripReady	./drivers/light_ws2811strip.c	/^bool isWS2811LedStripReady(void)$/;"	f
itoa	./common/typeconversion.c	/^char *itoa(int i, char *a, int base)$/;"	f
kD	./flight/navigation.c	/^    float kD;$/;"	m	struct:__anon5	file:
kI	./flight/navigation.c	/^    float kI;$/;"	m	struct:__anon5	file:
kP	./flight/navigation.c	/^    float kP;$/;"	m	struct:__anon5	file:
l3g4200dDetect	./drivers/accgyro_l3g4200d.c	/^bool l3g4200dDetect(gyro_t *gyro, uint16_t lpf)$/;"	f
l3g4200dInit	./drivers/accgyro_l3g4200d.c	/^static void l3g4200dInit(void)$/;"	f	file:
l3g4200dRead	./drivers/accgyro_l3g4200d.c	/^static void l3g4200dRead(int16_t *gyroADC)$/;"	f	file:
l3gd20Detect	./drivers/accgyro_l3gd20.c	/^bool l3gd20Detect(gyro_t *gyro, uint16_t lpf)$/;"	f
l3gd20GyroInit	./drivers/accgyro_l3gd20.c	/^void l3gd20GyroInit(void)$/;"	f
l3gd20GyroRead	./drivers/accgyro_l3gd20.c	/^static void l3gd20GyroRead(int16_t *gyroADC)$/;"	f	file:
l3gd20SpiInit	./drivers/accgyro_l3gd20.c	/^static void l3gd20SpiInit(SPI_TypeDef *SPIx)$/;"	f	file:
largeCounter	./drivers/pwm_rx.c	/^    uint32_t largeCounter;$/;"	m	struct:ppmDevice	file:
lastCycleTime	./telemetry/frsky.c	/^static uint32_t lastCycleTime = 0;$/;"	v	file:
lastHoTTRequestCheckAt	./telemetry/hott.c	/^static uint32_t lastHoTTRequestCheckAt = 0;$/;"	v	file:
lastHottAlarmSoundTime	./telemetry/hott.c	/^static uint32_t lastHottAlarmSoundTime = 0;$/;"	v	file:
lastIndex	./io/serial.c	/^    uint8_t lastIndex;$/;"	m	struct:findSerialPortConfigState_s	file:
lastIndex	./io/serial.c	/^    uint8_t lastIndex;$/;"	m	struct:findSharedSerialPortState_s	file:
lastLastMessage	./io/gps.h	/^    uint32_t lastLastMessage;       \/\/ last-last valid GPS message. Used to calculate delta.$/;"	m	struct:gpsData_t
lastMeasurementAt	./drivers/sonar_hcsr04.c	/^static uint32_t lastMeasurementAt;$/;"	v	file:
lastMessage	./io/gps.h	/^    uint32_t lastMessage;           \/\/ last time valid GPS data was received (millis)$/;"	m	struct:gpsData_t
lastMessagesPreparedAt	./telemetry/hott.c	/^static uint32_t lastMessagesPreparedAt = 0;$/;"	v	file:
lastPPMFrameCount	./drivers/pwm_rx.c	/^static uint8_t lastPPMFrameCount = 0;$/;"	v	file:
last_derivative	./flight/navigation.c	/^    float last_derivative;     \/\/ last derivative for low-pass filter$/;"	m	struct:__anon6	file:
last_input	./flight/navigation.c	/^    int32_t last_input;        \/\/ last input for derivative$/;"	m	struct:__anon6	file:
last_velocity	./flight/navigation.c	/^    int16_t last_velocity;$/;"	m	struct:__anon4	file:
latchActiveFeatures	./config/config.c	/^void latchActiveFeatures()$/;"	f
latitude	./io/gps.c	/^    int32_t latitude;$/;"	m	struct:__anon84	file:
latitude	./io/gps.c	/^    int32_t latitude;$/;"	m	struct:gpsDataNmea_s	file:
ledColorBuffer	./drivers/light_ws2811strip.c	/^static hsvColor_t ledColorBuffer[WS2811_LED_STRIP_LENGTH];$/;"	v	file:
ledConfig_s	./io/ledstrip.h	/^typedef struct ledConfig_s {$/;"	s
ledConfig_t	./io/ledstrip.h	/^} ledConfig_t;$/;"	t	typeref:struct:ledConfig_s
ledConfigs	./config/config_master.h	/^    ledConfig_t ledConfigs[MAX_LED_STRIP_LENGTH];$/;"	m	struct:master_t
ledConfigs	./io/ledstrip.c	/^ledConfig_t *ledConfigs;$/;"	v
ledCount	./io/ledstrip.c	/^uint8_t ledCount;$/;"	v
ledFlag_e	./io/ledstrip.h	/^} ledFlag_e;$/;"	t	typeref:enum:__anon68
ledGridHeight	./io/ledstrip.c	/^uint8_t ledGridHeight;$/;"	v
ledGridWidth	./io/ledstrip.c	/^uint8_t ledGridWidth;$/;"	v
ledIndex	./drivers/light_ws2811strip.c	/^static int16_t ledIndex;$/;"	v	file:
ledInit	./drivers/light_led_stm32f10x.c	/^void ledInit(void)$/;"	f
ledInit	./drivers/light_led_stm32f30x.c	/^void ledInit(void)$/;"	f
ledStripDMABuffer	./drivers/light_ws2811strip.c	/^uint8_t ledStripDMABuffer[WS2811_DMA_BUFFER_SIZE];$/;"	v
ledStripDisable	./io/ledstrip.c	/^static void ledStripDisable(void)$/;"	f	file:
ledStripEnable	./io/ledstrip.c	/^void ledStripEnable(void)$/;"	f
ledStripEnabled	./io/ledstrip.c	/^static bool ledStripEnabled = true;$/;"	v	file:
ledStripInit	./io/ledstrip.c	/^void ledStripInit(ledConfig_t *ledConfigsToUse, hsvColor_t *colorsToUse)$/;"	f
ledStripInitialised	./io/ledstrip.c	/^static bool ledStripInitialised = false;$/;"	v	file:
ledsInRingCount	./io/ledstrip.c	/^uint8_t ledsInRingCount;$/;"	v
length	./io/gps.c	/^    uint16_t length;$/;"	m	struct:__anon83	file:
li2a	./common/typeconversion.c	/^void li2a(long num, char *bf)$/;"	f
lineBuffer	./io/display.c	/^static char lineBuffer[SCREEN_CHARACTER_COLUMN_COUNT + 1];$/;"	v	file:
linecoding	./vcp/usb_prop.c	/^LINE_CODING linecoding = { 115200, \/* baud rate*\/$/;"	v
loadMainState	./blackbox/blackbox.c	/^static void loadMainState(void)$/;"	f	file:
loadSlowState	./blackbox/blackbox.c	/^static void loadSlowState(blackboxSlowState_t *slow)$/;"	f	file:
longitude	./io/gps.c	/^    int32_t longitude;$/;"	m	struct:__anon84	file:
longitude	./io/gps.c	/^    int32_t longitude;$/;"	m	struct:gpsDataNmea_s	file:
lookupBaudRateIndex	./io/serial.c	/^baudRate_e lookupBaudRateIndex(uint32_t baudRate)$/;"	f
lookupChannelIndex	./drivers/timer.c	/^static inline uint8_t lookupChannelIndex(const uint16_t channel)$/;"	f	file:
lookupPitchRollRC	./io/rc_curves.c	/^int16_t lookupPitchRollRC[PITCH_LOOKUP_LENGTH];     \/\/ lookup table for expo & RC rate PITCH+ROLL$/;"	v
lookupThrottleRC	./io/rc_curves.c	/^int16_t lookupThrottleRC[THROTTLE_LOOKUP_LENGTH];   \/\/ lookup table for expo & mid THROTTLE$/;"	v
lookupTimerIndex	./drivers/timer.c	/^static uint8_t lookupTimerIndex(const TIM_TypeDef *tim)$/;"	f	file:
lookupYawRC	./io/rc_curves.c	/^int16_t lookupYawRC[YAW_LOOKUP_LENGTH];     \/\/ lookup table for expo & RC rate YAW$/;"	v
loop	./mw.c	/^void loop(void)$/;"	f
loopbackPort	./main.c	/^serialPort_t *loopbackPort;$/;"	v
looptime	./config/config_master.h	/^    uint16_t looptime;                      \/\/ imu loop time in us$/;"	m	struct:master_t
lowestXValueForEast	./io/ledstrip.c	/^uint8_t lowestXValueForEast;$/;"	v
lowestYValueForSouth	./io/ledstrip.c	/^uint8_t lowestYValueForSouth;$/;"	v
lowpassFilters	./flight/mixer.c	/^static lowpass_t lowpassFilters[MAX_SUPPORTED_SERVOS];$/;"	v	file:
lowpassFixed	./flight/lowpass.c	/^int32_t lowpassFixed(lowpass_t *filter, int32_t in, int16_t freq)$/;"	f
lowpass_t	./flight/lowpass.h	/^typedef struct lowpass_t {$/;"	s
lowpass_t	./flight/lowpass.h	/^} lowpass_t;$/;"	t	typeref:struct:lowpass_t
lpf_e	./drivers/accgyro_mpu6050.c	/^enum lpf_e {$/;"	g	file:
lpf_e	./drivers/accgyro_spi_mpu6500.c	/^enum lpf_e {$/;"	g	file:
lsm303dlhcAccDetect	./drivers/accgyro_lsm303dlhc.c	/^bool lsm303dlhcAccDetect(acc_t *acc)$/;"	f
lsm303dlhcAccInit	./drivers/accgyro_lsm303dlhc.c	/^void lsm303dlhcAccInit(void)$/;"	f
lsm303dlhcAccRead	./drivers/accgyro_lsm303dlhc.c	/^static void lsm303dlhcAccRead(int16_t *gyroADC)$/;"	f	file:
m25p16_eraseCompletely	./drivers/flash_m25p16.c	/^void m25p16_eraseCompletely()$/;"	f
m25p16_eraseSector	./drivers/flash_m25p16.c	/^void m25p16_eraseSector(uint32_t address)$/;"	f
m25p16_getGeometry	./drivers/flash_m25p16.c	/^const flashGeometry_t* m25p16_getGeometry()$/;"	f
m25p16_init	./drivers/flash_m25p16.c	/^bool m25p16_init()$/;"	f
m25p16_isReady	./drivers/flash_m25p16.c	/^bool m25p16_isReady()$/;"	f
m25p16_pageProgram	./drivers/flash_m25p16.c	/^void m25p16_pageProgram(uint32_t address, const uint8_t *data, int length)$/;"	f
m25p16_pageProgramBegin	./drivers/flash_m25p16.c	/^void m25p16_pageProgramBegin(uint32_t address)$/;"	f
m25p16_pageProgramContinue	./drivers/flash_m25p16.c	/^void m25p16_pageProgramContinue(const uint8_t *data, int length)$/;"	f
m25p16_pageProgramFinish	./drivers/flash_m25p16.c	/^void m25p16_pageProgramFinish()$/;"	f
m25p16_performOneByteCommand	./drivers/flash_m25p16.c	/^static void m25p16_performOneByteCommand(uint8_t command)$/;"	f	file:
m25p16_readBytes	./drivers/flash_m25p16.c	/^int m25p16_readBytes(uint32_t address, uint8_t *buffer, int length)$/;"	f
m25p16_readIdentification	./drivers/flash_m25p16.c	/^static bool m25p16_readIdentification()$/;"	f	file:
m25p16_readStatus	./drivers/flash_m25p16.c	/^static uint8_t m25p16_readStatus()$/;"	f	file:
m25p16_waitForReady	./drivers/flash_m25p16.c	/^bool m25p16_waitForReady(uint32_t timeoutMillis)$/;"	f
m25p16_writeEnable	./drivers/flash_m25p16.c	/^static void m25p16_writeEnable()$/;"	f	file:
mAhDrawn	./sensors/battery.c	/^int32_t mAhDrawn = 0;               \/\/ milliampere hours drawn from the battery since start$/;"	v
m_n	./common/maths.h	/^    int m_n;$/;"	m	struct:stdev_t
m_newM	./common/maths.h	/^    float m_oldM, m_newM, m_oldS, m_newS;$/;"	m	struct:stdev_t
m_newS	./common/maths.h	/^    float m_oldM, m_newM, m_oldS, m_newS;$/;"	m	struct:stdev_t
m_oldM	./common/maths.h	/^    float m_oldM, m_newM, m_oldS, m_newS;$/;"	m	struct:stdev_t
m_oldS	./common/maths.h	/^    float m_oldM, m_newM, m_oldS, m_newS;$/;"	m	struct:stdev_t
mag	./sensors/compass.c	/^mag_t mag;                   \/\/ mag access functions$/;"	v
magADC	./blackbox/blackbox.c	/^    int16_t magADC[XYZ_AXIS_COUNT];$/;"	m	struct:blackboxMainState_t	file:
magADC	./sensors/compass.c	/^int16_t magADC[XYZ_AXIS_COUNT];$/;"	v
magAlign	./sensors/compass.c	/^sensor_align_e magAlign = 0;$/;"	v
magGain	./drivers/compass_hmc5883l.c	/^static float magGain[3] = { 1.0f, 1.0f, 1.0f };$/;"	v	file:
magHold	./mw.c	/^int16_t magHold;$/;"	v
magInit	./sensors/compass.c	/^static uint8_t magInit = 0;$/;"	v	file:
magModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t magModeColors = {$/;"	v	file:
magSensor_e	./sensors/compass.h	/^} magSensor_e;$/;"	t	typeref:enum:__anon118
magZero	./config/config_master.h	/^    flightDynamicsTrims_t magZero;$/;"	m	struct:master_t
mag_align	./sensors/sensors.h	/^    sensor_align_e mag_align;               \/\/ mag alignment$/;"	m	struct:sensorAlignmentConfig_s
mag_declination	./config/config_profile.h	/^    int16_t mag_declination;                \/\/ Get your magnetic decliniation from here : http:\/\/magnetic-declination.com\/$/;"	m	struct:profile_s
mag_hardware	./config/config_master.h	/^    uint8_t mag_hardware;                   \/\/ Which mag hardware to use on boards with more than one device$/;"	m	struct:master_t
mag_s	./drivers/compass.h	/^typedef struct mag_s {$/;"	s
mag_t	./drivers/compass.h	/^} mag_t;$/;"	t	typeref:struct:mag_s
magic_be	./config/config_master.h	/^    uint8_t magic_be;                       \/\/ magic number, should be 0xBE$/;"	m	struct:master_t
magic_ef	./config/config_master.h	/^    uint8_t magic_ef;                       \/\/ magic number, should be 0xEF$/;"	m	struct:master_t
magneticDeclination	./flight/imu.c	/^float magneticDeclination = 0.0f;       \/\/ calculated at startup from config$/;"	v
main	./main.c	/^int main(void) {$/;"	f
main_voltage_H	./telemetry/hott.h	/^    uint8_t main_voltage_H;      \/\/#32$/;"	m	struct:HOTT_EAM_MSG_s
main_voltage_H	./telemetry/hott.h	/^    uint8_t main_voltage_H;      \/\/#32$/;"	m	struct:HOTT_GAM_MSG_s
main_voltage_L	./telemetry/hott.h	/^    uint8_t main_voltage_L;      \/\/#31 Main power voltage (drive) in 0.1V steps$/;"	m	struct:HOTT_EAM_MSG_s
main_voltage_L	./telemetry/hott.h	/^    uint8_t main_voltage_L;      \/\/#31 Main power voltage using 0.1V steps$/;"	m	struct:HOTT_GAM_MSG_s
masterConfig	./config/config.c	/^master_t masterConfig;                 \/\/ master config struct with data independent from profiles$/;"	v
master_t	./config/config_master.h	/^typedef struct master_t {$/;"	s
master_t	./config/config_master.h	/^} master_t;$/;"	t	typeref:struct:master_t
max	./flight/mixer.h	/^    int16_t max;                            \/\/ servo max$/;"	m	struct:servoParam_t
max	./io/serial_cli.c	/^    const int32_t max;$/;"	m	struct:__anon100	file:
max_angle_inclination	./config/config_master.h	/^    uint16_t max_angle_inclination;         \/\/ max inclination allowed in angle (level) mode. default 500 (50 degrees).$/;"	m	struct:master_t
maxcheck	./rx/rx.h	/^    uint16_t maxcheck;                      \/\/ maximum rc end$/;"	m	struct:rxConfig_s
maxthrottle	./io/escservo.h	/^    uint16_t maxthrottle;                   \/\/ This is the maximum value for the ESCs at full power this value can be increased up to 2000$/;"	m	struct:escAndServoConfig_s
mb	./drivers/barometer_bmp085.c	/^    int16_t mb;$/;"	m	struct:__anon43	file:
mc	./drivers/barometer_bmp085.c	/^    int16_t mc;$/;"	m	struct:__anon43	file:
md	./drivers/barometer_bmp085.c	/^    int16_t md;$/;"	m	struct:__anon43	file:
measurement	./drivers/sonar_hcsr04.c	/^static volatile int32_t measurement = -1;$/;"	v	file:
message	./io/gps.c	/^    uint8_t message[UBLOX_SBAS_MESSAGE_LENGTH];$/;"	m	struct:ubloxSbas_s	file:
messageState	./io/gps.h	/^    gpsMessageState_e messageState;$/;"	m	struct:gpsData_t
micros	./drivers/system.c	/^uint32_t micros(void)$/;"	f
middle	./flight/mixer.h	/^    int16_t middle;                         \/\/ servo middle$/;"	m	struct:servoParam_t
midrc	./rx/rx.h	/^    uint16_t midrc;                         \/\/ Some radios have not a neutral point centered on 1500. can be changed here$/;"	m	struct:rxConfig_s
millis	./drivers/system.c	/^uint32_t millis(void)$/;"	f
min	./flight/mixer.h	/^    int16_t min;                            \/\/ servo min$/;"	m	struct:servoParam_t
min	./io/serial_cli.c	/^    const int32_t min;$/;"	m	struct:__anon100	file:
min_cell_volt	./telemetry/hott.h	/^    uint8_t min_cell_volt;       \/\/#37 minimum cell voltage in 2mV steps. 124 = 2,48V$/;"	m	struct:HOTT_GAM_MSG_s
min_cell_volt_num	./telemetry/hott.h	/^    uint8_t min_cell_volt_num;   \/\/#38 number of the cell with the lowest voltage$/;"	m	struct:HOTT_GAM_MSG_s
mincheck	./rx/rx.h	/^    uint16_t mincheck;                      \/\/ minimum rc end$/;"	m	struct:rxConfig_s
mincommand	./io/escservo.h	/^    uint16_t mincommand;                    \/\/ This is the value for the ESCs when they are not armed. In some cases, this value must be lowered down to 900 for some specific ESCs$/;"	m	struct:escAndServoConfig_s
minthrottle	./io/escservo.h	/^    uint16_t minthrottle;                   \/\/ Set the minimum throttle command sent to the ESC (Electronic Speed Controller). This is the minimum value that allow motors to run at a idle speed.$/;"	m	struct:escAndServoConfig_s
missedEvents	./drivers/pwm_rx.c	/^    uint8_t missedEvents;$/;"	m	struct:__anon59	file:
mixTable	./flight/mixer.c	/^void mixTable(void)$/;"	f
mixerAtail4	./flight/mixer.c	/^static const motorMixer_t mixerAtail4[] = {$/;"	v	file:
mixerBi	./flight/mixer.c	/^static const motorMixer_t mixerBi[] = {$/;"	v	file:
mixerConfig	./config/config_master.h	/^    mixerConfig_t mixerConfig;$/;"	m	struct:master_t
mixerConfig	./flight/mixer.c	/^static mixerConfig_t *mixerConfig;$/;"	v	file:
mixerConfig_s	./flight/mixer.h	/^typedef struct mixerConfig_s {$/;"	s
mixerConfig_t	./flight/mixer.h	/^} mixerConfig_t;$/;"	t	typeref:struct:mixerConfig_s
mixerDualcopter	./flight/mixer.c	/^static const motorMixer_t mixerDualcopter[] = {$/;"	v	file:
mixerHex6H	./flight/mixer.c	/^static const motorMixer_t mixerHex6H[] = {$/;"	v	file:
mixerHex6P	./flight/mixer.c	/^static const motorMixer_t mixerHex6P[] = {$/;"	v	file:
mixerHex6X	./flight/mixer.c	/^static const motorMixer_t mixerHex6X[] = {$/;"	v	file:
mixerInit	./flight/mixer.c	/^void mixerInit(mixerMode_e mixerMode, motorMixer_t *initialCustomMixers)$/;"	f
mixerLoadMix	./flight/mixer.c	/^void mixerLoadMix(int index, motorMixer_t *customMixers)$/;"	f
mixerMode	./config/config_master.h	/^    uint8_t mixerMode;$/;"	m	struct:master_t
mixerMode	./flight/mixer.h	/^typedef enum mixerMode$/;"	g
mixerMode_e	./flight/mixer.h	/^} mixerMode_e;$/;"	t	typeref:enum:mixerMode
mixerNames	./io/serial_cli.c	/^static const char * const mixerNames[] = {$/;"	v	file:
mixerOctoFlatP	./flight/mixer.c	/^static const motorMixer_t mixerOctoFlatP[] = {$/;"	v	file:
mixerOctoFlatX	./flight/mixer.c	/^static const motorMixer_t mixerOctoFlatX[] = {$/;"	v	file:
mixerOctoX8	./flight/mixer.c	/^static const motorMixer_t mixerOctoX8[] = {$/;"	v	file:
mixerQuadP	./flight/mixer.c	/^static const motorMixer_t mixerQuadP[] = {$/;"	v	file:
mixerQuadX	./flight/mixer.c	/^static const motorMixer_t mixerQuadX[] = {$/;"	v	file:
mixerResetMotors	./flight/mixer.c	/^void mixerResetMotors(void)$/;"	f
mixerTri	./flight/mixer.c	/^static const motorMixer_t mixerTri[] = {$/;"	v	file:
mixerUseConfigs	./flight/mixer.c	/^void mixerUseConfigs($/;"	f
mixerUsePWMOutputConfiguration	./flight/mixer.c	/^void mixerUsePWMOutputConfiguration(pwmOutputConfiguration_t *pwmOutputConfiguration)$/;"	f
mixerVtail4	./flight/mixer.c	/^static const motorMixer_t mixerVtail4[] = {$/;"	v	file:
mixerY4	./flight/mixer.c	/^static const motorMixer_t mixerY4[] = {$/;"	v	file:
mixerY6	./flight/mixer.c	/^static const motorMixer_t mixerY6[] = {$/;"	v	file:
mixer_t	./flight/mixer.h	/^typedef struct mixer_t {$/;"	s
mixer_t	./flight/mixer.h	/^} mixer_t;$/;"	t	typeref:struct:mixer_t
mixers	./flight/mixer.c	/^const mixer_t mixers[] = {$/;"	v
ml_version	./drivers/barometer_bmp085.c	/^    uint8_t chip_id, ml_version, al_version;$/;"	m	struct:__anon44	file:
mma8451ConfigureInterrupt	./drivers/accgyro_mma845x.c	/^static inline void mma8451ConfigureInterrupt(void)$/;"	f	file:
mma8452Detect	./drivers/accgyro_mma845x.c	/^bool mma8452Detect(acc_t *acc)$/;"	f
mma8452Init	./drivers/accgyro_mma845x.c	/^static void mma8452Init(void)$/;"	f	file:
mma8452Read	./drivers/accgyro_mma845x.c	/^static void mma8452Read(int16_t *accelData)$/;"	f	file:
mmmm	./io/gps.h	/^    int16_t mmmm;$/;"	m	struct:gpsCoordinateDDDMMmmmm_s
mocapAlt	./sensors/mocap.c	/^static uint32_t mocapAlt = 0;    \/\/ in cm$/;"	v	file:
mocapAltReady	./sensors/mocap.c	/^static bool mocapAltReady = false;$/;"	v	file:
mocapReadAltitude	./sensors/mocap.c	/^uint32_t mocapReadAltitude(void) {$/;"	f
mocap_enu	./sensors/mocap.c	/^struct mocap_enu_t mocap_enu = {0,0,0,0,false};$/;"	v	typeref:struct:mocap_enu_t
mocap_enu_t	./sensors/mocap.h	/^struct mocap_enu_t$/;"	s
mode	./drivers/barometer_bmp085.c	/^    uint8_t mode;$/;"	m	struct:__anon44	file:
mode	./drivers/gpio.h	/^    GPIO_Mode mode;$/;"	m	struct:__anon49
mode	./drivers/pwm_rx.c	/^    pwmInputMode_t mode;$/;"	m	struct:__anon59	file:
mode	./drivers/serial.h	/^    portMode_t mode;$/;"	m	struct:serialPort
mode	./io/beeper.c	/^    uint8_t mode;$/;"	m	struct:beeperTableEntry_s	file:
mode	./io/gps.c	/^    sbasMode_e mode;$/;"	m	struct:ubloxSbas_s	file:
mode	./io/rc_controls.h	/^    uint8_t mode;$/;"	m	struct:adjustmentConfig_s
modeActivationCondition_s	./io/rc_controls.h	/^typedef struct modeActivationCondition_s {$/;"	s
modeActivationCondition_t	./io/rc_controls.h	/^} modeActivationCondition_t;$/;"	t	typeref:struct:modeActivationCondition_s
modeActivationConditions	./config/config_profile.h	/^    modeActivationCondition_t modeActivationConditions[MAX_MODE_ACTIVATION_CONDITION_COUNT];$/;"	m	struct:profile_s
modeColorIndexes_s	./io/ledstrip.c	/^typedef struct modeColorIndexes_s {$/;"	s	file:
modeColorIndexes_t	./io/ledstrip.c	/^} modeColorIndexes_t;$/;"	t	typeref:struct:modeColorIndexes_s	file:
modeId	./io/rc_controls.h	/^    boxId_e modeId;$/;"	m	struct:modeActivationCondition_s
monitoring	./flight/failsafe.h	/^    bool monitoring;$/;"	m	struct:failsafeState_s
motor	./blackbox/blackbox.c	/^    int16_t motor[MAX_SUPPORTED_MOTORS];$/;"	m	struct:blackboxMainState_t	file:
motor	./flight/mixer.c	/^int16_t motor[MAX_SUPPORTED_MOTORS];$/;"	v
motor	./flight/mixer.h	/^    const motorMixer_t *motor;$/;"	m	struct:mixer_t
motorControlEnable	./mw.c	/^uint8_t motorControlEnable = false;$/;"	v
motorCount	./drivers/pwm_mapping.h	/^    uint8_t motorCount;$/;"	m	struct:pwmOutputConfiguration_s
motorCount	./flight/mixer.c	/^uint8_t motorCount = 0;$/;"	v
motorCount	./flight/mixer.h	/^    uint8_t motorCount;$/;"	m	struct:mixer_t
motorMixer_t	./flight/mixer.h	/^typedef struct motorMixer_t {$/;"	s
motorMixer_t	./flight/mixer.h	/^} motorMixer_t;$/;"	t	typeref:struct:motorMixer_t
motorPwmRate	./drivers/pwm_mapping.h	/^    uint16_t motorPwmRate;$/;"	m	struct:drv_pwm_config_t
motor_disarmed	./flight/mixer.c	/^int16_t motor_disarmed[MAX_SUPPORTED_MOTORS];$/;"	v
motor_highest_current	./telemetry/hott.h	/^    uint8_t motor_highest_current;  \/\/#42 Motor number (1-x) with highest current$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_pwm_rate	./config/config_master.h	/^    uint16_t motor_pwm_rate;                \/\/ The update rate of motor outputs (50-498Hz)$/;"	m	struct:master_t
motor_rpm_H	./telemetry/hott.h	/^    uint8_t motor_rpm_H;    \/\/#39$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_rpm_L	./telemetry/hott.h	/^    uint8_t motor_rpm_L;    \/\/#38 Motor or external RPM sensor (without gear)$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_temp	./telemetry/hott.h	/^    uint8_t motor_temp;     \/\/#36 Motor or external sensor temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_temp_max	./telemetry/hott.h	/^    uint8_t motor_temp_max; \/\/#37 Highest motor or external sensor temperature$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_timing	./telemetry/hott.h	/^    uint8_t motor_timing;   \/\/#40 Motor timing$/;"	m	struct:HOTT_AIRESC_MSG_s
motor_timing_adv	./telemetry/hott.h	/^    uint8_t motor_timing_adv; \/\/#41 Motor advanced timing$/;"	m	struct:HOTT_AIRESC_MSG_s
motors	./drivers/pwm_output.c	/^static pwmOutputPort_t *motors[MAX_PWM_MOTORS];$/;"	v	file:
mpu3050Detect	./drivers/accgyro_mpu3050.c	/^bool mpu3050Detect(gyro_t *gyro, uint16_t lpf)$/;"	f
mpu3050Init	./drivers/accgyro_mpu3050.c	/^static void mpu3050Init(void)$/;"	f	file:
mpu3050Read	./drivers/accgyro_mpu3050.c	/^static void mpu3050Read(int16_t *gyroADC)$/;"	f	file:
mpu3050ReadTemp	./drivers/accgyro_mpu3050.c	/^static void mpu3050ReadTemp(int16_t *tempData)$/;"	f	file:
mpu6000AccAndGyroInit	./drivers/accgyro_spi_mpu6000.c	/^void mpu6000AccAndGyroInit() {$/;"	f
mpu6000ReadRegister	./drivers/accgyro_spi_mpu6000.c	/^static void mpu6000ReadRegister(uint8_t reg, uint8_t *data, int length)$/;"	f	file:
mpu6000SpiAccDetect	./drivers/accgyro_spi_mpu6000.c	/^bool mpu6000SpiAccDetect(acc_t *acc)$/;"	f
mpu6000SpiAccInit	./drivers/accgyro_spi_mpu6000.c	/^void mpu6000SpiAccInit(void)$/;"	f
mpu6000SpiAccRead	./drivers/accgyro_spi_mpu6000.c	/^void mpu6000SpiAccRead(int16_t *gyroData)$/;"	f
mpu6000SpiDetect	./drivers/accgyro_spi_mpu6000.c	/^bool mpu6000SpiDetect(void)$/;"	f
mpu6000SpiGyroDetect	./drivers/accgyro_spi_mpu6000.c	/^bool mpu6000SpiGyroDetect(gyro_t *gyro, uint16_t lpf)$/;"	f
mpu6000SpiGyroInit	./drivers/accgyro_spi_mpu6000.c	/^void mpu6000SpiGyroInit(void)$/;"	f
mpu6000SpiGyroRead	./drivers/accgyro_spi_mpu6000.c	/^void mpu6000SpiGyroRead(int16_t *gyroData)$/;"	f
mpu6000WriteRegister	./drivers/accgyro_spi_mpu6000.c	/^static void mpu6000WriteRegister(uint8_t reg, uint8_t data)$/;"	f	file:
mpu6050AccDetect	./drivers/accgyro_mpu6050.c	/^bool mpu6050AccDetect(const mpu6050Config_t *configToUse, acc_t *acc)$/;"	f
mpu6050AccInit	./drivers/accgyro_mpu6050.c	/^static void mpu6050AccInit(void)$/;"	f	file:
mpu6050AccRead	./drivers/accgyro_mpu6050.c	/^static void mpu6050AccRead(int16_t *accData)$/;"	f	file:
mpu6050Config	./drivers/accgyro_mpu6050.c	/^static const mpu6050Config_t *mpu6050Config = NULL;$/;"	v	file:
mpu6050Config_s	./drivers/accgyro_mpu6050.h	/^typedef struct mpu6050Config_s {$/;"	s
mpu6050Config_t	./drivers/accgyro_mpu6050.h	/^} mpu6050Config_t;$/;"	t	typeref:struct:mpu6050Config_s
mpu6050Detect	./drivers/accgyro_mpu6050.c	/^static bool mpu6050Detect(void)$/;"	f	file:
mpu6050GpioInit	./drivers/accgyro_mpu6050.c	/^void mpu6050GpioInit(void) {$/;"	f
mpu6050GyroDetect	./drivers/accgyro_mpu6050.c	/^bool mpu6050GyroDetect(const mpu6050Config_t *configToUse, gyro_t *gyro, uint16_t lpf)$/;"	f
mpu6050GyroInit	./drivers/accgyro_mpu6050.c	/^static void mpu6050GyroInit(void)$/;"	f	file:
mpu6050GyroRead	./drivers/accgyro_mpu6050.c	/^static void mpu6050GyroRead(int16_t *gyroADC)$/;"	f	file:
mpu6050Resolution_e	./drivers/accgyro_mpu6050.c	/^} mpu6050Resolution_e;$/;"	t	typeref:enum:__anon40	file:
mpu6500AccInit	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500AccInit(void)$/;"	f	file:
mpu6500AccRead	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500AccRead(int16_t *accData)$/;"	f	file:
mpu6500Detect	./drivers/accgyro_spi_mpu6500.c	/^static bool mpu6500Detect(void)$/;"	f	file:
mpu6500GyroInit	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500GyroInit(void)$/;"	f	file:
mpu6500GyroRead	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500GyroRead(int16_t *gyroADC)$/;"	f	file:
mpu6500ReadRegister	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500ReadRegister(uint8_t reg, uint8_t *data, int length)$/;"	f	file:
mpu6500SpiAccDetect	./drivers/accgyro_spi_mpu6500.c	/^bool mpu6500SpiAccDetect(acc_t *acc)$/;"	f
mpu6500SpiGyroDetect	./drivers/accgyro_spi_mpu6500.c	/^bool mpu6500SpiGyroDetect(gyro_t *gyro, uint16_t lpf)$/;"	f
mpu6500WriteRegister	./drivers/accgyro_spi_mpu6500.c	/^static void mpu6500WriteRegister(uint8_t reg, uint8_t data)$/;"	f	file:
mpuAccelTrim	./drivers/accgyro_mpu6050.c	/^static mpu6050Resolution_e mpuAccelTrim;$/;"	v	file:
mpuLowPassFilter	./drivers/accgyro_l3g4200d.c	/^static uint8_t mpuLowPassFilter = L3G4200D_DLPF_32HZ;$/;"	v	file:
mpuLowPassFilter	./drivers/accgyro_mpu3050.c	/^static uint8_t mpuLowPassFilter = MPU3050_DLPF_42HZ;$/;"	v	file:
mpuLowPassFilter	./drivers/accgyro_mpu6050.c	/^static uint8_t mpuLowPassFilter = INV_FILTER_42HZ;$/;"	v	file:
mpuLowPassFilter	./drivers/accgyro_spi_mpu6500.c	/^static uint8_t mpuLowPassFilter = INV_FILTER_42HZ;$/;"	v	file:
mpuSpi6000InitDone	./drivers/accgyro_spi_mpu6000.c	/^static bool mpuSpi6000InitDone = false;$/;"	v	file:
ms5611Detect	./drivers/barometer_ms5611.c	/^bool ms5611Detect(baro_t *baro)$/;"	f
ms5611_c	./drivers/barometer_ms5611.c	/^static uint16_t ms5611_c[PROM_NB];  \/\/ on-chip ROM$/;"	v	file:
ms5611_calculate	./drivers/barometer_ms5611.c	/^static void ms5611_calculate(int32_t *pressure, int32_t *temperature)$/;"	f	file:
ms5611_crc	./drivers/barometer_ms5611.c	/^STATIC_UNIT_TESTED int8_t ms5611_crc(uint16_t *prom)$/;"	f
ms5611_get_up	./drivers/barometer_ms5611.c	/^static void ms5611_get_up(void)$/;"	f	file:
ms5611_get_ut	./drivers/barometer_ms5611.c	/^static void ms5611_get_ut(void)$/;"	f	file:
ms5611_osr	./drivers/barometer_ms5611.c	/^static uint8_t ms5611_osr = CMD_ADC_4096;$/;"	v	file:
ms5611_prom	./drivers/barometer_ms5611.c	/^static uint16_t ms5611_prom(int8_t coef_num)$/;"	f	file:
ms5611_read_adc	./drivers/barometer_ms5611.c	/^static uint32_t ms5611_read_adc(void)$/;"	f	file:
ms5611_reset	./drivers/barometer_ms5611.c	/^static void ms5611_reset(void)$/;"	f	file:
ms5611_start_up	./drivers/barometer_ms5611.c	/^static void ms5611_start_up(void)$/;"	f	file:
ms5611_start_ut	./drivers/barometer_ms5611.c	/^static void ms5611_start_ut(void)$/;"	f	file:
ms5611_up	./drivers/barometer_ms5611.c	/^static uint32_t ms5611_up;  \/\/ static result of pressure measurement$/;"	v	file:
ms5611_ut	./drivers/barometer_ms5611.c	/^static uint32_t ms5611_ut;  \/\/ static result of temperature measurement$/;"	v	file:
msg_class	./io/gps.c	/^    uint8_t msg_class;$/;"	m	struct:__anon83	file:
msg_id	./io/gps.c	/^    uint8_t msg_id;$/;"	m	struct:__anon83	file:
msg_txt	./telemetry/hott.h	/^    uint8_t msg_txt[HOTT_TEXTMODE_MSG_TEXT_LEN]; \/\/#04 ASCII text to display to$/;"	m	struct:HOTT_TEXTMODE_MSG
msl_altitude_H	./telemetry/hott.h	/^  uint8_t msl_altitude_H;\/\/#38$/;"	m	struct:HOTT_GPS_MSG_s
msl_altitude_L	./telemetry/hott.h	/^  uint8_t msl_altitude_L;\/\/#37 mean sea level altitude$/;"	m	struct:HOTT_GPS_MSG_s
mspAllocateSerialPorts	./io/serial_msp.c	/^void mspAllocateSerialPorts(serialConfig_t *serialConfig)$/;"	f
mspInit	./io/serial_msp.c	/^void mspInit(serialConfig_t *serialConfig)$/;"	f
mspPortSharing	./telemetry/msp.c	/^static portSharing_e mspPortSharing;$/;"	v	file:
mspPortUsage	./io/serial_msp.c	/^    mspPortUsage_e mspPortUsage;$/;"	m	struct:mspPort_s	file:
mspPortUsage_e	./io/serial_msp.c	/^} mspPortUsage_e;$/;"	t	typeref:enum:__anon74	file:
mspPort_s	./io/serial_msp.c	/^typedef struct mspPort_s {$/;"	s	file:
mspPort_t	./io/serial_msp.c	/^} mspPort_t;$/;"	t	typeref:struct:mspPort_s	file:
mspPorts	./io/serial_msp.c	/^static mspPort_t mspPorts[MAX_MSP_PORT_COUNT];$/;"	v	file:
mspProcess	./io/serial_msp.c	/^void mspProcess(void)$/;"	f
mspProcessReceivedCommand	./io/serial_msp.c	/^static void mspProcessReceivedCommand() {$/;"	f	file:
mspProcessReceivedData	./io/serial_msp.c	/^static bool mspProcessReceivedData(uint8_t c)$/;"	f	file:
mspReleasePortIfAllocated	./io/serial_msp.c	/^void mspReleasePortIfAllocated(serialPort_t *serialPort)$/;"	f
mspSerialPort	./io/serial_msp.c	/^static serialPort_t *mspSerialPort;$/;"	v	file:
mspSetTelemetryPort	./io/serial_msp.c	/^void mspSetTelemetryPort(serialPort_t *serialPort)$/;"	f
mspState_e	./io/serial_msp.c	/^} mspState_e;$/;"	t	typeref:enum:__anon73	file:
mspTelemetryCommandSequence	./io/serial_msp.c	/^static const uint8_t mspTelemetryCommandSequence[] = {$/;"	v	file:
mspTelemetryEnabled	./telemetry/msp.c	/^static bool mspTelemetryEnabled =  false;$/;"	v	file:
mspTelemetryPort	./io/serial_msp.c	/^static mspPort_t *mspTelemetryPort = NULL;$/;"	v	file:
mspTelemetryPort	./telemetry/msp.c	/^static serialPort_t *mspTelemetryPort = NULL;$/;"	v	file:
msp_baudrateIndex	./io/serial.h	/^    uint8_t msp_baudrateIndex;$/;"	m	struct:serialPortConfig_s
mtk	./io/gps.c	/^    const char *mtk;$/;"	m	struct:gpsInitData_t	file:
multiPPM	./drivers/pwm_mapping.c	/^static const uint16_t multiPPM[] = {$/;"	v	file:
multiPWM	./drivers/pwm_mapping.c	/^static const uint16_t multiPWM[] = {$/;"	v	file:
multiWiiFont	./drivers/display_ug2864hsweg01.c	/^static const uint8_t multiWiiFont[][5] = { \/\/ Refer to "Times New Roman" Font Database... 5 x 7 font$/;"	v	file:
multiwiiCurrentMeterOutput	./sensors/battery.h	/^    uint8_t multiwiiCurrentMeterOutput;     \/\/ if set to 1 output the amperage in milliamp steps instead of 0.01A steps via msp$/;"	m	struct:batteryConfig_s
mwArm	./mw.c	/^void mwArm(void)$/;"	f
mwDisarm	./mw.c	/^void mwDisarm(void)$/;"	f
name	./blackbox/blackbox.c	/^    const char *name;$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
name	./blackbox/blackbox.c	/^    const char *name;$/;"	m	struct:blackboxDeltaFieldDefinition_t	file:
name	./blackbox/blackbox.c	/^    const char *name;$/;"	m	struct:blackboxFieldDefinition_t	file:
name	./blackbox/blackbox.c	/^    const char *name;$/;"	m	struct:blackboxSimpleFieldDefinition_t	file:
name	./io/beeper.c	/^    const char *name;$/;"	m	struct:beeperTableEntry_s	file:
name	./io/serial_cli.c	/^    const char *name;$/;"	m	struct:__anon100	file:
name	./io/serial_cli.c	/^    const char *name;$/;"	m	struct:__anon98	file:
nav	./flight/navigation.c	/^static int16_t nav[2];$/;"	v	file:
navPID	./flight/navigation.c	/^static PID navPID[2];$/;"	v	file:
navPID_PARAM	./flight/navigation.c	/^static PID_PARAM navPID_PARAM;$/;"	v	file:
nav_bearing	./flight/navigation.c	/^static int32_t nav_bearing;$/;"	v	file:
nav_controls_heading	./flight/navigation.h	/^    uint8_t nav_controls_heading;           \/\/ copter faces toward the navigation point, maghold must be enabled for it$/;"	m	struct:gpsProfile_s
nav_mode	./flight/navigation.c	/^navigationMode_e nav_mode = NAV_MODE_NONE;    \/\/ Navigation mode$/;"	v
nav_rated	./flight/navigation.c	/^static int16_t nav_rated[2];               \/\/ Adding a rate controller to the navigation to make it smoother$/;"	v	file:
nav_slew_rate	./flight/navigation.h	/^    uint8_t nav_slew_rate;                  \/\/ Adds a rate control to nav output, will smoothen out nav angle spikes$/;"	m	struct:gpsProfile_s
nav_speed_max	./flight/navigation.h	/^    uint16_t nav_speed_max;                 \/\/ cm\/sec$/;"	m	struct:gpsProfile_s
nav_speed_min	./flight/navigation.h	/^    uint16_t nav_speed_min;                 \/\/ cm\/sec$/;"	m	struct:gpsProfile_s
nav_takeoff_bearing	./flight/navigation.c	/^static int16_t nav_takeoff_bearing;$/;"	v	file:
navigationInit	./flight/navigation.c	/^void navigationInit(gpsProfile_t *initialGpsProfile, pidProfile_t *pidProfile)$/;"	f
navigationMode_e	./flight/navigation.h	/^} navigationMode_e;$/;"	t	typeref:enum:__anon13
nazeHardwareRevision_e	./target/NAZE/hardware_revision.h	/^} nazeHardwareRevision_e;$/;"	t	typeref:enum:nazeHardwareRevision_t
nazeHardwareRevision_e	./target/SUPERBEE/hardware_revision.h	/^} nazeHardwareRevision_e;$/;"	t	typeref:enum:nazeHardwareRevision_t
nazeHardwareRevision_t	./target/NAZE/hardware_revision.h	/^typedef enum nazeHardwareRevision_t {$/;"	g
nazeHardwareRevision_t	./target/SUPERBEE/hardware_revision.h	/^typedef enum nazeHardwareRevision_t {$/;"	g
ned_down	./io/gps.c	/^    int32_t ned_down;$/;"	m	struct:__anon87	file:
ned_east	./io/gps.c	/^    int32_t ned_east;$/;"	m	struct:__anon87	file:
ned_north	./io/gps.c	/^    int32_t ned_north;$/;"	m	struct:__anon87	file:
needRxSignalBefore	./rx/rx.c	/^static uint32_t needRxSignalBefore = 0;$/;"	v	file:
neutral3d	./flight/mixer.h	/^    uint16_t neutral3d;                     \/\/ center 3d value$/;"	m	struct:flight3DConfig_s
next	./drivers/timer.h	/^    struct timerOvrHandlerRec_s* next;$/;"	m	struct:timerOvrHandlerRec_s	typeref:struct:timerOvrHandlerRec_s::timerOvrHandlerRec_s
nextAnimationUpdateAt	./io/ledstrip.c	/^static uint32_t nextAnimationUpdateAt = 0;$/;"	v	file:
nextDisplayUpdateAt	./io/display.c	/^static uint32_t nextDisplayUpdateAt = 0;$/;"	v	file:
nextIndicatorFlashAt	./io/ledstrip.c	/^static uint32_t nextIndicatorFlashAt = 0;$/;"	v	file:
nextPageAt	./io/display.c	/^    uint32_t nextPageAt;$/;"	m	struct:pageState_s	file:
nextPhase	./flight/autotune.c	/^static autotunePhase_e nextPhase = FIRST_TUNE_PHASE;$/;"	v	file:
nextRotationUpdateAt	./io/ledstrip.c	/^static uint32_t nextRotationUpdateAt = 0;$/;"	v	file:
nextWarningFlashAt	./io/ledstrip.c	/^static uint32_t nextWarningFlashAt = 0;$/;"	v	file:
next_fix	./io/gps.c	/^static bool next_fix;$/;"	v	file:
normalizeV	./common/maths.c	/^void normalizeV(struct fp_vector *src, struct fp_vector *dest)$/;"	f
north	./io/ledstrip.c	/^    uint8_t north;$/;"	m	struct:modeColorIndexes_s	file:
north	./sensors/mocap.h	/^    int32_t north;$/;"	m	struct:mocap_enu_t
numCh	./io/gps.c	/^    uint8_t numCh;              \/\/ Number of channels$/;"	m	struct:__anon89	file:
numChannels	./drivers/pwm_rx.c	/^    int8_t   numChannels;$/;"	m	struct:ppmDevice	file:
numChannelsPrevFrame	./drivers/pwm_rx.c	/^    int8_t   numChannelsPrevFrame;$/;"	m	struct:ppmDevice	file:
numSat	./io/gps.c	/^    uint8_t numSat;$/;"	m	struct:gpsDataNmea_s	file:
offset	./io/serial_msp.c	/^    uint8_t offset;$/;"	m	struct:mspPort_s	file:
onGpsNewData	./flight/navigation.c	/^void onGpsNewData(void)$/;"	f
onSerialRxPinChange	./drivers/serial_softserial.c	/^void onSerialRxPinChange(timerCCHandlerRec_t *cbRec, captureCompare_t capture)$/;"	f
onSerialTimer	./drivers/serial_softserial.c	/^void onSerialTimer(timerCCHandlerRec_t *cbRec, captureCompare_t capture)$/;"	f
openSerialPort	./io/serial.c	/^serialPort_t *openSerialPort($/;"	f
openSoftSerial	./drivers/serial_softserial.c	/^serialPort_t *openSoftSerial(softSerialPortIndex_e portIndex, serialReceiveCallbackPtr callback, uint32_t baud, portOptions_t options)$/;"	f
options	./drivers/serial.h	/^    portOptions_t options;$/;"	m	struct:serialPort
orientationModeColors	./io/ledstrip.c	/^static const modeColorIndexes_t orientationModeColors = {$/;"	v	file:
original_target_bearing	./flight/navigation.c	/^static int32_t original_target_bearing;$/;"	v	file:
output	./flight/navigation.c	/^    float output;$/;"	m	struct:__anon6	file:
outputEnable	./drivers/timer.h	/^    uint8_t outputEnable;$/;"	m	struct:__anon56
overflowCallback	./drivers/timer.c	/^    timerOvrHandlerRec_t *overflowCallback[CC_CHANNELS_PER_TIMER];$/;"	m	struct:timerConfig_s	file:
overflowCallbackActive	./drivers/timer.c	/^    timerOvrHandlerRec_t *overflowCallbackActive; \/\/ null-terminated linkded list of active overflow callbacks$/;"	m	struct:timerConfig_s	file:
overflowCb	./drivers/pwm_rx.c	/^    timerOvrHandlerRec_t overflowCb;$/;"	m	struct:__anon59	file:
oversampling_setting	./drivers/barometer_bmp085.c	/^    int16_t oversampling_setting;$/;"	m	struct:__anon44	file:
p	./blackbox/blackbox_fielddefs.h	/^    uint8_t p;$/;"	m	struct:flightLogEvent_autotuneCycleResult_t
p	./blackbox/blackbox_fielddefs.h	/^    uint8_t p;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
p	./flight/autotune.c	/^    float p;$/;"	m	struct:fp_pid	file:
pEpInt_IN	./vcp/usb_istr.c	/^void (*pEpInt_IN[7])(void) =$/;"	v
pEpInt_OUT	./vcp/usb_istr.c	/^void (*pEpInt_OUT[7])(void) =$/;"	v
packetSent	./vcp/hw_config.c	/^__IO uint32_t packetSent;                                     \/\/ HJI$/;"	v
padHalfLineBuffer	./io/display.c	/^void padHalfLineBuffer(void)$/;"	f
padLineBuffer	./io/display.c	/^void padLineBuffer(void)$/;"	f
pageChanging	./io/display.c	/^    bool pageChanging;$/;"	m	struct:pageState_s	file:
pageFlags	./io/display.c	/^    uint8_t pageFlags;$/;"	m	struct:pageState_s	file:
pageFlags_e	./io/display.c	/^} pageFlags_e;$/;"	t	typeref:enum:__anon80	file:
pageId	./io/display.c	/^    pageId_e pageId;$/;"	m	struct:pageState_s	file:
pageIdBeforeArming	./io/display.c	/^    pageId_e pageIdBeforeArming;$/;"	m	struct:pageState_s	file:
pageId_e	./io/display.h	/^} pageId_e;$/;"	t	typeref:enum:__anon67
pageSize	./drivers/flash.h	/^    uint16_t pageSize; \/\/ In bytes$/;"	m	struct:flashGeometry_t
pageState	./io/display.c	/^static pageState_t pageState;$/;"	v	file:
pageState_s	./io/display.c	/^typedef struct pageState_s {$/;"	s	file:
pageState_t	./io/display.c	/^} pageState_t;$/;"	t	typeref:struct:pageState_s	file:
pageTitles	./io/display.c	/^static const char* const pageTitles[] = {$/;"	v	file:
pagesPerSector	./drivers/flash.h	/^    uint16_t pagesPerSector;$/;"	m	struct:flashGeometry_t
param	./io/serial_cli.c	/^    const char *param;$/;"	m	struct:__anon98	file:
param_b5	./drivers/barometer_bmp085.c	/^    int32_t param_b5;$/;"	m	struct:__anon44	file:
paritytype	./vcp/usb_prop.h	/^    uint8_t paritytype;$/;"	m	struct:__anon16
parseColor	./io/ledstrip.c	/^bool parseColor(uint8_t index, const char *colorConfig)$/;"	f
parseLedStripConfig	./io/ledstrip.c	/^bool parseLedStripConfig(uint8_t ledIndex, const char *config)$/;"	f
parseRcChannels	./rx/rx.c	/^void parseRcChannels(const char *input, rxConfig_t *rxConfig)$/;"	f
parseState_e	./io/ledstrip.c	/^} parseState_e;$/;"	t	typeref:enum:__anon77	file:
performAcclerationCalibration	./sensors/acceleration.c	/^void performAcclerationCalibration(rollAndPitchTrims_t *rollAndPitchTrims)$/;"	f
performAcclerationCalibration	./sensors/gyro.c	/^static void performAcclerationCalibration(uint8_t gyroMovementCalibrationThreshold)$/;"	f	file:
performBaroCalibrationCycle	./sensors/barometer.c	/^void performBaroCalibrationCycle(void)$/;"	f
performInflightAccelerationCalibration	./sensors/acceleration.c	/^void performInflightAccelerationCalibration(rollAndPitchTrims_t *rollAndPitchTrims)$/;"	f
period	./drivers/pwm_output.c	/^    uint16_t period;$/;"	m	struct:__anon39	file:
periodicTasks	./mw.c	/^} periodicTasks;$/;"	t	typeref:enum:__anon24	file:
peripheral	./drivers/bus_i2c_stm32f10x.c	/^    uint32_t peripheral;$/;"	m	struct:i2cDevice_t	file:
permanentId	./io/serial_msp.c	/^    const uint8_t permanentId;      \/\/$/;"	m	struct:box_e	file:
phase	./blackbox/blackbox_fielddefs.h	/^    uint8_t phase;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
phase	./flight/autotune.c	/^static autotunePhase_e phase = PHASE_IDLE;$/;"	v	file:
phase	./flight/failsafe.h	/^    failsafePhase_e phase;$/;"	m	struct:failsafeState_s
pid	./flight/autotune.c	/^static fp_pid_t pid;$/;"	v	file:
pidBackup	./flight/autotune.c	/^static pidProfile_t pidBackup;$/;"	v	file:
pidController	./flight/autotune.c	/^static uint8_t pidController;$/;"	v	file:
pidController	./flight/pid.h	/^    uint8_t pidController;                  \/\/ 0 = multiwii original, 1 = rewrite from http:\/\/www.multiwii.com\/forum\/viewtopic.php?f=8&t=3671, 1, 2 = Luggi09s new baseflight pid$/;"	m	struct:pidProfile_s
pidControllerFuncPtr	./flight/pid.c	/^typedef void (*pidControllerFuncPtr)(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,$/;"	t	file:
pidControllerFuncPtr	./mw.c	/^typedef void (*pidControllerFuncPtr)(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,$/;"	t	file:
pidControllerType_e	./flight/pid.h	/^} pidControllerType_e;$/;"	t	typeref:enum:__anon8
pidHarakiri	./flight/pid.c	/^static void pidHarakiri(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig, uint16_t max_angle_inclination,$/;"	f	file:
pidIndex	./flight/autotune.c	/^static uint8_t pidIndex;$/;"	v	file:
pidIndex_e	./flight/pid.h	/^} pidIndex_e;$/;"	t	typeref:enum:__anon7
pidLuxFloat	./flight/pid.c	/^static void pidLuxFloat(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,$/;"	f	file:
pidMultiWii	./flight/pid.c	/^static void pidMultiWii(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,$/;"	f	file:
pidMultiWii23	./flight/pid.c	/^static void pidMultiWii23(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig, uint16_t max_angle_inclination,$/;"	f	file:
pidMultiWiiHybrid	./flight/pid.c	/^static void pidMultiWiiHybrid(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig,$/;"	f	file:
pidProfile	./config/config_profile.h	/^    pidProfile_t pidProfile;$/;"	m	struct:profile_s
pidProfile	./flight/altitudehold.c	/^static pidProfile_t *pidProfile;$/;"	v	file:
pidProfile	./flight/autotune.c	/^static pidProfile_t *pidProfile;$/;"	v	file:
pidProfile	./flight/imu.c	/^static pidProfile_t *pidProfile;$/;"	v	file:
pidProfile	./io/rc_controls.c	/^static pidProfile_t *pidProfile;$/;"	v	file:
pidProfile_s	./flight/pid.h	/^typedef struct pidProfile_s {$/;"	s
pidProfile_t	./flight/pid.h	/^} pidProfile_t;$/;"	t	typeref:struct:pidProfile_s
pidResetErrorAngle	./flight/pid.c	/^void pidResetErrorAngle(void)$/;"	f
pidResetErrorGyro	./flight/pid.c	/^void pidResetErrorGyro(void)$/;"	f
pidRewrite	./flight/pid.c	/^static void pidRewrite(pidProfile_t *pidProfile, controlRateConfig_t *controlRateConfig, uint16_t max_angle_inclination,$/;"	f	file:
pidSetController	./flight/pid.c	/^void pidSetController(pidControllerType_e type)$/;"	f
pid_at_min_throttle	./flight/mixer.h	/^    uint8_t pid_at_min_throttle;            \/\/ when enabled pids are used at minimum throttle$/;"	m	struct:mixerConfig_s
pid_controller	./flight/pid.c	/^pidControllerFuncPtr pid_controller = pidMultiWii; \/\/ which pid controller are we using, defaultMultiWii$/;"	v
pidnames	./io/serial_msp.c	/^static const char pidnames[] =$/;"	v	file:
pin	./drivers/gpio.h	/^    uint16_t pin;$/;"	m	struct:__anon49
pin	./drivers/timer.h	/^    uint16_t pin;$/;"	m	struct:__anon56
pitch	./common/maths.h	/^    float pitch;$/;"	m	struct:fp_angles
pitch	./flight/mixer.h	/^    float pitch;$/;"	m	struct:motorMixer_t
pitch	./sensors/acceleration.h	/^    int16_t pitch;$/;"	m	struct:rollAndPitchTrims_s
pitch	./sensors/sensors.h	/^    int16_t pitch;$/;"	m	struct:int16_flightDynamicsTrims_s
pitchDeciDegrees	./flight/imu.h	/^    int16_t pitchDeciDegrees;$/;"	m	struct:rollAndPitchInclination_s
pitchDegrees	./sensors/boardalignment.h	/^    int16_t pitchDegrees;$/;"	m	struct:boardAlignment_s
port	./drivers/serial_softserial.c	/^    serialPort_t     port;$/;"	m	struct:softSerial_s	file:
port	./drivers/serial_uart.h	/^    serialPort_t port;$/;"	m	struct:__anon36
port	./drivers/serial_usb_vcp.h	/^    serialPort_t port;$/;"	m	struct:__anon37
port	./io/serial_msp.c	/^    serialPort_t *port;$/;"	m	struct:mspPort_s	file:
portConfig	./telemetry/frsky.c	/^static serialPortConfig_t *portConfig;$/;"	v	file:
portConfig	./telemetry/hott.c	/^static serialPortConfig_t *portConfig;$/;"	v	file:
portConfig	./telemetry/msp.c	/^static serialPortConfig_t *portConfig;$/;"	v	file:
portConfig	./telemetry/smartport.c	/^static serialPortConfig_t *portConfig;$/;"	v	file:
portConfigs	./io/serial.h	/^    serialPortConfig_t portConfigs[SERIAL_PORT_COUNT];$/;"	m	struct:serialConfig_s
portMode_t	./drivers/serial.h	/^typedef enum portMode_t {$/;"	g
portMode_t	./drivers/serial.h	/^} portMode_t;$/;"	t	typeref:enum:portMode_t
portOptions_t	./drivers/serial.h	/^typedef enum portOptions_t {$/;"	g
portOptions_t	./drivers/serial.h	/^} portOptions_t;$/;"	t	typeref:enum:portOptions_t
portSharing_e	./io/serial.h	/^} portSharing_e;$/;"	t	typeref:enum:__anon69
pos_EW	./telemetry/hott.h	/^  uint8_t pos_EW;        \/\/#15 east = 0, west = 1$/;"	m	struct:HOTT_GPS_MSG_s
pos_EW_dm_H	./telemetry/hott.h	/^  uint8_t pos_EW_dm_H;   \/\/#17$/;"	m	struct:HOTT_GPS_MSG_s
pos_EW_dm_L	./telemetry/hott.h	/^  uint8_t pos_EW_dm_L;   \/\/#16 degree minutes ie. E9�25�9360$/;"	m	struct:HOTT_GPS_MSG_s
pos_EW_sec_H	./telemetry/hott.h	/^  uint8_t pos_EW_sec_H;  \/\/#19$/;"	m	struct:HOTT_GPS_MSG_s
pos_EW_sec_L	./telemetry/hott.h	/^  uint8_t pos_EW_sec_L;  \/\/#18 position seconds$/;"	m	struct:HOTT_GPS_MSG_s
pos_NS	./telemetry/hott.h	/^  uint8_t pos_NS;        \/\/#10 north = 0, south = 1$/;"	m	struct:HOTT_GPS_MSG_s
pos_NS_dm_H	./telemetry/hott.h	/^  uint8_t pos_NS_dm_H;   \/\/#12$/;"	m	struct:HOTT_GPS_MSG_s
pos_NS_dm_L	./telemetry/hott.h	/^  uint8_t pos_NS_dm_L;   \/\/#11 degree minutes ie N48�39�988$/;"	m	struct:HOTT_GPS_MSG_s
pos_NS_sec_H	./telemetry/hott.h	/^  uint8_t pos_NS_sec_H;  \/\/#14$/;"	m	struct:HOTT_GPS_MSG_s
pos_NS_sec_L	./telemetry/hott.h	/^  uint8_t pos_NS_sec_L;  \/\/#13 position seconds$/;"	m	struct:HOTT_GPS_MSG_s
posholdPID	./flight/navigation.c	/^static PID posholdPID[2];$/;"	v	file:
posholdPID_PARAM	./flight/navigation.c	/^static PID_PARAM posholdPID_PARAM;$/;"	v	file:
poshold_ratePID	./flight/navigation.c	/^static PID poshold_ratePID[2];$/;"	v	file:
poshold_ratePID_PARAM	./flight/navigation.c	/^static PID_PARAM poshold_ratePID_PARAM;$/;"	v	file:
position_DOP	./io/gps.c	/^    uint16_t position_DOP;$/;"	m	struct:__anon86	file:
position_accuracy_3d	./io/gps.c	/^    uint32_t position_accuracy_3d;$/;"	m	struct:__anon86	file:
posllh	./io/gps.c	/^    ubx_nav_posllh posllh;$/;"	m	union:__anon93	file:
ppmAvoidPWMTimerClash	./drivers/pwm_rx.c	/^void ppmAvoidPWMTimerClash(const timerHardware_t *timerHardwarePtr, TIM_TypeDef *sharedPwmTimer)$/;"	f
ppmCountShift	./drivers/pwm_rx.c	/^static uint8_t ppmCountShift = 0;$/;"	v	file:
ppmDev	./drivers/pwm_rx.c	/^ppmDevice_t ppmDev;$/;"	v
ppmDevice	./drivers/pwm_rx.c	/^typedef struct ppmDevice {$/;"	s	file:
ppmDevice_t	./drivers/pwm_rx.c	/^} ppmDevice_t;$/;"	t	typeref:struct:ppmDevice	file:
ppmEdgeCallback	./drivers/pwm_rx.c	/^static void ppmEdgeCallback(timerCCHandlerRec_t* cbRec, captureCompare_t capture)$/;"	f	file:
ppmFrameCount	./drivers/pwm_rx.c	/^static uint8_t ppmFrameCount = 0;$/;"	v	file:
ppmInConfig	./drivers/pwm_rx.c	/^void ppmInConfig(const timerHardware_t *timerHardwarePtr)$/;"	f
ppmInit	./drivers/pwm_rx.c	/^static void ppmInit(void)$/;"	f	file:
ppmOverflowCallback	./drivers/pwm_rx.c	/^static void ppmOverflowCallback(timerOvrHandlerRec_t* cbRec, captureCompare_t capture)$/;"	f	file:
prRes	./io/gps.c	/^    int32_t prRes;              \/\/ Pseudo range residual in centimetres$/;"	m	struct:__anon88	file:
preamble1	./io/gps.c	/^    uint8_t preamble1;$/;"	m	struct:__anon83	file:
preamble2	./io/gps.c	/^    uint8_t preamble2;$/;"	m	struct:__anon83	file:
predict	./blackbox/blackbox.c	/^    uint8_t predict;$/;"	m	struct:blackboxConditionalFieldDefinition_t	file:
predict	./blackbox/blackbox.c	/^    uint8_t predict;$/;"	m	struct:blackboxSimpleFieldDefinition_t	file:
prepareForNextRxByte	./drivers/serial_softserial.c	/^void prepareForNextRxByte(softSerial_t *softSerial)$/;"	f
pressure	./telemetry/hott.h	/^    uint8_t pressure;            \/\/#42 Pressure up to 16bar. 0,1bar scale. 20 = 2bar$/;"	m	struct:HOTT_GAM_MSG_s
previousTime	./drivers/pwm_rx.c	/^    uint32_t previousTime;$/;"	m	struct:ppmDevice	file:
previousTime	./mw.c	/^uint32_t previousTime = 0;$/;"	v
printSectionBreak	./io/serial_cli.c	1058;"	d	file:
printf	./common/printf.h	119;"	d
printfSerialPort	./common/printf.c	/^static serialPort_t *printfSerialPort;$/;"	v	file:
printfSupportInit	./common/printf.c	/^void printfSupportInit(void)$/;"	f
priority	./drivers/timer.c	/^    uint8_t priority;$/;"	m	struct:__anon52	file:
priority	./io/beeper.c	/^    uint8_t priority; \/\/ 0 = Highest$/;"	m	struct:beeperTableEntry_s	file:
processBinaryModeRequest	./telemetry/hott.c	/^static void processBinaryModeRequest(uint8_t address) {$/;"	f	file:
processChannelRangeArgs	./io/serial_cli.c	/^static char *processChannelRangeArgs(char *ptr, channelRange_t *range, uint8_t *validArgumentCount)$/;"	f	file:
processDataDrivenRx	./rx/rx.c	/^static void processDataDrivenRx(void)$/;"	f	file:
processInCommand	./io/serial_msp.c	/^static bool processInCommand(void)$/;"	f	file:
processLoopback	./main.c	/^void processLoopback(void) {$/;"	f
processLoopback	./main.c	516;"	d	file:
processNonDataDrivenRx	./rx/rx.c	/^static void processNonDataDrivenRx(void)$/;"	f	file:
processOutCommand	./io/serial_msp.c	/^static bool processOutCommand(uint8_t cmdMSP)$/;"	f	file:
processRcAdjustments	./io/rc_controls.c	/^void processRcAdjustments(controlRateConfig_t *controlRateConfig, rxConfig_t *rxConfig)$/;"	f
processRcStickPositions	./io/rc_controls.c	/^void processRcStickPositions(rxConfig_t *rxConfig, throttleStatus_e throttleStatus, bool retarded_arm, bool disarm_kill_switch)$/;"	f
processRx	./mw.c	/^void processRx(void)$/;"	f
processRxChannels	./rx/rx.c	/^static void processRxChannels(void)$/;"	f	file:
processRxState	./drivers/serial_softserial.c	/^void processRxState(softSerial_t *softSerial)$/;"	f
processTxState	./drivers/serial_softserial.c	/^void processTxState(softSerial_t *softSerial)$/;"	f
profile	./config/config_master.h	/^    profile_t profile[MAX_PROFILE_COUNT];$/;"	m	struct:master_t
profile_s	./config/config_profile.h	/^typedef struct profile_s {$/;"	s
profile_t	./config/config_profile.h	/^} profile_t;$/;"	t	typeref:struct:profile_s
provider	./io/gps.h	/^    gpsProvider_e provider;$/;"	m	struct:gpsConfig_s
pterm_cut_hz	./flight/pid.h	/^    uint8_t pterm_cut_hz;                   \/\/ Used for fitlering Pterm noise on noisy frames$/;"	m	struct:pidProfile_s
ptr	./io/serial_cli.c	/^    void *ptr;$/;"	m	struct:__anon100	file:
pulseIndex	./drivers/pwm_rx.c	/^    uint8_t  pulseIndex;$/;"	m	struct:ppmDevice	file:
putcf	./common/printf.c	/^typedef void (*putcf) (void *, char);$/;"	t	file:
putchw	./common/printf.c	/^static int putchw(void *putp, putcf putf, int n, char z, char *bf)$/;"	f	file:
putcp	./common/printf.c	/^static void putcp(void *p, char c)$/;"	f	file:
pwm	./telemetry/hott.h	/^    uint8_t pwm;            \/\/#33 PWM$/;"	m	struct:HOTT_AIRESC_MSG_s
pwmBrushedMotorConfig	./drivers/pwm_output.c	/^void pwmBrushedMotorConfig(const timerHardware_t *timerHardware, uint8_t motorIndex, uint16_t motorPwmRate, uint16_t idlePulse)$/;"	f
pwmBrushlessMotorConfig	./drivers/pwm_output.c	/^void pwmBrushlessMotorConfig(const timerHardware_t *timerHardware, uint8_t motorIndex, uint16_t motorPwmRate, uint16_t idlePulse)$/;"	f
pwmCompleteOneshotMotorUpdate	./drivers/pwm_output.c	/^void pwmCompleteOneshotMotorUpdate(uint8_t motorCount)$/;"	f
pwmEdgeCallback	./drivers/pwm_rx.c	/^static void pwmEdgeCallback(timerCCHandlerRec_t *cbRec, captureCompare_t capture)$/;"	f	file:
pwmGPIOConfig	./drivers/pwm_output.c	/^static void pwmGPIOConfig(GPIO_TypeDef *gpio, uint32_t pin, GPIO_Mode mode)$/;"	f	file:
pwmGPIOConfig	./drivers/pwm_rx.c	/^static void pwmGPIOConfig(GPIO_TypeDef *gpio, uint32_t pin, GPIO_Mode mode)$/;"	f	file:
pwmICConfig	./drivers/pwm_rx.c	/^void pwmICConfig(TIM_TypeDef *tim, uint8_t channel, uint16_t polarity)$/;"	f
pwmInConfig	./drivers/pwm_rx.c	/^void pwmInConfig(const timerHardware_t *timerHardwarePtr, uint8_t channel)$/;"	f
pwmInit	./drivers/pwm_mapping.c	/^pwmOutputConfiguration_t *pwmInit(drv_pwm_config_t *init)$/;"	f
pwmInputMode_t	./drivers/pwm_rx.c	/^} pwmInputMode_t;$/;"	t	typeref:enum:__anon58	file:
pwmInputPort_t	./drivers/pwm_rx.c	/^} pwmInputPort_t;$/;"	t	typeref:struct:__anon59	file:
pwmInputPorts	./drivers/pwm_rx.c	/^static pwmInputPort_t pwmInputPorts[PWM_INPUT_PORT_COUNT];$/;"	v	file:
pwmOCConfig	./drivers/pwm_output.c	/^static void pwmOCConfig(TIM_TypeDef *tim, uint8_t channel, uint16_t value)$/;"	f	file:
pwmOneshotMotorConfig	./drivers/pwm_output.c	/^void pwmOneshotMotorConfig(const timerHardware_t *timerHardware, uint8_t motorIndex)$/;"	f
pwmOutConfig	./drivers/pwm_output.c	/^static pwmOutputPort_t *pwmOutConfig(const timerHardware_t *timerHardware, uint8_t mhz, uint16_t period, uint16_t value)$/;"	f	file:
pwmOutputConfiguration_s	./drivers/pwm_mapping.h	/^typedef struct pwmOutputConfiguration_s {$/;"	s
pwmOutputConfiguration_t	./drivers/pwm_mapping.h	/^} pwmOutputConfiguration_t;$/;"	t	typeref:struct:pwmOutputConfiguration_s
pwmOutputPort_t	./drivers/pwm_output.c	/^} pwmOutputPort_t;$/;"	t	typeref:struct:__anon39	file:
pwmOutputPorts	./drivers/pwm_output.c	/^static pwmOutputPort_t pwmOutputPorts[MAX_PWM_OUTPUT_PORTS];$/;"	v	file:
pwmOverflowCallback	./drivers/pwm_rx.c	/^static void pwmOverflowCallback(timerOvrHandlerRec_t* cbRec, captureCompare_t capture)$/;"	f	file:
pwmRead	./drivers/pwm_rx.c	/^uint16_t pwmRead(uint8_t channel)$/;"	f
pwmReadRawRC	./rx/pwm.c	/^static uint16_t pwmReadRawRC(rxRuntimeConfig_t *rxRuntimeConfigPtr, uint8_t chan)$/;"	f	file:
pwmRxInit	./drivers/pwm_rx.c	/^void pwmRxInit(inputFilteringMode_e initialInputFilteringMode)$/;"	f
pwmServoConfig	./drivers/pwm_output.c	/^void pwmServoConfig(const timerHardware_t *timerHardware, uint8_t servoIndex, uint16_t servoPwmRate, uint16_t servoCenterPulse)$/;"	f
pwmShutdownPulsesForAllMotors	./drivers/pwm_output.c	/^void pwmShutdownPulsesForAllMotors(uint8_t motorCount)$/;"	f
pwmWriteBrushed	./drivers/pwm_output.c	/^static void pwmWriteBrushed(uint8_t index, uint16_t value)$/;"	f	file:
pwmWriteFuncPtr	./drivers/pwm_output.c	/^typedef void (*pwmWriteFuncPtr)(uint8_t index, uint16_t value);  \/\/ function pointer used to write motors$/;"	t	file:
pwmWriteMotor	./drivers/pwm_output.c	/^void pwmWriteMotor(uint8_t index, uint16_t value)$/;"	f
pwmWritePtr	./drivers/pwm_output.c	/^    pwmWriteFuncPtr pwmWritePtr;$/;"	m	struct:__anon39	file:
pwmWriteServo	./drivers/pwm_output.c	/^void pwmWriteServo(uint8_t index, uint16_t value)$/;"	f
pwmWriteStandard	./drivers/pwm_output.c	/^static void pwmWriteStandard(uint8_t index, uint16_t value)$/;"	f	file:
quadrant_e	./io/ledstrip.c	/^} quadrant_e;$/;"	t	typeref:enum:__anon78	file:
quality	./io/gps.c	/^    uint8_t quality;            \/\/ Bitfield$/;"	m	struct:__anon88	file:
quickMedianFilter3	./common/maths.c	/^int32_t quickMedianFilter3(int32_t * v)$/;"	f
quickMedianFilter5	./common/maths.c	/^int32_t quickMedianFilter5(int32_t * v)$/;"	f
quickMedianFilter7	./common/maths.c	/^int32_t quickMedianFilter7(int32_t * v)$/;"	f
quickMedianFilter9	./common/maths.c	/^int32_t quickMedianFilter9(int32_t * v)$/;"	f
r	./common/color.h	/^    uint8_t r;$/;"	m	struct:rgbColor24bpp_s
range	./io/rc_controls.h	/^    channelRange_t range;$/;"	m	struct:adjustmentRange_s
range	./io/rc_controls.h	/^    channelRange_t range;$/;"	m	struct:modeActivationCondition_s
rate	./flight/mixer.h	/^    int8_t rate;                            \/\/ range [-100;+100] ; can be used to adjust a rate 0-100% and a direction$/;"	m	struct:servoParam_t
rate_error	./flight/navigation.c	/^static int16_t rate_error[2];$/;"	v	file:
rates	./io/rc_controls.h	/^    uint8_t rates[3];$/;"	m	struct:controlRateConfig_s
raw	./common/color.h	/^    uint8_t raw[RGB_COLOR_COMPONENT_COUNT];$/;"	m	union:__anon31
raw	./common/maths.h	/^    float raw[3];$/;"	m	union:__anon26
raw	./flight/imu.h	/^    int16_t raw[ANGLE_INDEX_COUNT];$/;"	m	union:__anon9
raw	./sensors/acceleration.h	/^    int16_t raw[2];$/;"	m	union:__anon114
raw	./sensors/sensors.h	/^    int16_t raw[3];$/;"	m	union:__anon120
rcAliasToAngleIndexMap	./flight/pid.c	/^const angle_index_t rcAliasToAngleIndexMap[] = { AI_ROLL, AI_PITCH };$/;"	v
rcChannelLetters	./rx/rx.c	/^const char rcChannelLetters[] = "AERT12345678abcdefgh";$/;"	v
rcCommand	./blackbox/blackbox.c	/^    int16_t rcCommand[4];$/;"	m	struct:blackboxMainState_t	file:
rcCommand	./io/rc_controls.c	/^int16_t rcCommand[4];           \/\/ interval [1000;2000] for THROTTLE and [-500;+500] for ROLL\/PITCH\/YAW$/;"	v
rcControlsConfig	./config/config_profile.h	/^    rcControlsConfig_t rcControlsConfig;$/;"	m	struct:profile_s
rcControlsConfig	./flight/altitudehold.c	/^static rcControlsConfig_t *rcControlsConfig;$/;"	v	file:
rcControlsConfig_s	./io/rc_controls.h	/^typedef struct rcControlsConfig_s {$/;"	s
rcControlsConfig_t	./io/rc_controls.h	/^} rcControlsConfig_t;$/;"	t	typeref:struct:rcControlsConfig_s
rcData	./rx/rx.c	/^int16_t rcData[MAX_SUPPORTED_RC_CHANNEL_COUNT];     \/\/ interval [1000;2000]$/;"	v
rcExpo8	./io/rc_controls.h	/^    uint8_t rcExpo8;$/;"	m	struct:controlRateConfig_s
rcFrameComplete	./rx/spektrum.c	/^static bool rcFrameComplete = false;$/;"	v	file:
rcModeActivationMask	./io/rc_controls.c	/^uint32_t rcModeActivationMask; \/\/ one bit per mode defined in boxId_e$/;"	v
rcRate8	./io/rc_controls.h	/^    uint8_t rcRate8;$/;"	m	struct:controlRateConfig_s
rcReadRawDataPtr	./rx/rx.h	/^typedef uint16_t (*rcReadRawDataPtr)(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan);        \/\/ used by receiver driver to return channel data$/;"	t
rcReadRawFunc	./rx/rx.c	/^static rcReadRawDataPtr rcReadRawFunc = NULL;  \/\/ receive data from default (pwm\/ppm) or additional (spek\/sbus\/?? receiver drivers)$/;"	v	file:
rcSampleIndex	./rx/rx.c	/^static uint8_t rcSampleIndex = 0;$/;"	v	file:
rcYawExpo8	./io/rc_controls.h	/^    uint8_t rcYawExpo8;$/;"	m	struct:controlRateConfig_s
rc_alias	./io/rc_controls.h	/^typedef enum rc_alias {$/;"	g
rc_alias_e	./io/rc_controls.h	/^} rc_alias_e;$/;"	t	typeref:enum:rc_alias
rcmap	./rx/rx.h	/^    uint8_t rcmap[MAX_MAPPABLE_RX_INPUTS];  \/\/ mapping of radio channels to internal RPYTA+ order$/;"	m	struct:rxConfig_s
read	./drivers/accgyro.h	/^    sensorReadFuncPtr read;                                 \/\/ read 3 axis data function$/;"	m	struct:acc_s
read	./drivers/accgyro.h	/^    sensorReadFuncPtr read;                                 \/\/ read 3 axis data function$/;"	m	struct:gyro_s
read	./drivers/compass.h	/^    sensorReadFuncPtr read;                                 \/\/ read 3 axis data function$/;"	m	struct:mag_s
read16	./io/serial_msp.c	/^static uint16_t read16(void)$/;"	f	file:
read32	./io/serial_msp.c	/^static uint32_t read32(void)$/;"	f	file:
read8	./io/serial_msp.c	/^static uint8_t read8(void)$/;"	f	file:
readEEPROM	./config/config.c	/^void readEEPROM(void)$/;"	f
readEEPROMAndNotify	./config/config.c	/^void readEEPROMAndNotify(void)$/;"	f
read_p	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t* read_p;$/;"	v	file:
reading	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t reading;$/;"	v	file:
reboot_character	./io/serial.h	/^    uint8_t reboot_character;               \/\/ which byte is used to reboot. Default 'R', could be changed carefully to something else.$/;"	m	struct:serialConfig_s
recalculateBarometerTotal	./sensors/barometer.c	/^static uint32_t recalculateBarometerTotal(uint8_t baroSampleCount, uint32_t pressureTotal, int32_t newPressureReading)$/;"	f	file:
receiveBuffer	./vcp/hw_config.c	/^uint8_t receiveBuffer[64];                                   \/\/ HJI$/;"	v
receiveErrors	./drivers/serial_softserial.c	/^    uint16_t         receiveErrors;$/;"	m	struct:softSerial_s	file:
receiveLength	./vcp/usb_endp.c	/^__IO uint32_t receiveLength;             \/\/ HJI$/;"	v
reconfigureAlignment	./sensors/initialisation.c	/^void reconfigureAlignment(sensorAlignmentConfig_t *sensorAlignmentConfig)$/;"	f
reevalulateLedConfig	./io/ledstrip.c	/^void reevalulateLedConfig(void)$/;"	f
reg	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t reg;$/;"	v	file:
registerExti15_10_CallbackHandler	./drivers/system.c	/^void registerExti15_10_CallbackHandler(extiCallbackHandler *fn)$/;"	f
releaseSharedTelemetryPorts	./mw.c	/^void releaseSharedTelemetryPorts(void) {$/;"	f
remotewakeupon	./vcp/usb_pwr.c	/^__IO uint32_t remotewakeupon = 0;$/;"	v
res	./io/gps.c	/^    uint8_t res;$/;"	m	struct:__anon85	file:
res	./io/gps.c	/^    uint8_t res;$/;"	m	struct:__anon86	file:
res2	./io/gps.c	/^    uint32_t res2;$/;"	m	struct:__anon86	file:
reserved2	./io/gps.c	/^    uint16_t reserved2;         \/\/ Reserved$/;"	m	struct:__anon89	file:
resetAccelerometerTrims	./config/config.c	/^static void resetAccelerometerTrims(flightDynamicsTrims_t *accelerometerTrims)$/;"	f	file:
resetAdjustmentStates	./io/rc_controls.c	/^void resetAdjustmentStates(void)$/;"	f
resetBarometerConfig	./config/config.c	/^void resetBarometerConfig(barometerConfig_t *barometerConfig)$/;"	f
resetBatteryConfig	./config/config.c	/^void resetBatteryConfig(batteryConfig_t *batteryConfig)$/;"	f
resetBuffers	./drivers/serial_softserial.c	/^static void resetBuffers(softSerial_t *softSerial)$/;"	f	file:
resetConf	./config/config.c	/^static void resetConf(void)$/;"	f	file:
resetControlRateConfig	./config/config.c	/^static void resetControlRateConfig(controlRateConfig_t *controlRateConfig) {$/;"	f	file:
resetDisplay	./io/display.c	/^void resetDisplay(void) {$/;"	f
resetEEPROM	./config/config.c	/^void resetEEPROM(void)$/;"	f
resetEscAndServoConfig	./config/config.c	/^void resetEscAndServoConfig(escAndServoConfig_t *escAndServoConfig)$/;"	f
resetFlight3DConfig	./config/config.c	/^void resetFlight3DConfig(flight3DConfig_t *flight3DConfig)$/;"	f
resetGpsProfile	./config/config.c	/^void resetGpsProfile(gpsProfile_t *gpsProfile)$/;"	f
resetMixerConfig	./config/config.c	/^void resetMixerConfig(mixerConfig_t *mixerConfig) {$/;"	f
resetMspPort	./io/serial_msp.c	/^static void resetMspPort(mspPort_t *mspPortToReset, serialPort_t *serialPort, mspPortUsage_e usage)$/;"	f	file:
resetPPMDataReceivedState	./drivers/pwm_rx.c	/^void resetPPMDataReceivedState(void)$/;"	f
resetPidProfile	./config/config.c	/^static void resetPidProfile(pidProfile_t *pidProfile)$/;"	f	file:
resetRcControlsConfig	./config/config.c	/^void resetRcControlsConfig(rcControlsConfig_t *rcControlsConfig) {$/;"	f
resetRollAndPitchTrims	./sensors/acceleration.c	/^void resetRollAndPitchTrims(rollAndPitchTrims_t *rollAndPitchTrims)$/;"	f
resetSensorAlignment	./config/config.c	/^void resetSensorAlignment(sensorAlignmentConfig_t *sensorAlignmentConfig)$/;"	f
resetSerialConfig	./config/config.c	/^void resetSerialConfig(serialConfig_t *serialConfig)$/;"	f
resetTelemetryConfig	./config/config.c	/^void resetTelemetryConfig(telemetryConfig_t *telemetryConfig)$/;"	f
reset_PID	./flight/navigation.c	/^static void reset_PID(PID *pid)$/;"	f	file:
restorePids	./flight/autotune.c	/^void restorePids(pidProfile_t *pidProfileToTune)$/;"	f
retarded_arm	./config/config_master.h	/^    uint8_t retarded_arm;                   \/\/ allow disarm\/arm on throttle down + roll left\/right$/;"	m	struct:master_t
revisionCode	./drivers/accgyro.h	/^    char revisionCode;                                      \/\/ a revision code for the sensor, if known$/;"	m	struct:acc_s
rgb	./common/color.h	/^    struct rgbColor24bpp_s rgb;$/;"	m	union:__anon31	typeref:struct:__anon31::rgbColor24bpp_s
rgbColor24bpp_s	./common/color.h	/^struct rgbColor24bpp_s {$/;"	s
rgbColor24bpp_t	./common/color.h	/^} rgbColor24bpp_t;$/;"	t	typeref:union:__anon31
rise	./drivers/pwm_rx.c	/^    captureCompare_t rise;$/;"	m	struct:__anon59	file:
rising	./blackbox/blackbox_fielddefs.h	/^    uint8_t rising;$/;"	m	struct:flightLogEvent_autotuneCycleStart_t
rising	./flight/autotune.c	/^static bool rising;$/;"	v	file:
roll	./common/maths.h	/^    float roll;$/;"	m	struct:fp_angles
roll	./flight/mixer.h	/^    float roll;$/;"	m	struct:motorMixer_t
roll	./sensors/acceleration.h	/^    int16_t roll;$/;"	m	struct:rollAndPitchTrims_s
roll	./sensors/sensors.h	/^    int16_t roll;$/;"	m	struct:int16_flightDynamicsTrims_s
rollAndPitchInclination_s	./flight/imu.h	/^typedef struct rollAndPitchInclination_s {$/;"	s
rollAndPitchInclination_t	./flight/imu.h	/^} rollAndPitchInclination_t;$/;"	t	typeref:union:__anon9
rollAndPitchInclination_t_def	./flight/imu.h	/^} rollAndPitchInclination_t_def;$/;"	t	typeref:struct:rollAndPitchInclination_s
rollAndPitchTrims_s	./sensors/acceleration.h	/^typedef struct rollAndPitchTrims_s {$/;"	s
rollAndPitchTrims_t	./sensors/acceleration.h	/^} rollAndPitchTrims_t;$/;"	t	typeref:union:__anon114
rollAndPitchTrims_t_def	./sensors/acceleration.h	/^} rollAndPitchTrims_t_def;$/;"	t	typeref:struct:rollAndPitchTrims_s
rollDeciDegrees	./flight/imu.h	/^    int16_t rollDeciDegrees;$/;"	m	struct:rollAndPitchInclination_s
rollDegrees	./sensors/boardalignment.h	/^    int16_t rollDegrees;$/;"	m	struct:boardAlignment_s
rotateV	./common/maths.c	/^void rotateV(struct fp_vector *v, fp_angles_t *delta)$/;"	f
rpm2_H	./telemetry/hott.h	/^    uint8_t rpm2_H;              \/\/#40$/;"	m	struct:HOTT_GAM_MSG_s
rpm2_L	./telemetry/hott.h	/^    uint8_t rpm2_L;              \/\/#39 RPM in 10 RPM steps. 300 = 3000rpm$/;"	m	struct:HOTT_GAM_MSG_s
rpm_H	./telemetry/hott.h	/^    uint8_t rpm_H;               \/\/#23$/;"	m	struct:HOTT_GAM_MSG_s
rpm_H	./telemetry/hott.h	/^    uint8_t rpm_H;               \/\/#39$/;"	m	struct:HOTT_EAM_MSG_s
rpm_H	./telemetry/hott.h	/^    uint8_t rpm_H;          \/\/#20$/;"	m	struct:HOTT_AIRESC_MSG_s
rpm_L	./telemetry/hott.h	/^    uint8_t rpm_L;               \/\/#22 RPM in 10 RPM steps. 300 = 3000rpm$/;"	m	struct:HOTT_GAM_MSG_s
rpm_L	./telemetry/hott.h	/^    uint8_t rpm_L;               \/\/#38 RPM. Steps: 10 U\/min$/;"	m	struct:HOTT_EAM_MSG_s
rpm_L	./telemetry/hott.h	/^    uint8_t rpm_L;          \/\/#19 RPM in 10U\/min steps$/;"	m	struct:HOTT_AIRESC_MSG_s
rpm_max_H	./telemetry/hott.h	/^    uint8_t rpm_max_H;      \/\/#22$/;"	m	struct:HOTT_AIRESC_MSG_s
rpm_max_L	./telemetry/hott.h	/^    uint8_t rpm_max_L;      \/\/#21 RPM max$/;"	m	struct:HOTT_AIRESC_MSG_s
rssi	./blackbox/blackbox.c	/^    uint16_t rssi;$/;"	m	struct:blackboxMainState_t	file:
rssi	./rx/rx.c	/^uint16_t rssi = 0;                  \/\/ range: [0;1023]$/;"	v
rssi_channel	./rx/rx.h	/^    uint8_t rssi_channel;$/;"	m	struct:rxConfig_s
rssi_ppm_invert	./rx/rx.h	/^    uint8_t rssi_ppm_invert;$/;"	m	struct:rxConfig_s
rssi_scale	./rx/rx.h	/^    uint8_t rssi_scale;$/;"	m	struct:rxConfig_s
rxBitIndex	./drivers/serial_softserial.c	/^    uint8_t          rxBitIndex;$/;"	m	struct:softSerial_s	file:
rxBuffer	./drivers/serial.h	/^    volatile uint8_t *rxBuffer;$/;"	m	struct:serialPort
rxBuffer	./drivers/serial_softserial.c	/^    volatile uint8_t rxBuffer[SOFTSERIAL_BUFFER_SIZE];$/;"	m	struct:softSerial_s	file:
rxBufferHead	./drivers/serial.h	/^    uint32_t rxBufferHead;$/;"	m	struct:serialPort
rxBufferSize	./drivers/serial.h	/^    uint32_t rxBufferSize;$/;"	m	struct:serialPort
rxBufferTail	./drivers/serial.h	/^    uint32_t rxBufferTail;$/;"	m	struct:serialPort
rxCheckPulse	./rx/rx.c	/^STATIC_UNIT_TESTED void rxCheckPulse(uint8_t channel, uint16_t pulseDuration)$/;"	f
rxConfig	./config/config_master.h	/^    rxConfig_t rxConfig;$/;"	m	struct:master_t
rxConfig	./flight/failsafe.c	/^static rxConfig_t *rxConfig;$/;"	v	file:
rxConfig	./flight/mixer.c	/^static rxConfig_t *rxConfig;$/;"	v	file:
rxConfig	./io/display.c	/^static rxConfig_t *rxConfig;$/;"	v	file:
rxConfig	./rx/rx.c	/^static rxConfig_t *rxConfig;$/;"	v	file:
rxConfig_s	./rx/rx.h	/^typedef struct rxConfig_s {$/;"	s
rxConfig_t	./rx/rx.h	/^} rxConfig_t;$/;"	t	typeref:struct:rxConfig_s
rxDMAChannel	./drivers/serial_uart.h	/^    DMA_Channel_TypeDef *rxDMAChannel;$/;"	m	struct:__anon36
rxDMAIrq	./drivers/serial_uart.h	/^    uint32_t rxDMAIrq;$/;"	m	struct:__anon36
rxDMAPeripheralBaseAddr	./drivers/serial_uart.h	/^    uint32_t rxDMAPeripheralBaseAddr;$/;"	m	struct:__anon36
rxDMAPos	./drivers/serial_uart.h	/^    uint32_t rxDMAPos;$/;"	m	struct:__anon36
rxDataReceived	./rx/rx.c	/^static bool rxDataReceived = false;$/;"	v	file:
rxEdge	./drivers/serial_softserial.c	/^    uint8_t          rxEdge;$/;"	m	struct:softSerial_s	file:
rxInit	./rx/rx.c	/^void rxInit(rxConfig_t *rxConfig)$/;"	f
rxIsReceivingSignal	./rx/rx.c	/^bool rxIsReceivingSignal(void)$/;"	f
rxLastLeadingEdgeAtBitIndex	./drivers/serial_softserial.c	/^    uint8_t          rxLastLeadingEdgeAtBitIndex;$/;"	m	struct:softSerial_s	file:
rxMspFrameComplete	./rx/msp.c	/^bool rxMspFrameComplete(void)$/;"	f
rxMspFrameDone	./rx/msp.c	/^static bool rxMspFrameDone = false;$/;"	v	file:
rxMspFrameRecieve	./rx/msp.c	/^void rxMspFrameRecieve(void)$/;"	f
rxMspInit	./rx/msp.c	/^void rxMspInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
rxMspReadRawRC	./rx/msp.c	/^static uint16_t rxMspReadRawRC(rxRuntimeConfig_t *rxRuntimeConfigPtr, uint8_t chan)$/;"	f	file:
rxPwmInit	./rx/pwm.c	/^void rxPwmInit(rxRuntimeConfig_t *rxRuntimeConfigPtr, rcReadRawDataPtr *callback)$/;"	f
rxRuntimeConfig	./rx/rx.c	/^rxRuntimeConfig_t rxRuntimeConfig;$/;"	v
rxRuntimeConfigPtr	./rx/spektrum.c	/^static rxRuntimeConfig_t *rxRuntimeConfigPtr;$/;"	v	file:
rxRuntimeConfig_s	./rx/rx.h	/^typedef struct rxRuntimeConfig_s {$/;"	s
rxRuntimeConfig_t	./rx/rx.h	/^} rxRuntimeConfig_t;$/;"	t	typeref:struct:rxRuntimeConfig_s
rxSignalReceived	./rx/rx.c	/^static bool rxSignalReceived = false;$/;"	v	file:
rxTimerHardware	./drivers/serial_softserial.c	/^    const timerHardware_t *rxTimerHardware;$/;"	m	struct:softSerial_s	file:
rxUpdateAt	./rx/rx.c	/^static uint32_t rxUpdateAt = 0;$/;"	v	file:
rx_max_usec	./rx/rx.h	/^    uint16_t rx_max_usec;$/;"	m	struct:rxConfig_s
rx_min_usec	./rx/rx.h	/^    uint16_t rx_min_usec;$/;"	m	struct:rxConfig_s
s	./common/color.h	/^    uint8_t s; \/\/ 0 - 255$/;"	m	struct:hsvColor_s
s_struct	./io/serial_msp.c	/^static void s_struct(uint8_t *cb, uint8_t siz)$/;"	f	file:
sampleTime	./drivers/adc.h	/^    uint8_t sampleTime;$/;"	m	struct:adc_config_t
satellites	./io/gps.c	/^    uint8_t satellites;$/;"	m	struct:__anon86	file:
saveConfigAndNotify	./config/config.c	/^void saveConfigAndNotify(void)$/;"	f
sbasMode	./io/gps.h	/^    sbasMode_e sbasMode;$/;"	m	struct:gpsConfig_s
sbasMode_e	./io/gps.h	/^} sbasMode_e;$/;"	t	typeref:enum:__anon62
sbspHeadSerialError	./io/serial_msp.c	/^static void sbspHeadSerialError(uint8_t responseBodySize)$/;"	f	file:
sbspHeadSerialReply	./io/serial_msp.c	/^static void sbspHeadSerialReply(uint8_t responseBodySize)$/;"	f	file:
sbspHeadSerialResponse	./io/serial_msp.c	/^static void sbspHeadSerialResponse(uint8_t err, uint8_t responseBodySize)$/;"	f	file:
sbspProcessCommand	./io/serial_msp.c	/^static bool sbspProcessCommand(void)$/;"	f	file:
sbspProcessReceivedCommand	./io/serial_msp.c	/^static void sbspProcessReceivedCommand() {$/;"	f	file:
sbusChannelData	./rx/sbus.c	/^static uint32_t sbusChannelData[SBUS_MAX_CHANNEL];$/;"	v	file:
sbusDataReceive	./rx/sbus.c	/^static void sbusDataReceive(uint16_t c)$/;"	f	file:
sbusFrame	./rx/sbus.c	/^static sbusFrame_t sbusFrame;$/;"	v	file:
sbusFrameDone	./rx/sbus.c	/^static bool sbusFrameDone = false;$/;"	v	file:
sbusFrameStatus	./rx/sbus.c	/^uint8_t sbusFrameStatus(void)$/;"	f
sbusFrame_s	./rx/sbus.c	/^struct sbusFrame_s {$/;"	s	file:
sbusFrame_t	./rx/sbus.c	/^} sbusFrame_t;$/;"	t	typeref:union:__anon1	file:
sbusInit	./rx/sbus.c	/^bool sbusInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
sbusReadRawRC	./rx/sbus.c	/^static uint16_t sbusReadRawRC(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)$/;"	f	file:
sbusStateFlags	./rx/sbus.c	/^static uint16_t sbusStateFlags = 0;$/;"	v	file:
scale	./drivers/accgyro.h	/^    float scale;                                            \/\/ scalefactor$/;"	m	struct:gyro_s
scaleLedValue	./drivers/light_ws2811strip.c	/^void scaleLedValue(uint16_t index, const uint8_t scalePercent)$/;"	f
scaleRange	./common/maths.c	/^int scaleRange(int x, int srcMin, int srcMax, int destMin, int destMax) {$/;"	f
scl	./drivers/bus_i2c_stm32f10x.c	/^    uint16_t scl;$/;"	m	struct:i2cDevice_t	file:
sda	./drivers/bus_i2c_stm32f10x.c	/^    uint16_t sda;$/;"	m	struct:i2cDevice_t	file:
secondPeakAngle	./blackbox/blackbox_fielddefs.h	/^    uint16_t firstPeakAngle, secondPeakAngle;$/;"	m	struct:flightLogEvent_autotuneTargets_t
secondPeakAngle	./flight/autotune.c	/^static float firstPeakAngle, secondPeakAngle; \/\/ in degrees$/;"	v	file:
sectionBreak	./io/serial_cli.c	/^static const char* const sectionBreak = "\\r\\n";$/;"	v	file:
sectionTimes	./debug.c	/^uint32_t sectionTimes[2][4];$/;"	v
sectorSize	./drivers/flash.h	/^    uint32_t sectorSize; \/\/ This is just pagesPerSector * pageSize$/;"	m	struct:flashGeometry_t
sectors	./drivers/flash.h	/^    uint16_t sectors; \/\/ Count of the number of erasable blocks on the device$/;"	m	struct:flashGeometry_t
selectConfig	./io/rc_controls.h	/^    adjustmentSelectConfig_t selectConfig;$/;"	m	union:adjustmentConfig_u
selectMPU6050Config	./sensors/initialisation.c	/^const mpu6050Config_t *selectMPU6050Config(void)$/;"	f
sendAccel	./telemetry/frsky.c	/^static void sendAccel(void)$/;"	f	file:
sendAmperage	./telemetry/frsky.c	/^static void sendAmperage(void)$/;"	f	file:
sendBaro	./telemetry/frsky.c	/^static void sendBaro(void)$/;"	f	file:
sendDataHead	./telemetry/frsky.c	/^static void sendDataHead(uint8_t id)$/;"	f	file:
sendFakeLatLong	./telemetry/frsky.c	/^static void sendFakeLatLong(void)$/;"	f	file:
sendFakeLatLongThatAllowsHeadingDisplay	./telemetry/frsky.c	/^static void sendFakeLatLongThatAllowsHeadingDisplay(void)$/;"	f	file:
sendFieldDefinition	./blackbox/blackbox.c	/^static bool sendFieldDefinition(char mainFrameChar, char deltaFrameChar, const void *fieldDefinitions,$/;"	f	file:
sendFuelLevel	./telemetry/frsky.c	/^static void sendFuelLevel(void)$/;"	f	file:
sendGPSLatLong	./telemetry/frsky.c	/^static void sendGPSLatLong(void)$/;"	f	file:
sendGpsAltitude	./telemetry/frsky.c	/^static void sendGpsAltitude(void)$/;"	f	file:
sendHeading	./telemetry/frsky.c	/^static void sendHeading(void)$/;"	f	file:
sendLatLong	./telemetry/frsky.c	/^static void sendLatLong(int32_t coord[2])$/;"	f	file:
sendLength	./vcp/hw_config.c	/^uint32_t sendLength;                                          \/\/ HJI$/;"	v
sendMspTelemetry	./io/serial_msp.c	/^void sendMspTelemetry(void)$/;"	f
sendSatalliteSignalQualityAsTemperature2	./telemetry/frsky.c	/^static void sendSatalliteSignalQualityAsTemperature2(void)$/;"	f	file:
sendSpeed	./telemetry/frsky.c	/^static void sendSpeed(void)$/;"	f	file:
sendTelemetryTail	./telemetry/frsky.c	/^static void sendTelemetryTail(void)$/;"	f	file:
sendTemperature1	./telemetry/frsky.c	/^static void sendTemperature1(void)$/;"	f	file:
sendThrottleOrBatterySizeAsRpm	./telemetry/frsky.c	/^static void sendThrottleOrBatterySizeAsRpm(rxConfig_t *rxConfig, uint16_t deadband3d_throttle)$/;"	f	file:
sendTime	./telemetry/frsky.c	/^static void sendTime(void)$/;"	f	file:
sendVario	./telemetry/frsky.c	/^static void sendVario(void)$/;"	f	file:
sendVoltage	./telemetry/frsky.c	/^static void sendVoltage(void)$/;"	f	file:
sendVoltageAmp	./telemetry/frsky.c	/^static void sendVoltageAmp(void)$/;"	f	file:
sensorAlignmentConfig	./config/config_master.h	/^    sensorAlignmentConfig_t sensorAlignmentConfig;$/;"	m	struct:master_t
sensorAlignmentConfig_s	./sensors/sensors.h	/^typedef struct sensorAlignmentConfig_s {$/;"	s
sensorAlignmentConfig_t	./sensors/sensors.h	/^} sensorAlignmentConfig_t;$/;"	t	typeref:struct:sensorAlignmentConfig_s
sensorHardwareNames	./io/serial_cli.c	/^static const char * const sensorHardwareNames[4][11] = {$/;"	v	file:
sensorIndex_e	./sensors/sensors.h	/^} sensorIndex_e;$/;"	t	typeref:enum:__anon119
sensorInitFuncPtr	./drivers/sensor.h	/^typedef void (*sensorInitFuncPtr)(void);                    \/\/ sensor init prototype$/;"	t
sensorReadFuncPtr	./drivers/sensor.h	/^typedef void (*sensorReadFuncPtr)(int16_t *data);           \/\/ sensor read and align prototype$/;"	t
sensorTypeNames	./io/serial_cli.c	/^static const char * const sensorTypeNames[] = {$/;"	v	file:
sensor_align_e	./sensors/sensors.h	/^} sensor_align_e;$/;"	t	typeref:enum:__anon122
sensor_id	./telemetry/hott.h	/^    uint8_t sensor_id;           \/\/#04 constant value 0x90$/;"	m	struct:HOTT_VARIO_MSG_s
sensor_id	./telemetry/hott.h	/^    uint8_t sensor_id;           \/\/#04 constant value 0xd0$/;"	m	struct:HOTT_GAM_MSG_s
sensor_id	./telemetry/hott.h	/^    uint8_t sensor_id;           \/\/#04 constant value 0xe0$/;"	m	struct:HOTT_EAM_MSG_s
sensor_id	./telemetry/hott.h	/^    uint8_t sensor_id;      \/\/#04 constant value 0xc0$/;"	m	struct:HOTT_AIRESC_MSG_s
sensor_id	./telemetry/hott.h	/^  uint8_t sensor_id;     \/\/#04 constant (?) value 0xa0$/;"	m	struct:HOTT_GPS_MSG_s
sensors	./config/runtime_config.c	/^bool sensors(uint32_t mask)$/;"	f
sensorsAutodetect	./sensors/initialisation.c	/^bool sensorsAutodetect(sensorAlignmentConfig_t *sensorAlignmentConfig, uint16_t gyroLpf, uint8_t accHardwareToUse, uint8_t magHardwareToUse, int16_t magDeclinationFromConfig)$/;"	f
sensorsClear	./config/runtime_config.c	/^void sensorsClear(uint32_t mask)$/;"	f
sensorsMask	./config/runtime_config.c	/^uint32_t sensorsMask(void)$/;"	f
sensorsSet	./config/runtime_config.c	/^void sensorsSet(uint32_t mask)$/;"	f
sensors_e	./sensors/sensors.h	/^} sensors_e;$/;"	t	typeref:enum:__anon121
sequence	./io/beeper.c	/^    const uint8_t *sequence;$/;"	m	struct:beeperTableEntry_s	file:
serialBudget	./blackbox/blackbox.c	/^        int serialBudget;$/;"	m	union:__anon33::__anon34	file:
serialConfig	./config/config_master.h	/^    serialConfig_t serialConfig;$/;"	m	struct:master_t
serialConfig	./io/gps.c	/^static serialConfig_t *serialConfig;$/;"	v	file:
serialConfig	./io/serial.c	/^static serialConfig_t *serialConfig;$/;"	v	file:
serialConfig_s	./io/serial.h	/^typedef struct serialConfig_s {$/;"	s
serialConfig_t	./io/serial.h	/^} serialConfig_t;$/;"	t	typeref:struct:serialConfig_s
serialFindPortConfiguration	./io/serial.c	/^serialPortConfig_t *serialFindPortConfiguration(serialPortIdentifier_e identifier)$/;"	f
serialGetAvailablePortCount	./io/serial.c	/^uint8_t serialGetAvailablePortCount(void)$/;"	f
serialGetBaudRate	./drivers/serial.c	/^uint32_t serialGetBaudRate(serialPort_t *instance)$/;"	f
serialICConfig	./drivers/serial_softserial.c	/^static void serialICConfig(TIM_TypeDef *tim, uint8_t channel, uint16_t polarity)$/;"	f	file:
serialInit	./io/serial.c	/^void serialInit(serialConfig_t *initialSerialConfig, bool softserialEnabled)$/;"	f
serialInputPortConfig	./drivers/serial_softserial.c	/^void serialInputPortConfig(const timerHardware_t *timerHardwarePtr)$/;"	f
serialIsPortAvailable	./io/serial.c	/^bool serialIsPortAvailable(serialPortIdentifier_e identifier)$/;"	f
serialOutputPortConfig	./drivers/serial_softserial.c	/^static void serialOutputPortConfig(const timerHardware_t *timerHardwarePtr)$/;"	f	file:
serialPort	./drivers/serial.h	/^typedef struct serialPort {$/;"	s
serialPort	./io/serial.h	/^    serialPort_t *serialPort;$/;"	m	struct:serialPortUsage_s
serialPortConfig_s	./io/serial.h	/^typedef struct serialPortConfig_s {$/;"	s
serialPortConfig_t	./io/serial.h	/^} serialPortConfig_t;$/;"	t	typeref:struct:serialPortConfig_s
serialPortCount	./io/serial.c	/^static uint8_t serialPortCount;$/;"	v	file:
serialPortFunction_e	./io/serial.h	/^} serialPortFunction_e;$/;"	t	typeref:enum:__anon70
serialPortIdentifier_e	./io/serial.h	/^} serialPortIdentifier_e;$/;"	t	typeref:enum:__anon72
serialPortIdentifiers	./io/serial.c	/^const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT] = {$/;"	v
serialPortUsageList	./io/serial.c	/^static serialPortUsage_t serialPortUsageList[SERIAL_PORT_COUNT];$/;"	v	file:
serialPortUsage_s	./io/serial.h	/^typedef struct serialPortUsage_s {$/;"	s
serialPortUsage_t	./io/serial.h	/^} serialPortUsage_t;$/;"	t	typeref:struct:serialPortUsage_s
serialPortVTable	./drivers/serial.h	/^struct serialPortVTable {$/;"	s
serialPort_t	./drivers/serial.h	/^} serialPort_t;$/;"	t	typeref:struct:serialPort
serialPrint	./drivers/serial.c	/^void serialPrint(serialPort_t *instance, const char *str)$/;"	f
serialRead	./drivers/serial.c	/^uint8_t serialRead(serialPort_t *instance)$/;"	f
serialRead	./drivers/serial.h	/^    uint8_t (*serialRead)(serialPort_t *instance);$/;"	m	struct:serialPortVTable
serialReceiveCallbackPtr	./drivers/serial.h	/^typedef void (*serialReceiveCallbackPtr)(uint16_t data);   \/\/ used by serial drivers to return frames to app$/;"	t
serialRemovePort	./io/serial.c	/^void serialRemovePort(serialPortIdentifier_e identifier)$/;"	f
serialRxFrameStatus	./rx/rx.c	/^uint8_t serialRxFrameStatus(rxConfig_t *rxConfig)$/;"	f
serialRxInit	./rx/rx.c	/^void serialRxInit(rxConfig_t *rxConfig)$/;"	f
serialSetBaudRate	./drivers/serial.c	/^void serialSetBaudRate(serialPort_t *instance, uint32_t baudRate)$/;"	f
serialSetBaudRate	./drivers/serial.h	/^    void (*serialSetBaudRate)(serialPort_t *instance, uint32_t baudRate);$/;"	m	struct:serialPortVTable
serialSetMode	./drivers/serial.c	/^void serialSetMode(serialPort_t *instance, portMode_t mode)$/;"	f
serialTimerRxConfig	./drivers/serial_softserial.c	/^static void serialTimerRxConfig(const timerHardware_t *timerHardwarePtr, uint8_t reference, portOptions_t options)$/;"	f	file:
serialTimerTxConfig	./drivers/serial_softserial.c	/^static void serialTimerTxConfig(const timerHardware_t *timerHardwarePtr, uint8_t reference, uint32_t baud)$/;"	f	file:
serialTotalBytesWaiting	./drivers/serial.c	/^uint8_t serialTotalBytesWaiting(serialPort_t *instance)$/;"	f
serialTotalBytesWaiting	./drivers/serial.h	/^    uint8_t (*serialTotalBytesWaiting)(serialPort_t *instance);$/;"	m	struct:serialPortVTable
serialUSART1	./drivers/serial_uart_stm32f10x.c	/^uartPort_t *serialUSART1(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialUSART1	./drivers/serial_uart_stm32f30x.c	/^uartPort_t *serialUSART1(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialUSART2	./drivers/serial_uart_stm32f10x.c	/^uartPort_t *serialUSART2(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialUSART2	./drivers/serial_uart_stm32f30x.c	/^uartPort_t *serialUSART2(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialUSART3	./drivers/serial_uart_stm32f10x.c	/^uartPort_t *serialUSART3(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialUSART3	./drivers/serial_uart_stm32f30x.c	/^uartPort_t *serialUSART3(uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
serialWrite	./drivers/serial.c	/^void serialWrite(serialPort_t *instance, uint8_t ch)$/;"	f
serialWrite	./drivers/serial.h	/^    void (*serialWrite)(serialPort_t *instance, uint8_t ch);$/;"	m	struct:serialPortVTable
serialize16	./io/serial_msp.c	/^static void serialize16(uint16_t a)$/;"	f	file:
serialize16	./telemetry/frsky.c	/^static void serialize16(int16_t a)$/;"	f	file:
serialize32	./io/serial_msp.c	/^static void serialize32(uint32_t a)$/;"	f	file:
serialize8	./io/serial_msp.c	/^static void serialize8(uint8_t a)$/;"	f	file:
serializeBoxNamesReply	./io/serial_msp.c	/^static void serializeBoxNamesReply(void)$/;"	f	file:
serializeDataflashReadReply	./io/serial_msp.c	/^static void serializeDataflashReadReply(uint32_t address, uint8_t size)$/;"	f	file:
serializeDataflashSummaryReply	./io/serial_msp.c	/^static void serializeDataflashSummaryReply(void)$/;"	f	file:
serializeFrsky	./telemetry/frsky.c	/^static void serializeFrsky(uint8_t data)$/;"	f	file:
serializeNames	./io/serial_msp.c	/^static void serializeNames(const char *s)$/;"	f	file:
serialrxFrameState_t	./rx/rx.h	/^} serialrxFrameState_t;$/;"	t	typeref:enum:__anon2
serialrx_provider	./rx/rx.h	/^    uint8_t serialrx_provider;              \/\/ type of UART-based receiver (0 = spek 10, 1 = spek 11, 2 = sbus). Must be enabled by FEATURE_RX_SERIAL first.$/;"	m	struct:rxConfig_s
servo	./blackbox/blackbox.c	/^    int16_t servo[MAX_SUPPORTED_SERVOS];$/;"	m	struct:blackboxMainState_t	file:
servo	./flight/mixer.c	/^int16_t servo[MAX_SUPPORTED_SERVOS];$/;"	v
servoCenterPulse	./drivers/pwm_mapping.h	/^    uint16_t servoCenterPulse;$/;"	m	struct:drv_pwm_config_t
servoCenterPulse	./io/escservo.h	/^    uint16_t servoCenterPulse;              \/\/ This is the value for servos when they should be in the middle. e.g. 1500.$/;"	m	struct:escAndServoConfig_s
servoConf	./config/config_profile.h	/^    servoParam_t servoConf[MAX_SUPPORTED_SERVOS]; \/\/ servo configuration$/;"	m	struct:profile_s
servoConf	./flight/mixer.c	/^static servoParam_t *servoConf;$/;"	v	file:
servoCount	./drivers/pwm_mapping.h	/^    uint8_t servoCount;$/;"	m	struct:pwmOutputConfiguration_s
servoCount	./flight/mixer.c	/^STATIC_UNIT_TESTED uint8_t servoCount;$/;"	v
servoDirection	./flight/mixer.c	/^int servoDirection(servoIndex_e servoIndex, int lr)$/;"	f
servoIndex_e	./flight/mixer.c	/^} servoIndex_e;$/;"	t	typeref:enum:__anon12	file:
servoParam_t	./flight/mixer.h	/^typedef struct servoParam_t {$/;"	s
servoParam_t	./flight/mixer.h	/^} servoParam_t;$/;"	t	typeref:struct:servoParam_t
servoPwmRate	./drivers/pwm_mapping.h	/^    uint16_t servoPwmRate;$/;"	m	struct:drv_pwm_config_t
servo_lowpass_enable	./flight/mixer.h	/^    int8_t servo_lowpass_enable;            \/\/ enable\/disable lowpass filter$/;"	m	struct:mixerConfig_s
servo_lowpass_freq	./flight/mixer.h	/^    int16_t servo_lowpass_freq;             \/\/ lowpass servo filter frequency selection; 1\/1000ths of loop freq$/;"	m	struct:mixerConfig_s
servo_pwm_rate	./config/config_master.h	/^    uint16_t servo_pwm_rate;                \/\/ The update rate of servo outputs (50-498Hz)$/;"	m	struct:master_t
servos	./drivers/pwm_output.c	/^static pwmOutputPort_t *servos[MAX_PWM_SERVOS];$/;"	v	file:
setAccelerationTrims	./sensors/acceleration.c	/^void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)$/;"	f
setControlRateProfile	./config/config.c	/^static void setControlRateProfile(uint8_t profileIndex)$/;"	f	file:
setCurrentPort	./io/serial_msp.c	/^void setCurrentPort(mspPort_t *port)$/;"	f
setLedHsv	./drivers/light_ws2811strip.c	/^void setLedHsv(uint16_t index, const hsvColor_t *color)$/;"	f
setLedValue	./drivers/light_ws2811strip.c	/^void setLedValue(uint16_t index, const uint8_t value)$/;"	f
setMocapAltReadyFlag	./sensors/mocap.c	/^void setMocapAltReadyFlag(void) {$/;"	f
setMode	./drivers/serial.h	/^    void (*setMode)(serialPort_t *instance, portMode_t mode);$/;"	m	struct:serialPortVTable
setPrintfSerialPort	./common/printf.c	/^void setPrintfSerialPort(serialPort_t *serialPort)$/;"	f
setProfile	./config/config.c	/^static void setProfile(uint8_t profileIndex)$/;"	f	file:
setStripColor	./drivers/light_ws2811strip.c	/^void setStripColor(const hsvColor_t *color)$/;"	f
setStripColors	./drivers/light_ws2811strip.c	/^void setStripColors(const hsvColor_t *colors)$/;"	f
setTxSignal	./drivers/serial_softserial.c	/^void setTxSignal(softSerial_t *softSerial, uint8_t state)$/;"	f
setVelocity	./flight/altitudehold.c	/^int32_t setVelocity = 0;$/;"	v
shiftPacketLog	./io/gps.c	/^static void shiftPacketLog(void)$/;"	f	file:
shortGitRevision	./version.c	/^const char * const shortGitRevision = __REVISION__;$/;"	v
shouldAutotune	./flight/pid.c	/^bool shouldAutotune(void)$/;"	f
shouldCheckForHoTTRequest	./telemetry/hott.c	/^static inline bool shouldCheckForHoTTRequest()$/;"	f	file:
shouldCheckPulse	./rx/rx.c	/^static bool shouldCheckPulse = true;$/;"	v	file:
shouldPrepareHoTTMessages	./telemetry/hott.c	/^static inline bool shouldPrepareHoTTMessages(uint32_t currentMicros)$/;"	f	file:
shouldProcessRx	./rx/rx.c	/^bool shouldProcessRx(uint32_t currentTime)$/;"	f
shouldTriggerBatteryAlarmNow	./telemetry/hott.c	/^static bool shouldTriggerBatteryAlarmNow(void)$/;"	f	file:
showArmedPage	./io/display.c	/^void showArmedPage(void)$/;"	f
showBatteryPage	./io/display.c	/^void showBatteryPage(void)$/;"	f
showDebugPage	./io/display.c	/^void showDebugPage(void)$/;"	f
showGpsPage	./io/display.c	/^void showGpsPage() {$/;"	f
showProfilePage	./io/display.c	/^void showProfilePage(void)$/;"	f
showRxPage	./io/display.c	/^void showRxPage(void)$/;"	f
showSensorsPage	./io/display.c	/^void showSensorsPage(void)$/;"	f
showTitle	./io/display.c	/^void showTitle()$/;"	f
showWelcomePage	./io/display.c	/^void showWelcomePage(void)$/;"	f
size	./config/config_master.h	/^    uint16_t size;$/;"	m	struct:master_t
slowHistory	./blackbox/blackbox.c	/^static blackboxSlowState_t slowHistory;$/;"	v	file:
smallAngle	./flight/imu.c	/^int16_t smallAngle = 0;$/;"	v
small_angle	./config/config_master.h	/^    uint8_t small_angle;$/;"	m	struct:master_t
small_angle	./flight/imu.h	/^    uint8_t small_angle;$/;"	m	struct:imuRuntimeConfig_s
smartPortDataReceive	./telemetry/smartport.c	/^static void smartPortDataReceive(uint16_t c)$/;"	f	file:
smartPortHasRequest	./telemetry/smartport.c	/^static uint8_t smartPortHasRequest = 0;$/;"	v	file:
smartPortIdCnt	./telemetry/smartport.c	/^static uint8_t smartPortIdCnt = 0;$/;"	v	file:
smartPortLastRequestTime	./telemetry/smartport.c	/^static uint32_t smartPortLastRequestTime = 0;$/;"	v	file:
smartPortPortSharing	./telemetry/smartport.c	/^static portSharing_e smartPortPortSharing;$/;"	v	file:
smartPortSendByte	./telemetry/smartport.c	/^static void smartPortSendByte(uint8_t c, uint16_t *crcp)$/;"	f	file:
smartPortSendPackage	./telemetry/smartport.c	/^static void smartPortSendPackage(uint16_t id, uint32_t val)$/;"	f	file:
smartPortSerialPort	./telemetry/smartport.c	/^static serialPort_t *smartPortSerialPort = NULL; \/\/ The 'SmartPort'(tm) Port.$/;"	v	file:
smartPortState	./telemetry/smartport.c	/^char smartPortState = SPSTATE_UNINITIALIZED;$/;"	v
smartPortTelemetryEnabled	./telemetry/smartport.c	/^static bool smartPortTelemetryEnabled =  false;$/;"	v	file:
softSerialGPIOConfig	./drivers/serial_softserial.c	/^static void softSerialGPIOConfig(GPIO_TypeDef *gpio, uint16_t pin, GPIO_Mode mode)$/;"	f	file:
softSerialPortIndex	./drivers/serial_softserial.c	/^    uint8_t          softSerialPortIndex;$/;"	m	struct:softSerial_s	file:
softSerialPortIndex_e	./drivers/serial_softserial.h	/^} softSerialPortIndex_e;$/;"	t	typeref:enum:__anon60
softSerialPorts	./drivers/serial_softserial.c	/^softSerial_t softSerialPorts[MAX_SOFTSERIAL_PORTS];$/;"	v
softSerialReadByte	./drivers/serial_softserial.c	/^uint8_t softSerialReadByte(serialPort_t *instance)$/;"	f
softSerialSetBaudRate	./drivers/serial_softserial.c	/^void softSerialSetBaudRate(serialPort_t *s, uint32_t baudRate)$/;"	f
softSerialSetMode	./drivers/serial_softserial.c	/^void softSerialSetMode(serialPort_t *instance, portMode_t mode)$/;"	f
softSerialTotalBytesWaiting	./drivers/serial_softserial.c	/^uint8_t softSerialTotalBytesWaiting(serialPort_t *instance)$/;"	f
softSerialVTable	./drivers/serial_softserial.c	/^const struct serialPortVTable softSerialVTable[] = {$/;"	v	typeref:struct:serialPortVTable
softSerialWriteByte	./drivers/serial_softserial.c	/^void softSerialWriteByte(serialPort_t *s, uint8_t ch)$/;"	f
softSerial_s	./drivers/serial_softserial.c	/^typedef struct softSerial_s {$/;"	s	file:
softSerial_t	./drivers/serial_softserial.c	/^} softSerial_t;$/;"	t	typeref:struct:softSerial_s	file:
solution	./io/gps.c	/^    ubx_nav_solution solution;$/;"	m	union:__anon93	file:
sonarCalculateAltitude	./sensors/sonar.c	/^int32_t sonarCalculateAltitude(int32_t sonarAlt, int16_t tiltAngle)$/;"	f
sonarGPIOConfig	./drivers/pwm_mapping.h	/^    sonarGPIOConfig_t *sonarGPIOConfig;$/;"	m	struct:drv_pwm_config_t
sonarGPIOConfig_s	./drivers/pwm_mapping.h	/^typedef struct sonarGPIOConfig_s {$/;"	s
sonarGPIOConfig_t	./drivers/pwm_mapping.h	/^} sonarGPIOConfig_t;$/;"	t	typeref:struct:sonarGPIOConfig_s
sonarGetHardwareConfiguration	./sensors/sonar.c	/^const sonarHardware_t *sonarGetHardwareConfiguration(batteryConfig_t *batteryConfig) $/;"	f
sonarGetLatestAltitude	./sensors/sonar.c	/^int32_t sonarGetLatestAltitude(void)$/;"	f
sonarHardware	./drivers/sonar_hcsr04.c	/^static sonarHardware_t const *sonarHardware;$/;"	v	file:
sonarHardware_s	./drivers/sonar_hcsr04.h	/^typedef struct sonarHardware_s {$/;"	s
sonarHardware_t	./drivers/sonar_hcsr04.h	/^} sonarHardware_t;$/;"	t	typeref:struct:sonarHardware_s
sonarInit	./sensors/sonar.c	/^void sonarInit(const sonarHardware_t *sonarHardware)$/;"	f
sonarRaw	./blackbox/blackbox.c	/^    int32_t sonarRaw;$/;"	m	struct:blackboxMainState_t	file:
sonarRead	./sensors/sonar.c	/^int32_t sonarRead(void)$/;"	f
sonarUpdate	./sensors/sonar.c	/^void sonarUpdate(void)$/;"	f
south	./io/ledstrip.c	/^    uint8_t south;$/;"	m	struct:modeColorIndexes_s	file:
speed	./drivers/gpio.h	/^    GPIO_Speed speed;$/;"	m	struct:__anon49
speed	./io/gps.c	/^    uint16_t speed;$/;"	m	struct:gpsDataNmea_s	file:
speed_2d	./io/gps.c	/^    uint32_t speed_2d;$/;"	m	struct:__anon87	file:
speed_3d	./io/gps.c	/^    uint32_t speed_3d;$/;"	m	struct:__anon87	file:
speed_H	./telemetry/hott.h	/^    uint8_t speed_H;             \/\/#36$/;"	m	struct:HOTT_GAM_MSG_s
speed_H	./telemetry/hott.h	/^    uint8_t speed_H;             \/\/#43$/;"	m	struct:HOTT_EAM_MSG_s
speed_H	./telemetry/hott.h	/^    uint8_t speed_H;        \/\/#25$/;"	m	struct:HOTT_AIRESC_MSG_s
speed_L	./telemetry/hott.h	/^    uint8_t speed_L;             \/\/#35 (air?) speed in km\/h(?) we are using ground speed here per default$/;"	m	struct:HOTT_GAM_MSG_s
speed_L	./telemetry/hott.h	/^    uint8_t speed_L;             \/\/#42 (air?) speed in km\/h. Steps 1km\/h$/;"	m	struct:HOTT_EAM_MSG_s
speed_L	./telemetry/hott.h	/^    uint8_t speed_L;        \/\/#24 Speed$/;"	m	struct:HOTT_AIRESC_MSG_s
speed_accuracy	./io/gps.c	/^    uint32_t speed_accuracy;$/;"	m	struct:__anon86	file:
speed_accuracy	./io/gps.c	/^    uint32_t speed_accuracy;$/;"	m	struct:__anon87	file:
speed_max_H	./telemetry/hott.h	/^    uint8_t speed_max_H;    \/\/#27$/;"	m	struct:HOTT_AIRESC_MSG_s
speed_max_L	./telemetry/hott.h	/^    uint8_t speed_max_L;    \/\/#26 Speed max$/;"	m	struct:HOTT_AIRESC_MSG_s
spekChannelData	./rx/spektrum.c	/^static uint32_t spekChannelData[SPEKTRUM_MAX_SUPPORTED_CHANNEL_COUNT];$/;"	v	file:
spekFrame	./rx/spektrum.c	/^static volatile uint8_t spekFrame[SPEK_FRAME_SIZE];$/;"	v	file:
spekHiRes	./rx/spektrum.c	/^static bool spekHiRes = false;$/;"	v	file:
spekShouldBind	./rx/spektrum.c	/^bool spekShouldBind(uint8_t spektrum_sat_bind)$/;"	f
spek_chan_mask	./rx/spektrum.c	/^static uint8_t spek_chan_mask;$/;"	v	file:
spek_chan_shift	./rx/spektrum.c	/^static uint8_t spek_chan_shift;$/;"	v	file:
spektrumBind	./rx/spektrum.c	/^void spektrumBind(rxConfig_t *rxConfig)$/;"	f
spektrumDataReceive	./rx/spektrum.c	/^static void spektrumDataReceive(uint16_t c)$/;"	f	file:
spektrumFrameStatus	./rx/spektrum.c	/^uint8_t spektrumFrameStatus(void)$/;"	f
spektrumInit	./rx/spektrum.c	/^bool spektrumInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
spektrumReadRawRC	./rx/spektrum.c	/^static uint16_t spektrumReadRawRC(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)$/;"	f	file:
spektrum_sat_bind	./rx/rx.h	/^    uint8_t spektrum_sat_bind;              \/\/ number of bind pulses for Spektrum satellite receivers$/;"	m	struct:rxConfig_s
spi1ErrorCount	./drivers/bus_spi.c	/^static volatile uint16_t spi1ErrorCount = 0;$/;"	v	file:
spi2ErrorCount	./drivers/bus_spi.c	/^static volatile uint16_t spi2ErrorCount = 0;$/;"	v	file:
spi3ErrorCount	./drivers/bus_spi.c	/^static volatile uint16_t spi3ErrorCount = 0;$/;"	v	file:
spiGetErrorCounter	./drivers/bus_spi.c	/^uint16_t spiGetErrorCounter(SPI_TypeDef *instance)$/;"	f
spiInit	./drivers/bus_spi.c	/^bool spiInit(SPI_TypeDef *instance)$/;"	f
spiResetErrorCounter	./drivers/bus_spi.c	/^void spiResetErrorCounter(SPI_TypeDef *instance)$/;"	f
spiSetDivisor	./drivers/bus_spi.c	/^void spiSetDivisor(SPI_TypeDef *instance, uint16_t divisor)$/;"	f
spiTimeoutUserCallback	./drivers/bus_spi.c	/^uint32_t spiTimeoutUserCallback(SPI_TypeDef *instance)$/;"	f
spiTransfer	./drivers/bus_spi.c	/^bool spiTransfer(SPI_TypeDef *instance, uint8_t *out, const uint8_t *in, int len)$/;"	f
spiTransferByte	./drivers/bus_spi.c	/^uint8_t spiTransferByte(SPI_TypeDef *instance, uint8_t data)$/;"	f
sprintf	./common/printf.h	120;"	d
sq	./common/maths.h	21;"	d
stableFramesSeenCount	./drivers/pwm_rx.c	/^    uint8_t  stableFramesSeenCount;$/;"	m	struct:ppmDevice	file:
standardBoardAlignment	./sensors/boardalignment.c	/^static bool standardBoardAlignment = true;     \/\/ board orientation correction$/;"	v	file:
startBlackbox	./blackbox/blackbox.c	/^void startBlackbox(void)$/;"	f
startNewCycle	./flight/autotune.c	/^static void startNewCycle(void)$/;"	f	file:
startStep	./io/rc_controls.h	/^    uint8_t startStep;$/;"	m	struct:channelRange_s
startTime	./blackbox/blackbox.c	/^        uint32_t startTime;$/;"	m	union:__anon33::__anon34	file:
start_byte	./telemetry/hott.h	/^    uint8_t start_byte;          \/\/#01 start uint8_t constant value 0x7c$/;"	m	struct:HOTT_GAM_MSG_s
start_byte	./telemetry/hott.h	/^    uint8_t start_byte;          \/\/#01 start uint8_t constant value 0x7c$/;"	m	struct:HOTT_VARIO_MSG_s
start_byte	./telemetry/hott.h	/^    uint8_t start_byte;          \/\/#01 start uint8_t$/;"	m	struct:HOTT_EAM_MSG_s
start_byte	./telemetry/hott.h	/^    uint8_t start_byte;      \/\/#01 constant value 0x7c$/;"	m	struct:HOTT_AIRESC_MSG_s
start_byte	./telemetry/hott.h	/^    uint8_t start_byte;  \/\/#01 constant value 0x7b$/;"	m	struct:HOTT_TEXTMODE_MSG
start_byte	./telemetry/hott.h	/^  uint8_t start_byte;    \/\/#01 constant value 0x7c$/;"	m	struct:HOTT_GPS_MSG_s
start_up	./drivers/barometer.h	/^    baroOpFuncPtr start_up;$/;"	m	struct:baro_t
start_ut	./drivers/barometer.h	/^    baroOpFuncPtr start_ut;$/;"	m	struct:baro_t
state	./drivers/pwm_rx.c	/^    uint8_t state;$/;"	m	struct:__anon59	file:
state	./io/gps.h	/^    uint8_t state;                  \/\/ GPS thread state. Used for detecting cable disconnects and configuring attached devices$/;"	m	struct:gpsData_t
stateFlags	./blackbox/blackbox.c	/^    uint8_t stateFlags;$/;"	m	struct:blackboxSlowState_t	file:
stateFlags	./config/runtime_config.c	/^uint8_t stateFlags = 0;$/;"	v
stateFlags_t	./config/runtime_config.h	/^} stateFlags_t;$/;"	t	typeref:enum:__anon20
state_position	./io/gps.h	/^    uint32_t state_position;        \/\/ incremental variable for loops$/;"	m	struct:gpsData_t
state_ts	./io/gps.h	/^    uint32_t state_ts;              \/\/ timestamp for last state_position increment$/;"	m	struct:gpsData_t
status	./io/gps.c	/^    ubx_nav_status status;$/;"	m	union:__anon93	file:
stdev_t	./common/maths.h	/^typedef struct stdev_t$/;"	s
stdev_t	./common/maths.h	/^} stdev_t;$/;"	t	typeref:struct:stdev_t
stdout_putf	./common/printf.c	/^static putcf stdout_putf;$/;"	v	file:
stdout_putp	./common/printf.c	/^static void *stdout_putp;$/;"	v	file:
step	./io/rc_controls.h	/^    uint8_t step;$/;"	m	struct:adjustmentStepConfig_s
stepConfig	./io/rc_controls.h	/^    adjustmentStepConfig_t stepConfig;$/;"	m	union:adjustmentConfig_u
stopMotors	./flight/mixer.c	/^void stopMotors(void)$/;"	f
stop_byte	./telemetry/hott.h	/^    uint8_t stop_byte;           \/\/#44 stop uint8_t$/;"	m	struct:HOTT_EAM_MSG_s
stop_byte	./telemetry/hott.h	/^    uint8_t stop_byte;           \/\/#44 stop uint8_t$/;"	m	struct:HOTT_GAM_MSG_s
stop_byte	./telemetry/hott.h	/^    uint8_t stop_byte;           \/\/#44 stop uint8_t, constant value 0x7d$/;"	m	struct:HOTT_VARIO_MSG_s
stop_byte	./telemetry/hott.h	/^    uint8_t stop_byte;      \/\/#44 constant value 0x7d$/;"	m	struct:HOTT_AIRESC_MSG_s
stop_byte	./telemetry/hott.h	/^    uint8_t stop_byte;   \/\/#171 constant value 0x7d$/;"	m	struct:HOTT_TEXTMODE_MSG
stop_byte	./telemetry/hott.h	/^  uint8_t stop_byte;      \/\/#44 constant value 0x7d$/;"	m	struct:HOTT_GPS_MSG_s
sumd	./rx/sumd.c	/^static uint8_t sumd[SUMD_BUFFSIZE] = { 0, };$/;"	v	file:
sumdChannelCount	./rx/sumd.c	/^static uint8_t sumdChannelCount;$/;"	v	file:
sumdChannels	./rx/sumd.c	/^static uint32_t sumdChannels[SUMD_MAX_CHANNEL];$/;"	v	file:
sumdDataReceive	./rx/sumd.c	/^static void sumdDataReceive(uint16_t c)$/;"	f	file:
sumdFrameDone	./rx/sumd.c	/^static bool sumdFrameDone = false;$/;"	v	file:
sumdFrameStatus	./rx/sumd.c	/^uint8_t sumdFrameStatus(void)$/;"	f
sumdInit	./rx/sumd.c	/^bool sumdInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
sumdReadRawRC	./rx/sumd.c	/^static uint16_t sumdReadRawRC(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)$/;"	f	file:
sumhChannels	./rx/sumh.c	/^static uint32_t sumhChannels[SUMH_MAX_CHANNEL_COUNT];$/;"	v	file:
sumhDataReceive	./rx/sumh.c	/^static void sumhDataReceive(uint16_t c)$/;"	f	file:
sumhFrame	./rx/sumh.c	/^static uint8_t sumhFrame[SUMH_FRAME_SIZE];$/;"	v	file:
sumhFrameDone	./rx/sumh.c	/^static bool sumhFrameDone = false;$/;"	v	file:
sumhFrameStatus	./rx/sumh.c	/^uint8_t sumhFrameStatus(void)$/;"	f
sumhInit	./rx/sumh.c	/^bool sumhInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
sumhPort	./rx/sumh.c	/^static serialPort_t *sumhPort;$/;"	v	file:
sumhReadRawRC	./rx/sumh.c	/^static uint16_t sumhReadRawRC(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)$/;"	f	file:
svid	./io/gps.c	/^    uint8_t svid;               \/\/ Satellite ID$/;"	m	struct:__anon88	file:
svinfo	./io/gps.c	/^    ubx_nav_svinfo svinfo;$/;"	m	union:__anon93	file:
switchPositions	./io/rc_controls.h	/^    uint8_t switchPositions;$/;"	m	struct:adjustmentSelectConfig_s
syncBeep	./blackbox/blackbox_fielddefs.h	/^    flightLogEvent_syncBeep_t syncBeep;$/;"	m	union:flightLogEventData_t
syncByte	./rx/sbus.c	/^    uint8_t syncByte;$/;"	m	struct:sbusFrame_s	file:
sysTickUptime	./drivers/system.c	/^static volatile uint32_t sysTickUptime = 0;$/;"	v	file:
systemBeep	./drivers/sound_beeper.c	/^void systemBeep(bool onoff)$/;"	f
systemBeepPtr	./drivers/sound_beeper.c	/^void (*systemBeepPtr)(bool onoff) = NULL;$/;"	v
systemInit	./drivers/system.c	/^void systemInit(void)$/;"	f
systemReset	./drivers/system_stm32f10x.c	/^void systemReset(void)$/;"	f
systemReset	./drivers/system_stm32f30x.c	/^void systemReset(void)$/;"	f
systemResetToBootloader	./drivers/system_stm32f10x.c	/^void systemResetToBootloader(void) {$/;"	f
systemResetToBootloader	./drivers/system_stm32f30x.c	/^void systemResetToBootloader(void) {$/;"	f
systemState	./main.c	/^static uint8_t systemState = SYSTEM_STATE_INITIALISING;$/;"	v	file:
systemState_e	./main.c	/^} systemState_e;$/;"	t	typeref:enum:__anon125	file:
t_fp_vector	./common/maths.h	/^} t_fp_vector;$/;"	t	typeref:union:__anon25
t_fp_vector_def	./common/maths.h	/^} t_fp_vector_def;$/;"	t	typeref:struct:fp_vector
tailAddress	./io/flashfs.c	/^static uint32_t tailAddress = 0;$/;"	v	file:
tailIndexInPage	./io/flashfs.c	/^static uint16_t tailIndexInPage = 0;$/;"	v	file:
tailSerialReply	./io/serial_msp.c	/^static void tailSerialReply(void)$/;"	f	file:
targetAngle	./blackbox/blackbox_fielddefs.h	/^    int8_t targetAngle, targetAngleAtPeak;$/;"	m	struct:flightLogEvent_autotuneTargets_t
targetAngle	./flight/autotune.c	/^static float targetAngle = 0;$/;"	v	file:
targetAngleAtPeak	./blackbox/blackbox_fielddefs.h	/^    int8_t targetAngle, targetAngleAtPeak;$/;"	m	struct:flightLogEvent_autotuneTargets_t
targetAngleAtPeak	./flight/autotune.c	/^static float targetAngleAtPeak;$/;"	v	file:
targetName	./version.c	/^const char * const targetName = __TARGET__;$/;"	v
target_bearing	./flight/navigation.c	/^static int32_t target_bearing;$/;"	v	file:
telemTemperature1	./mw.c	/^int16_t telemTemperature1;      \/\/ gyro sensor temperature$/;"	v
telemetryCheckState	./telemetry/telemetry.c	/^void telemetryCheckState(void)$/;"	f
telemetryConfig	./config/config_master.h	/^    telemetryConfig_t telemetryConfig;$/;"	m	struct:master_t
telemetryConfig	./telemetry/frsky.c	/^static telemetryConfig_t *telemetryConfig;$/;"	v	file:
telemetryConfig	./telemetry/hott.c	/^static telemetryConfig_t *telemetryConfig;$/;"	v	file:
telemetryConfig	./telemetry/msp.c	/^static telemetryConfig_t *telemetryConfig;$/;"	v	file:
telemetryConfig	./telemetry/smartport.c	/^static telemetryConfig_t *telemetryConfig;$/;"	v	file:
telemetryConfig	./telemetry/telemetry.c	/^static telemetryConfig_t *telemetryConfig;$/;"	v	file:
telemetryConfig_s	./telemetry/telemetry.h	/^typedef struct telemetryConfig_s {$/;"	s
telemetryConfig_t	./telemetry/telemetry.h	/^} telemetryConfig_t;$/;"	t	typeref:struct:telemetryConfig_s
telemetryDetermineEnabledState	./telemetry/telemetry.c	/^bool telemetryDetermineEnabledState(portSharing_e portSharing)$/;"	f
telemetryInit	./telemetry/telemetry.c	/^void telemetryInit(void)$/;"	f
telemetryProcess	./telemetry/telemetry.c	/^void telemetryProcess(rxConfig_t *rxConfig, uint16_t deadband3d_throttle)$/;"	f
telemetryUseConfig	./telemetry/telemetry.c	/^void telemetryUseConfig(telemetryConfig_t *telemetryConfigToUse)$/;"	f
telemetry_baudrateIndex	./io/serial.h	/^    uint8_t telemetry_baudrateIndex; \/\/ not used for all telemetry systems, e.g. HoTT only works at 19200.$/;"	m	struct:serialPortConfig_s
telemetry_inversion	./telemetry/telemetry.h	/^    uint8_t telemetry_inversion;            \/\/ also shared with smartport inversion$/;"	m	struct:telemetryConfig_s
telemetry_switch	./telemetry/telemetry.h	/^    uint8_t telemetry_switch;               \/\/ Use aux channel to change serial output & baudrate( MSP \/ Telemetry ). It disables automatic switching to Telemetry when armed.$/;"	m	struct:telemetryConfig_s
temp1	./telemetry/hott.h	/^    uint8_t temp1;               \/\/#25 Temperature sensor 1. 20=0�, 46=26� - offset of 20.$/;"	m	struct:HOTT_EAM_MSG_s
temp2	./telemetry/hott.h	/^    uint8_t temp2;               \/\/#26 temperature sensor 2$/;"	m	struct:HOTT_EAM_MSG_s
temperature	./drivers/accgyro.h	/^    sensorReadFuncPtr temperature;                          \/\/ read temperature if available$/;"	m	struct:gyro_s
temperature1	./telemetry/hott.h	/^    uint8_t temperature1;        \/\/#17 temperature 1. offset of 20. a value of 20 = 0�C$/;"	m	struct:HOTT_GAM_MSG_s
temperature2	./telemetry/hott.h	/^    uint8_t temperature2;        \/\/#18 temperature 2. offset of 20. a value of 20 = 0�C$/;"	m	struct:HOTT_GAM_MSG_s
testBlackboxCondition	./blackbox/blackbox.c	/^static bool testBlackboxCondition(FlightLogFieldCondition condition)$/;"	f	file:
testBlackboxConditionUncached	./blackbox/blackbox.c	/^static bool testBlackboxConditionUncached(FlightLogFieldCondition condition)$/;"	f	file:
text_msg	./telemetry/hott.h	/^    uint8_t text_msg[HOTT_VARIO_MSG_TEXT_LEN]; \/\/#18 Free ASCII text message$/;"	m	struct:HOTT_VARIO_MSG_s
tfp_format	./common/printf.c	/^int tfp_format(void *putp, putcf putf, const char *fmt, va_list va)$/;"	f
tfp_printf	./common/printf.c	/^int tfp_printf(const char *fmt, ...)$/;"	f
tfp_sprintf	./common/printf.c	/^int tfp_sprintf(char *s, const char *fmt, ...)$/;"	f
thrExpo8	./io/rc_controls.h	/^    uint8_t thrExpo8;$/;"	m	struct:controlRateConfig_s
thrMid8	./io/rc_controls.h	/^    uint8_t thrMid8;$/;"	m	struct:controlRateConfig_s
throttle	./flight/mixer.h	/^    float throttle;$/;"	m	struct:motorMixer_t
throttle	./telemetry/hott.h	/^    uint8_t throttle;       \/\/#23 throttle in %$/;"	m	struct:HOTT_AIRESC_MSG_s
throttleAngleScale	./flight/imu.c	/^float throttleAngleScale;$/;"	v
throttleStatus_e	./io/rc_controls.h	/^} throttleStatus_e;$/;"	t	typeref:enum:__anon95
throttle_correction_angle	./config/config_profile.h	/^    uint16_t throttle_correction_angle;     \/\/ the angle when the throttle correction is maximal. in 0.1 degres, ex 225 = 22.5 ,30.0, 450 = 45.0 deg$/;"	m	struct:profile_s
throttle_correction_value	./config/config_profile.h	/^    uint8_t throttle_correction_value;      \/\/ the correction that will be applied at throttle_correction_angle.$/;"	m	struct:profile_s
tickerCharacters	./io/display.c	/^static const char* tickerCharacters = "|\/-\\\\"; \/\/ use 2\/4\/8 characters so that the divide is optimal.$/;"	v	file:
tim	./drivers/pwm_output.c	/^    TIM_TypeDef *tim;$/;"	m	struct:__anon39	file:
tim	./drivers/timer.h	/^    TIM_TypeDef *tim;$/;"	m	struct:__anon56
timCCER_t	./drivers/timer.h	/^typedef uint16_t timCCER_t;$/;"	t
timCCER_t	./drivers/timer.h	/^typedef uint32_t timCCER_t;$/;"	t
timCCR_t	./drivers/timer.h	/^typedef uint16_t timCCR_t;$/;"	t
timCCR_t	./drivers/timer.h	/^typedef uint32_t timCCR_t;$/;"	t
timCCxHandler	./drivers/timer.c	/^static void timCCxHandler(TIM_TypeDef *tim, timerConfig_t *timerConfig)$/;"	f	file:
timCNT_t	./drivers/timer.h	/^typedef uint16_t timCNT_t;$/;"	t
timCNT_t	./drivers/timer.h	/^typedef uint32_t timCNT_t;$/;"	t
timSR_t	./drivers/timer.h	/^typedef uint16_t timSR_t;$/;"	t
timSR_t	./drivers/timer.h	/^typedef uint32_t timSR_t;$/;"	t
time	./blackbox/blackbox.c	/^    uint32_t time;$/;"	m	struct:blackboxMainState_t	file:
time	./blackbox/blackbox_fielddefs.h	/^    uint32_t time;$/;"	m	struct:flightLogEvent_syncBeep_t
time	./io/gps.c	/^    uint32_t time;              \/\/ GPS Millisecond time of week$/;"	m	struct:__anon89	file:
time	./io/gps.c	/^    uint32_t time;              \/\/ GPS msToW$/;"	m	struct:__anon84	file:
time	./io/gps.c	/^    uint32_t time;              \/\/ GPS msToW$/;"	m	struct:__anon85	file:
time	./io/gps.c	/^    uint32_t time;              \/\/ GPS msToW$/;"	m	struct:__anon87	file:
time	./io/gps.c	/^    uint32_t time;$/;"	m	struct:__anon86	file:
time	./sensors/mocap.h	/^    uint32_t time;  \/\/ ms$/;"	m	struct:mocap_enu_t
time_nsec	./io/gps.c	/^    int32_t time_nsec;$/;"	m	struct:__anon86	file:
time_to_first_fix	./io/gps.c	/^    uint32_t time_to_first_fix;$/;"	m	struct:__anon85	file:
timeoutAt	./flight/autotune.c	/^static uint32_t timeoutAt;$/;"	v	file:
timeoutAt	./io/rc_controls.h	/^    uint32_t timeoutAt;$/;"	m	struct:adjustmentState_s
timeouts	./io/gps.h	/^    uint32_t timeouts;$/;"	m	struct:gpsData_t
timerCCHandlerCallback	./drivers/timer.h	/^typedef void timerCCHandlerCallback(struct timerCCHandlerRec_s* self, uint16_t capture);$/;"	t
timerCCHandlerRec_s	./drivers/timer.h	/^typedef struct timerCCHandlerRec_s {$/;"	s
timerCCHandlerRec_t	./drivers/timer.h	/^} timerCCHandlerRec_t;$/;"	t	typeref:struct:timerCCHandlerRec_s
timerCb	./drivers/serial_softserial.c	/^    timerCCHandlerRec_t timerCb;$/;"	m	struct:softSerial_s	file:
timerChCCHandlerInit	./drivers/timer.c	/^void timerChCCHandlerInit(timerCCHandlerRec_t *self, timerCCHandlerCallback *fn)$/;"	f
timerChCCR	./drivers/timer.c	/^volatile timCCR_t* timerChCCR(const timerHardware_t *timHw)$/;"	f
timerChCCRHi	./drivers/timer.c	/^volatile timCCR_t* timerChCCRHi(const timerHardware_t *timHw)$/;"	f
timerChCCRLo	./drivers/timer.c	/^volatile timCCR_t* timerChCCRLo(const timerHardware_t *timHw)$/;"	f
timerChClearCCFlag	./drivers/timer.c	/^void timerChClearCCFlag(const timerHardware_t *timHw)$/;"	f
timerChConfigCallbacks	./drivers/timer.c	/^void timerChConfigCallbacks(const timerHardware_t *timHw, timerCCHandlerRec_t *edgeCallback, timerOvrHandlerRec_t *overflowCallback)$/;"	f
timerChConfigCallbacksDual	./drivers/timer.c	/^void timerChConfigCallbacksDual(const timerHardware_t *timHw, timerCCHandlerRec_t *edgeCallbackLo, timerCCHandlerRec_t *edgeCallbackHi, timerOvrHandlerRec_t *overflowCallback)$/;"	f
timerChConfigGPIO	./drivers/timer.c	/^void timerChConfigGPIO(const timerHardware_t *timHw, GPIO_Mode mode)$/;"	f
timerChConfigIC	./drivers/timer.c	/^void timerChConfigIC(const timerHardware_t *timHw, bool polarityRising, unsigned inputFilterTicks)$/;"	f
timerChConfigICDual	./drivers/timer.c	/^void timerChConfigICDual(const timerHardware_t *timHw, bool polarityRising, unsigned inputFilterTicks)$/;"	f
timerChConfigOC	./drivers/timer.c	/^void timerChConfigOC(const timerHardware_t* timHw, bool outEnable, bool stateHigh)$/;"	f
timerChConfig_UpdateOverflow	./drivers/timer.c	/^static void timerChConfig_UpdateOverflow(timerConfig_t *cfg, TIM_TypeDef *tim) {$/;"	f	file:
timerChICPolarity	./drivers/timer.c	/^void timerChICPolarity(const timerHardware_t *timHw, bool polarityRising)$/;"	f
timerChITConfig	./drivers/timer.c	/^void timerChITConfig(const timerHardware_t *timHw, FunctionalState newState)$/;"	f
timerChITConfigDualLo	./drivers/timer.c	/^void timerChITConfigDualLo(const timerHardware_t *timHw, FunctionalState newState) {$/;"	f
timerChInit	./drivers/timer.c	/^void timerChInit(const timerHardware_t *timHw, channelType_t type, int irqPriority)$/;"	f
timerChOvrHandlerInit	./drivers/timer.c	/^void timerChOvrHandlerInit(timerOvrHandlerRec_t *self, timerOvrHandlerCallback *fn)$/;"	f
timerChannelInfo	./drivers/timer.c	/^timerChannelInfo_t timerChannelInfo[USABLE_TIMER_CHANNEL_COUNT];$/;"	v
timerChannelInfo_t	./drivers/timer.c	/^} timerChannelInfo_t;$/;"	t	typeref:struct:__anon51	file:
timerConfig	./drivers/timer.c	/^timerConfig_t timerConfig[USED_TIMER_COUNT];$/;"	v
timerConfig_s	./drivers/timer.c	/^typedef struct timerConfig_s {$/;"	s	file:
timerConfig_t	./drivers/timer.c	/^} timerConfig_t;$/;"	t	typeref:struct:timerConfig_s	file:
timerConfigure	./drivers/timer.c	/^void timerConfigure(const timerHardware_t *timerHardwarePtr, uint16_t period, uint8_t mhz)$/;"	f
timerForceOverflow	./drivers/timer.c	/^void timerForceOverflow(TIM_TypeDef *tim)$/;"	f
timerHardware	./drivers/pwm_rx.c	/^    const timerHardware_t *timerHardware;$/;"	m	struct:__anon59	file:
timerHardware	./drivers/timer.c	/^const timerHardware_t timerHardware[USABLE_TIMER_CHANNEL_COUNT] = {$/;"	v
timerHardware_t	./drivers/timer.h	/^} timerHardware_t;$/;"	t	typeref:struct:__anon56
timerInfo	./drivers/timer.c	/^timerInfo_t timerInfo[USED_TIMER_COUNT];$/;"	v
timerInfo_t	./drivers/timer.c	/^} timerInfo_t;$/;"	t	typeref:struct:__anon52	file:
timerInit	./drivers/timer.c	/^void timerInit(void)$/;"	f
timerNVICConfigure	./drivers/timer.c	/^void timerNVICConfigure(uint8_t irq)$/;"	f
timerOvrHandlerCallback	./drivers/timer.h	/^typedef void timerOvrHandlerCallback(struct timerOvrHandlerRec_s* self, uint16_t capture);$/;"	t
timerOvrHandlerRec_s	./drivers/timer.h	/^typedef struct timerOvrHandlerRec_s {$/;"	s
timerOvrHandlerRec_t	./drivers/timer.h	/^} timerOvrHandlerRec_t;$/;"	t	typeref:struct:timerOvrHandlerRec_s
timerStart	./drivers/timer.c	/^void timerStart(void)$/;"	f
totalSize	./drivers/flash.h	/^    uint32_t totalSize;  \/\/ This is just sectorSize * sectors$/;"	m	struct:flashGeometry_t
tpa_breakpoint	./io/rc_controls.h	/^    uint16_t tpa_breakpoint;                \/\/ Breakpoint where TPA is activated$/;"	m	struct:controlRateConfig_s
tracking	./drivers/pwm_rx.c	/^    bool     tracking;$/;"	m	struct:ppmDevice	file:
transmissionErrors	./drivers/serial_softserial.c	/^    uint16_t         transmissionErrors;$/;"	m	struct:softSerial_s	file:
tri_unarmed_servo	./flight/mixer.h	/^    uint8_t tri_unarmed_servo;              \/\/ send tail servo correction pulses even when unarmed$/;"	m	struct:mixerConfig_s
triggerPin	./drivers/pwm_mapping.h	/^    uint16_t triggerPin;$/;"	m	struct:sonarGPIOConfig_s
trigger_pin	./drivers/sonar_hcsr04.h	/^    uint16_t trigger_pin;$/;"	m	struct:sonarHardware_s
txBuffer	./drivers/serial.h	/^    volatile uint8_t *txBuffer;$/;"	m	struct:serialPort
txBuffer	./drivers/serial_softserial.c	/^    volatile uint8_t txBuffer[SOFTSERIAL_BUFFER_SIZE];$/;"	m	struct:softSerial_s	file:
txBufferHead	./drivers/serial.h	/^    uint32_t txBufferHead;$/;"	m	struct:serialPort
txBufferSize	./drivers/serial.h	/^    uint32_t txBufferSize;$/;"	m	struct:serialPort
txBufferTail	./drivers/serial.h	/^    uint32_t txBufferTail;$/;"	m	struct:serialPort
txDMAChannel	./drivers/serial_uart.h	/^    DMA_Channel_TypeDef *txDMAChannel;$/;"	m	struct:__anon36
txDMAEmpty	./drivers/serial_uart.h	/^    bool txDMAEmpty;$/;"	m	struct:__anon36
txDMAIrq	./drivers/serial_uart.h	/^    uint32_t txDMAIrq;$/;"	m	struct:__anon36
txDMAPeripheralBaseAddr	./drivers/serial_uart.h	/^    uint32_t txDMAPeripheralBaseAddr;$/;"	m	struct:__anon36
txTimerHardware	./drivers/serial_softserial.c	/^    const timerHardware_t *txTimerHardware;$/;"	m	struct:softSerial_s	file:
type	./drivers/timer.c	/^    channelType_t type;$/;"	m	struct:__anon51	file:
type	./io/serial_cli.c	/^    const uint16_t type; \/\/ cliValueFlag_e - specify one of each from VALUE_TYPE_MASK and SECTION_MASK$/;"	m	struct:__anon100	file:
u	./blackbox/blackbox.c	/^    } u;$/;"	m	struct:__anon33	typeref:union:__anon33::__anon34	file:
uartOpen	./drivers/serial_uart.c	/^serialPort_t *uartOpen(USART_TypeDef *USARTx, serialReceiveCallbackPtr callback, uint32_t baudRate, portMode_t mode, portOptions_t options)$/;"	f
uartPort1	./drivers/serial_uart_stm32f10x.c	/^static uartPort_t uartPort1;$/;"	v	file:
uartPort1	./drivers/serial_uart_stm32f30x.c	/^static uartPort_t uartPort1;$/;"	v	file:
uartPort2	./drivers/serial_uart_stm32f10x.c	/^static uartPort_t uartPort2;$/;"	v	file:
uartPort2	./drivers/serial_uart_stm32f30x.c	/^static uartPort_t uartPort2;$/;"	v	file:
uartPort3	./drivers/serial_uart_stm32f10x.c	/^static uartPort_t uartPort3;$/;"	v	file:
uartPort3	./drivers/serial_uart_stm32f30x.c	/^static uartPort_t uartPort3;$/;"	v	file:
uartPort_t	./drivers/serial_uart.h	/^} uartPort_t;$/;"	t	typeref:struct:__anon36
uartRead	./drivers/serial_uart.c	/^uint8_t uartRead(serialPort_t *instance)$/;"	f
uartReconfigure	./drivers/serial_uart.c	/^static void uartReconfigure(uartPort_t *uartPort)$/;"	f	file:
uartSetBaudRate	./drivers/serial_uart.c	/^void uartSetBaudRate(serialPort_t *instance, uint32_t baudRate)$/;"	f
uartSetMode	./drivers/serial_uart.c	/^void uartSetMode(serialPort_t *instance, portMode_t mode)$/;"	f
uartStartTxDMA	./drivers/serial_uart.c	/^void uartStartTxDMA(uartPort_t *s)$/;"	f
uartTotalBytesWaiting	./drivers/serial_uart.c	/^uint8_t uartTotalBytesWaiting(serialPort_t *instance)$/;"	f
uartVTable	./drivers/serial_uart.c	/^const struct serialPortVTable uartVTable[] = {$/;"	v	typeref:struct:serialPortVTable
uartWrite	./drivers/serial_uart.c	/^void uartWrite(serialPort_t *instance, uint8_t ch)$/;"	f
ubloxInit	./io/gps.c	/^static const uint8_t ubloxInit[] = {$/;"	v	file:
ubloxSbas	./io/gps.c	/^static const ubloxSbas_t ubloxSbas[] = {$/;"	v	file:
ubloxSbas_s	./io/gps.c	/^typedef struct ubloxSbas_s {$/;"	s	file:
ubloxSbas_t	./io/gps.c	/^} ubloxSbas_t;$/;"	t	typeref:struct:ubloxSbas_s	file:
ubs_nav_fix_type	./io/gps.c	/^} ubs_nav_fix_type;$/;"	v	typeref:enum:__anon91
ubx	./io/gps.c	/^    const char *ubx;$/;"	m	struct:gpsInitData_t	file:
ubx_header	./io/gps.c	/^} ubx_header;$/;"	t	typeref:struct:__anon83	file:
ubx_nav_posllh	./io/gps.c	/^} ubx_nav_posllh;$/;"	t	typeref:struct:__anon84	file:
ubx_nav_solution	./io/gps.c	/^} ubx_nav_solution;$/;"	t	typeref:struct:__anon86	file:
ubx_nav_status	./io/gps.c	/^} ubx_nav_status;$/;"	t	typeref:struct:__anon85	file:
ubx_nav_status_bits	./io/gps.c	/^} ubx_nav_status_bits;$/;"	v	typeref:enum:__anon92
ubx_nav_svinfo	./io/gps.c	/^} ubx_nav_svinfo;$/;"	t	typeref:struct:__anon89	file:
ubx_nav_svinfo_channel	./io/gps.c	/^} ubx_nav_svinfo_channel;$/;"	t	typeref:struct:__anon88	file:
ubx_nav_velned	./io/gps.c	/^} ubx_nav_velned;$/;"	t	typeref:struct:__anon87	file:
ubx_protocol_bytes	./io/gps.c	/^} ubx_protocol_bytes;$/;"	v	typeref:enum:__anon90
ug2864hsweg01InitI2C	./drivers/display_ug2864hsweg01.c	/^bool ug2864hsweg01InitI2C(void)$/;"	f
ug2864hsweg01InitI2C	./drivers/display_ug2864hsweg01.c	/^void ug2864hsweg01InitI2C(void)$/;"	f
ui2a	./common/typeconversion.c	/^void ui2a(unsigned int num, unsigned int base, int uc, char *bf)$/;"	f
uli2a	./common/typeconversion.c	/^void uli2a(unsigned long int num, unsigned int base, int uc, char *bf)$/;"	f
unregisterExti15_10_CallbackHandler	./drivers/system.c	/^void unregisterExti15_10_CallbackHandler(extiCallbackHandler *fn)$/;"	f
up	./io/ledstrip.c	/^    uint8_t up;$/;"	m	struct:modeColorIndexes_s	file:
up	./sensors/mocap.h	/^    int32_t up;$/;"	m	struct:mocap_enu_t
up_delay	./drivers/barometer.h	/^    uint16_t up_delay;$/;"	m	struct:baro_t
updateAccelerationReadings	./sensors/acceleration.c	/^void updateAccelerationReadings(rollAndPitchTrims_t *rollAndPitchTrims)$/;"	f
updateActivatedModes	./io/rc_controls.c	/^void updateActivatedModes(modeActivationCondition_t *modeActivationConditions)$/;"	f
updateAdjustmentStates	./io/rc_controls.c	/^void updateAdjustmentStates(adjustmentRange_t *adjustmentRanges)$/;"	f
updateAlarmBatteryStatus	./telemetry/hott.c	/^static inline void updateAlarmBatteryStatus(HOTT_EAM_MSG_t *hottEAMMessage)$/;"	f	file:
updateAltHoldState	./flight/altitudehold.c	/^void updateAltHoldState(void)$/;"	f
updateAutotuneState	./mw.c	/^void updateAutotuneState(void)$/;"	f
updateBatteryVoltage	./sensors/battery.c	/^void updateBatteryVoltage(void)$/;"	f
updateCompass	./sensors/compass.c	/^void updateCompass(flightDynamicsTrims_t *magZero)$/;"	f
updateCurrentMeter	./sensors/battery.c	/^void updateCurrentMeter(int32_t lastUpdateAt, rxConfig_t *rxConfig, uint16_t deadband3d_throttle)$/;"	f
updateDisplay	./io/display.c	/^void updateDisplay(void)$/;"	f
updateFailsafeStatus	./io/display.c	/^void updateFailsafeStatus(void)$/;"	f
updateGimbalServos	./flight/mixer.c	/^static void updateGimbalServos(uint8_t firstServoIndex)$/;"	f	file:
updateGpsIndicator	./io/gps.c	/^void updateGpsIndicator(uint32_t currentTime)$/;"	f
updateGpsStateForHomeAndHoldMode	./flight/navigation.c	/^void updateGpsStateForHomeAndHoldMode(void)$/;"	f
updateGpsWaypointsAndMode	./flight/navigation.c	/^void updateGpsWaypointsAndMode(void)$/;"	f
updateHardwareRevision	./target/CJMCU/hardware_revision.c	/^void updateHardwareRevision(void)$/;"	f
updateHardwareRevision	./target/NAZE/hardware_revision.c	/^void updateHardwareRevision(void)$/;"	f
updateHardwareRevision	./target/SUPERBEE/hardware_revision.c	/^void updateHardwareRevision(void)$/;"	f
updateInflightCalibrationState	./mw.c	/^void updateInflightCalibrationState(void)$/;"	f
updateLEDDMABuffer	./drivers/light_ws2811strip.c	/^STATIC_UNIT_TESTED void updateLEDDMABuffer(uint8_t componentValue)$/;"	f
updateLedAnimationState	./io/ledstrip.c	/^void updateLedAnimationState(void)$/;"	f
updateLedCount	./io/ledstrip.c	/^void updateLedCount(void)$/;"	f
updateLedStrip	./io/ledstrip.c	/^void updateLedStrip(void)$/;"	f
updateMagHold	./mw.c	/^void updateMagHold(void)$/;"	f
updateMocap	./sensors/mocap.c	/^void updateMocap(int32_t e, int32_t n, int32_t u)$/;"	f
updateMocapAltHoldState	./flight/altitudehold.c	/^void updateMocapAltHoldState(void)$/;"	f
updatePidIndex	./flight/autotune.c	/^static void updatePidIndex(void)$/;"	f	file:
updateRSSI	./rx/rx.c	/^void updateRSSI(uint32_t currentTime)$/;"	f
updateRSSIADC	./rx/rx.c	/^void updateRSSIADC(uint32_t currentTime)$/;"	f
updateRSSIPWM	./rx/rx.c	/^void updateRSSIPWM(void)$/;"	f
updateRx	./rx/rx.c	/^void updateRx(uint32_t currentTime)$/;"	f
updateRxStatus	./io/display.c	/^void updateRxStatus(void)$/;"	f
updateSonarAltHoldState	./flight/altitudehold.c	/^void updateSonarAltHoldState(void)$/;"	f
updateTargetAngle	./flight/autotune.c	/^static void updateTargetAngle(void)$/;"	f	file:
updateTicker	./io/display.c	/^void updateTicker(void)$/;"	f
uptime	./io/gps.c	/^    uint32_t uptime;            \/\/ milliseconds$/;"	m	struct:__anon85	file:
usTicks	./drivers/system.c	/^static uint32_t usTicks = 0;$/;"	v	file:
usartConfigurePinInversion	./drivers/serial_uart.c	/^static void usartConfigurePinInversion(uartPort_t *uartPort) {$/;"	f	file:
usartIrqCallback	./drivers/serial_uart_stm32f10x.c	/^void usartIrqCallback(uartPort_t *s)$/;"	f
usartIrqHandler	./drivers/serial_uart_stm32f30x.c	/^void usartIrqHandler(uartPort_t *s)$/;"	f
usbIsConfigured	./vcp/hw_config.c	/^uint8_t usbIsConfigured(void)$/;"	f
usbIsConnected	./vcp/hw_config.c	/^uint8_t usbIsConnected(void)$/;"	f
usbVTable	./drivers/serial_usb_vcp.c	/^const struct serialPortVTable usbVTable[] = { { usbVcpWrite, usbVcpAvailable, usbVcpRead, usbVcpSetBaudRate, isUsbVcpTransmitBufferEmpty, usbVcpSetMode } };$/;"	v	typeref:struct:serialPortVTable
usbVcpAvailable	./drivers/serial_usb_vcp.c	/^uint8_t usbVcpAvailable(serialPort_t *instance)$/;"	f
usbVcpOpen	./drivers/serial_usb_vcp.c	/^serialPort_t *usbVcpOpen(void)$/;"	f
usbVcpRead	./drivers/serial_usb_vcp.c	/^uint8_t usbVcpRead(serialPort_t *instance)$/;"	f
usbVcpSetBaudRate	./drivers/serial_usb_vcp.c	/^void usbVcpSetBaudRate(serialPort_t *instance, uint32_t baudRate)$/;"	f
usbVcpSetMode	./drivers/serial_usb_vcp.c	/^void usbVcpSetMode(serialPort_t *instance, portMode_t mode)$/;"	f
usbVcpWrite	./drivers/serial_usb_vcp.c	/^void usbVcpWrite(serialPort_t *instance, uint8_t c)$/;"	f
useBarometerConfig	./sensors/barometer.c	/^void useBarometerConfig(barometerConfig_t *barometerConfigToUse)$/;"	f
useCurrentMeterADC	./drivers/pwm_mapping.h	/^    bool useCurrentMeterADC;$/;"	m	struct:drv_pwm_config_t
useFailsafeConfig	./flight/failsafe.c	/^void useFailsafeConfig(failsafeConfig_t *failsafeConfigToUse)$/;"	f
useFifo	./drivers/accgyro_adxl345.c	/^static bool useFifo = false;$/;"	v	file:
useFifo	./drivers/accgyro_adxl345.h	/^    bool useFifo;$/;"	m	struct:drv_adxl345_config_t
useGyroConfig	./sensors/gyro.c	/^void useGyroConfig(gyroConfig_t *gyroConfigToUse)$/;"	f
useLEDStrip	./drivers/pwm_mapping.h	/^    bool useLEDStrip;$/;"	m	struct:drv_pwm_config_t
useOneshot	./drivers/pwm_mapping.h	/^    bool useOneshot;$/;"	m	struct:drv_pwm_config_t
usePPM	./drivers/pwm_mapping.h	/^    bool usePPM;$/;"	m	struct:drv_pwm_config_t
useParallelPWM	./drivers/pwm_mapping.h	/^    bool useParallelPWM;$/;"	m	struct:drv_pwm_config_t
useRSSIADC	./drivers/pwm_mapping.h	/^    bool useRSSIADC;$/;"	m	struct:drv_pwm_config_t
useRcControlsConfig	./io/rc_controls.c	/^void useRcControlsConfig(modeActivationCondition_t *modeActivationConditions, escAndServoConfig_t *escAndServoConfigToUse, pidProfile_t *pidProfileToUse)$/;"	f
useRxConfig	./rx/rx.c	/^void useRxConfig(rxConfig_t *rxConfigToUse)$/;"	f
useSerialRx	./drivers/pwm_mapping.h	/^    bool useSerialRx;$/;"	m	struct:drv_pwm_config_t
useServo	./flight/mixer.c	/^static int useServo;$/;"	v	file:
useServo	./flight/mixer.h	/^    uint8_t useServo;$/;"	m	struct:mixer_t
useServos	./drivers/pwm_mapping.h	/^    bool useServos;$/;"	m	struct:drv_pwm_config_t
useSoftSerial	./drivers/pwm_mapping.h	/^    bool useSoftSerial;$/;"	m	struct:drv_pwm_config_t
useSonar	./drivers/pwm_mapping.h	/^    bool useSonar;$/;"	m	struct:drv_pwm_config_t
useUART2	./drivers/pwm_mapping.h	/^    bool useUART2;$/;"	m	struct:drv_pwm_config_t
useUART3	./drivers/pwm_mapping.h	/^    bool useUART3;$/;"	m	struct:drv_pwm_config_t
useVbat	./drivers/pwm_mapping.h	/^    bool useVbat;$/;"	m	struct:drv_pwm_config_t
usedTimers	./drivers/timer.c	/^TIM_TypeDef * const usedTimers[USED_TIMER_COUNT] = {$/;"	v
ut_delay	./drivers/barometer.h	/^    uint16_t ut_delay;$/;"	m	struct:baro_t
v	./common/color.h	/^    uint8_t v; \/\/ 0 - 255$/;"	m	struct:hsvColor_s
vTable	./drivers/serial.h	/^    const struct serialPortVTable *vTable;$/;"	m	struct:serialPort	typeref:struct:serialPort::serialPortVTable
valid_digit	./common/typeconversion.c	205;"	d	file:
validateAndFixConfig	./config/config.c	/^void validateAndFixConfig(void)$/;"	f
validateBlackboxConfig	./blackbox/blackbox.c	/^static void validateBlackboxConfig()$/;"	f	file:
valueTable	./io/serial_cli.c	/^const clivalue_t valueTable[] = {$/;"	v
values	./flight/imu.h	/^    rollAndPitchInclination_t_def values;$/;"	m	union:__anon9
values	./sensors/acceleration.h	/^    rollAndPitchTrims_t_def values;$/;"	m	union:__anon114
values	./sensors/sensors.h	/^    flightDynamicsTrims_def_t values;$/;"	m	union:__anon120
vario	./flight/altitudehold.c	/^int32_t vario = 0;                      \/\/ variometer in cm\/s$/;"	v
vario_sensor_id	./telemetry/hott.h	/^    uint8_t vario_sensor_id;     \/\/#02 VARIO sensort id. constat value 0x89$/;"	m	struct:HOTT_VARIO_MSG_s
vbat	./sensors/battery.c	/^uint8_t vbat = 0;                   \/\/ battery voltage in 0.1V steps$/;"	v
vbatLatest	./blackbox/blackbox.c	/^    uint16_t vbatLatest;$/;"	m	struct:blackboxMainState_t	file:
vbatLatestADC	./sensors/battery.c	/^uint16_t vbatLatestADC = 0;         \/\/ most recent unsmoothed raw reading from vbat ADC$/;"	v
vbatReference	./blackbox/blackbox.c	/^static uint16_t vbatReference;$/;"	v	file:
vbatmaxcellvoltage	./sensors/battery.h	/^    uint8_t vbatmaxcellvoltage;             \/\/ maximum voltage per cell, used for auto-detecting battery voltage in 0.1V units, default is 43 (4.3V)$/;"	m	struct:batteryConfig_s
vbatmincellvoltage	./sensors/battery.h	/^    uint8_t vbatmincellvoltage;             \/\/ minimum voltage per cell, this triggers battery critical alarm, in 0.1V units, default is 33 (3.3V)$/;"	m	struct:batteryConfig_s
vbatscale	./sensors/battery.h	/^    uint8_t vbatscale;                      \/\/ adjust this to match battery voltage to reported value$/;"	m	struct:batteryConfig_s
vbatwarningcellvoltage	./sensors/battery.h	/^    uint8_t vbatwarningcellvoltage;         \/\/ warning voltage per cell, this triggers battery warning alarm, in 0.1V units, default is 35 (3.5V)$/;"	m	struct:batteryConfig_s
vcpPort	./drivers/serial_usb_vcp.c	/^static vcpPort_t vcpPort;$/;"	v	file:
vcpPort_t	./drivers/serial_usb_vcp.h	/^} vcpPort_t;$/;"	t	typeref:struct:__anon37
velned	./io/gps.c	/^    ubx_nav_velned velned;$/;"	m	union:__anon93	file:
velocityControl	./flight/altitudehold.c	/^uint8_t velocityControl = 0;$/;"	v
version	./config/config_master.h	/^    uint8_t version;$/;"	m	struct:master_t
version	./telemetry/hott.h	/^    uint8_t version;             \/\/#43 version number TODO: more info?$/;"	m	struct:HOTT_GAM_MSG_s
version	./telemetry/hott.h	/^    uint8_t version;             \/\/#43 version number TODO: more info?$/;"	m	struct:HOTT_VARIO_MSG_s
version	./telemetry/hott.h	/^    uint8_t version;        \/\/#43   Version number (highest current motor 1-x)$/;"	m	struct:HOTT_AIRESC_MSG_s
version	./telemetry/hott.h	/^  uint8_t version;       \/\/#43$/;"	m	struct:HOTT_GPS_MSG_s
vertical_accuracy	./io/gps.c	/^    uint32_t vertical_accuracy;$/;"	m	struct:__anon84	file:
vibration	./telemetry/hott.h	/^  uint8_t vibration;     \/\/#39 vibrations level in %$/;"	m	struct:HOTT_GPS_MSG_s
wCNTR	./vcp/usb_istr.c	/^__IO uint32_t wCNTR = 0;$/;"	v
wIstr	./vcp/usb_istr.c	/^__IO uint16_t wIstr; \/* ISTR register last read value *\/$/;"	v
waitForSerialPortToFinishTransmitting	./io/serial.c	/^void waitForSerialPortToFinishTransmitting(serialPort_t *serialPort)$/;"	f
warningFlags	./io/ledstrip.c	/^static uint8_t warningFlags = WARNING_FLAG_NONE;$/;"	v	file:
warningFlags_e	./io/ledstrip.c	/^} warningFlags_e;$/;"	t	typeref:enum:__anon79	file:
warningLedDisable	./io/statusindicator.c	/^void warningLedDisable(void)$/;"	f
warningLedEnable	./io/statusindicator.c	/^void warningLedEnable(void)$/;"	f
warningLedFlash	./io/statusindicator.c	/^void warningLedFlash(void)$/;"	f
warningLedRefresh	./io/statusindicator.c	/^void warningLedRefresh(void)$/;"	f
warningLedResetTimer	./io/statusindicator.c	/^void warningLedResetTimer(void) {$/;"	f
warningLedState	./io/statusindicator.c	/^static warningLedState_e warningLedState = WARNING_LED_OFF;$/;"	v	file:
warningLedState_e	./io/statusindicator.c	/^} warningLedState_e;$/;"	t	typeref:enum:__anon103	file:
warningLedTimer	./io/statusindicator.c	/^static uint32_t warningLedTimer = 0;$/;"	v	file:
warningLedUpdate	./io/statusindicator.c	/^void warningLedUpdate(void)$/;"	f
warning_beeps	./telemetry/hott.h	/^    uint8_t warning_beeps;           \/\/#03 1=A 2=B ... or 'A' - 0x40 = 1$/;"	m	struct:HOTT_EAM_MSG_s
warning_beeps	./telemetry/hott.h	/^    uint8_t warning_beeps;       \/\/#03 1=A 2=B ... 0x1a=Z  0 = no alarm$/;"	m	struct:HOTT_GAM_MSG_s
warning_beeps	./telemetry/hott.h	/^    uint8_t warning_beeps;       \/\/#03 1=A 2=B ...$/;"	m	struct:HOTT_VARIO_MSG_s
warning_beeps	./telemetry/hott.h	/^    uint8_t warning_beeps;   \/\/#03 1=A 2=B ...$/;"	m	struct:HOTT_AIRESC_MSG_s
warning_beeps	./telemetry/hott.h	/^    uint8_t warning_beeps;\/\/#03 1=A 2=B ...$/;"	m	struct:HOTT_TEXTMODE_MSG
warning_beeps	./telemetry/hott.h	/^  uint8_t warning_beeps; \/\/#03 1=A 2=B ...$/;"	m	struct:HOTT_GPS_MSG_s
waypoint_speed_gov	./flight/navigation.c	/^static int16_t waypoint_speed_gov;$/;"	v	file:
week	./io/gps.c	/^    int16_t week;$/;"	m	struct:__anon86	file:
west	./io/ledstrip.c	/^    uint8_t west;$/;"	m	struct:modeColorIndexes_s	file:
white_space	./common/typeconversion.c	204;"	d	file:
wp_distance	./flight/navigation.c	/^static uint32_t wp_distance;$/;"	v	file:
wrap_18000	./flight/navigation.c	/^static int32_t wrap_18000(int32_t error)$/;"	f	file:
wrap_36000	./flight/navigation.c	/^static int32_t wrap_36000(int32_t angle)$/;"	f	file:
writeAllMotors	./flight/mixer.c	/^void writeAllMotors(int16_t mc)$/;"	f
writeEEPROM	./config/config.c	/^void writeEEPROM(void)$/;"	f
writeGPSFrame	./blackbox/blackbox.c	/^static void writeGPSFrame()$/;"	f	file:
writeGPSHomeFrame	./blackbox/blackbox.c	/^static void writeGPSHomeFrame()$/;"	f	file:
writeInterframe	./blackbox/blackbox.c	/^static void writeInterframe(void)$/;"	f	file:
writeIntraframe	./blackbox/blackbox.c	/^static void writeIntraframe(void)$/;"	f	file:
writeMotors	./flight/mixer.c	/^void writeMotors(void)$/;"	f
writeServos	./flight/mixer.c	/^void writeServos(void)$/;"	f
writeSlowFrame	./blackbox/blackbox.c	/^static void writeSlowFrame(void)$/;"	f	file:
writeSlowFrameIfNeeded	./blackbox/blackbox.c	/^static void writeSlowFrameIfNeeded(bool allowPeriodicWrite)$/;"	f	file:
write_p	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t* write_p;$/;"	v	file:
writing	./drivers/bus_i2c_stm32f10x.c	/^static volatile uint8_t writing;$/;"	v	file:
ws2811LedDataTransferInProgress	./drivers/light_ws2811strip.c	/^volatile uint8_t ws2811LedDataTransferInProgress = 0;$/;"	v
ws2811LedStripDMAEnable	./drivers/light_ws2811strip_stm32f10x.c	/^void ws2811LedStripDMAEnable(void)$/;"	f
ws2811LedStripDMAEnable	./drivers/light_ws2811strip_stm32f30x.c	/^void ws2811LedStripDMAEnable(void)$/;"	f
ws2811LedStripHardwareInit	./drivers/light_ws2811strip_stm32f10x.c	/^void ws2811LedStripHardwareInit(void)$/;"	f
ws2811LedStripHardwareInit	./drivers/light_ws2811strip_stm32f30x.c	/^void ws2811LedStripHardwareInit(void)$/;"	f
ws2811LedStripInit	./drivers/light_ws2811strip.c	/^void ws2811LedStripInit(void)$/;"	f
ws2811UpdateStrip	./drivers/light_ws2811strip.c	/^void ws2811UpdateStrip(void)$/;"	f
x	./flight/lowpass.h	/^    int32_t x[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
xBusCRC16	./rx/xbus.c	/^static uint16_t xBusCRC16(uint16_t crc, uint8_t value)$/;"	f	file:
xBusChannelCount	./rx/xbus.c	/^static uint8_t xBusChannelCount;$/;"	v	file:
xBusChannelData	./rx/xbus.c	/^static uint16_t xBusChannelData[XBUS_RJ01_CHANNEL_COUNT];$/;"	v	file:
xBusDataIncoming	./rx/xbus.c	/^static bool xBusDataIncoming = false;$/;"	v	file:
xBusDataReceive	./rx/xbus.c	/^static void xBusDataReceive(uint16_t c)$/;"	f	file:
xBusFrame	./rx/xbus.c	/^static volatile uint8_t xBusFrame[XBUS_RJ01_FRAME_SIZE];$/;"	v	file:
xBusFrameLength	./rx/xbus.c	/^static uint8_t xBusFrameLength;$/;"	v	file:
xBusFramePosition	./rx/xbus.c	/^static uint8_t xBusFramePosition;$/;"	v	file:
xBusFrameReceived	./rx/xbus.c	/^static bool xBusFrameReceived = false;$/;"	v	file:
xBusFrameStatus	./rx/xbus.c	/^uint8_t xBusFrameStatus(void)$/;"	f
xBusInit	./rx/xbus.c	/^bool xBusInit(rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig, rcReadRawDataPtr *callback)$/;"	f
xBusProvider	./rx/xbus.c	/^static uint8_t xBusProvider;$/;"	v	file:
xBusReadRawRC	./rx/xbus.c	/^static uint16_t xBusReadRawRC(rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)$/;"	f	file:
xBusRj01CRC8	./rx/xbus.c	/^uint8_t xBusRj01CRC8(uint8_t inData, uint8_t seed)$/;"	f
xBusUnpackModeBFrame	./rx/xbus.c	/^static void xBusUnpackModeBFrame(uint8_t offsetBytes)$/;"	f	file:
xBusUnpackRJ01Frame	./rx/xbus.c	/^static void xBusUnpackRJ01Frame(void)$/;"	f	file:
xclrGpioPin	./drivers/barometer_bmp085.h	/^    uint16_t xclrGpioPin;$/;"	m	struct:bmp085Config_s
xclrGpioPort	./drivers/barometer_bmp085.h	/^    GPIO_TypeDef *xclrGpioPort;$/;"	m	struct:bmp085Config_s
xf	./flight/lowpass.h	/^    float xf[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
xmitState	./blackbox/blackbox.c	/^} xmitState;$/;"	v	typeref:struct:__anon33	file:
xy	./flight/imu.h	/^    uint8_t xy;                 \/\/ set the acc deadband for xy-Axis$/;"	m	struct:accDeadband_s
xy	./io/ledstrip.h	/^    uint8_t xy;     \/\/ see LED_X\/Y_MASK defines$/;"	m	struct:ledConfig_s
y	./flight/lowpass.h	/^    int32_t y[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
yaw	./common/maths.h	/^    float yaw;$/;"	m	struct:fp_angles
yaw	./flight/mixer.h	/^    float yaw;$/;"	m	struct:motorMixer_t
yaw	./sensors/sensors.h	/^    int16_t yaw;$/;"	m	struct:int16_flightDynamicsTrims_s
yawDegrees	./sensors/boardalignment.h	/^    int16_t yawDegrees;$/;"	m	struct:boardAlignment_s
yaw_control_direction	./config/config_master.h	/^    int8_t yaw_control_direction;           \/\/ change control direction of yaw (inverted, normal)$/;"	m	struct:master_t
yaw_deadband	./io/rc_controls.h	/^    uint8_t yaw_deadband;                   \/\/ introduce a deadband around the stick center for yaw axis. Must be greater than zero.$/;"	m	struct:rcControlsConfig_s
yaw_direction	./flight/mixer.h	/^    int8_t yaw_direction;$/;"	m	struct:mixerConfig_s
yaw_jump_prevention_limit	./flight/mixer.h	/^    uint16_t yaw_jump_prevention_limit;      \/\/ make limit configurable (original fixed value was 100)$/;"	m	struct:mixerConfig_s
yaw_p_limit	./flight/pid.h	/^    uint16_t yaw_p_limit;                   \/\/ set P term limit (fixed value was 300)$/;"	m	struct:pidProfile_s
yf	./flight/lowpass.h	/^    float yf[LOWPASS_NUM_COEF];$/;"	m	struct:lowpass_t
z	./flight/imu.h	/^    uint8_t z;                  \/\/ set the acc deadband for z-Axis, this ignores small accelerations$/;"	m	struct:accDeadband_s
zigzagEncode	./common/encoding.c	/^uint32_t zigzagEncode(int32_t value)$/;"	f
